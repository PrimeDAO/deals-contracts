{
  "address": "0x44251350E82B044a7c86DE0b25f63a52c4A2B8D5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoDepositManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "daoDepositManager",
          "type": "address"
        }
      ],
      "name": "DaoDepositManagerCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_moduleAddress",
          "type": "address"
        }
      ],
      "name": "activateModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "createDaoDepositManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "daoDepositManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoDepositManagerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_moduleAddress",
          "type": "address"
        }
      ],
      "name": "deactivateModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "getDaoDepositManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "hasDaoDepositManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isModule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newImplementation",
          "type": "address"
        }
      ],
      "name": "setDaoDepositManagerImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDealManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        }
      ],
      "name": "setDealManagerInModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8795bfccb3d1e395e17c66e81008dfc33da3c38a2241720744960bd477dc4ed2",
  "receipt": {
    "to": null,
    "from": "0xc039897eE5A0d14A3d1F212922FaF7e159Ab619F",
    "contractAddress": "0x44251350E82B044a7c86DE0b25f63a52c4A2B8D5",
    "transactionIndex": 218,
    "gasUsed": "728039",
    "logsBloom": "0x
    "blockHash": "0x60346d19d519ba72abd23fd2090bcb615ce117c35af86b415f1edc415427b5ca",
    "transactionHash": "0x8795bfccb3d1e395e17c66e81008dfc33da3c38a2241720744960bd477dc4ed2",
    "logs": [
      {
        "transactionIndex": 218,
        "blockNumber": 14705924,
        "transactionHash": "0x8795bfccb3d1e395e17c66e81008dfc33da3c38a2241720744960bd477dc4ed2",
        "address": "0x44251350E82B044a7c86DE0b25f63a52c4A2B8D5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c039897ee5a0d14a3d1f212922faf7e159ab619f"
        ],
        "data": "0x",
        "logIndex": 380,
        "blockHash": "0x60346d19d519ba72abd23fd2090bcb615ce117c35af86b415f1edc415427b5ca"
      }
    ],
    "blockNumber": 14705924,
    "cumulativeGasUsed": "17445908",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB448335Ff3105145dc6Cf805e544F1e4a41B35ca",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "numDeployments": 1,
  "solcInputHash": "7bfbbf30ca5a5618b1d18e7a63f720e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoDepositManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"daoDepositManager\",\"type\":\"address\"}],\"name\":\"DaoDepositManagerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moduleAddress\",\"type\":\"address\"}],\"name\":\"activateModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"createDaoDepositManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daoDepositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoDepositManagerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moduleAddress\",\"type\":\"address\"}],\"name\":\"deactivateModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"getDaoDepositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"hasDaoDepositManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"setDaoDepositManagerImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDealManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"setDealManagerInModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DaoDepositManagerCreated(address,address)\":{\"params\":{\"dao\":\"DAO address to which the DaoDepositManager is linked\",\"daoDepositManager\":\"Newly created DaoDepositManager contract address\"}}},\"kind\":\"dev\",\"methods\":{\"activateModule(address)\":{\"params\":{\"_moduleAddress\":\"The address of a Deals module\"}},\"constructor\":{\"params\":{\"_daoDepositManager\":\"The address of the DaoDepositManager implementation\"}},\"createDaoDepositManager(address)\":{\"params\":{\"_dao\":\"Address of the DAO for the DaoDepositContract\"}},\"deactivateModule(address)\":{\"params\":{\"_moduleAddress\":\"The address of a Deals module\"}},\"getDaoDepositManager(address)\":{\"params\":{\"_dao\":\"DAO address for which to return the DaoDepositManger\"},\"returns\":{\"_0\":\"address      Address of the DaoDepositManager associated with the _dao\"}},\"hasDaoDepositManager(address)\":{\"params\":{\"_dao\":\"DAO address for which to check for an existing DaoDepositManger\"},\"returns\":{\"_0\":\"bool         A bool flag indicating whether a DaoDepositManager contract exists\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDaoDepositManagerImplementation(address)\":{\"params\":{\"_newImplementation\":\"The new address of the DaoDepositManager\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PrimeDeals Deal Manager\",\"version\":1},\"userdoc\":{\"events\":{\"DaoDepositManagerCreated(address,address)\":{\"notice\":\"This event is emitted when a DaoDepositManager is created\"}},\"kind\":\"user\",\"methods\":{\"activateModule(address)\":{\"notice\":\"Activates a new Deals module\"},\"constructor\":{\"notice\":\"Constructor\"},\"createDaoDepositManager(address)\":{\"notice\":\"Creates a DaoDepositManager for a DAO\"},\"daoDepositManager(address)\":{\"notice\":\"Address DAO => address DaoDepositManager of the DAO\"},\"daoDepositManagerImplementation()\":{\"notice\":\"Address of the current implementation of the DaoDepositManager\"},\"deactivateModule(address)\":{\"notice\":\"Deactivates a Deals module\"},\"getDaoDepositManager(address)\":{\"notice\":\"Returns the DaoDepositManager of a DAO\"},\"hasDaoDepositManager(address)\":{\"notice\":\"Returns whether a DAO already has a DaoDepositManager\"},\"isModule(address)\":{\"notice\":\"module address => true/false\"},\"setDaoDepositManagerImplementation(address)\":{\"notice\":\"Sets a new address for the DaoDepositManager implementation\"},\"weth()\":{\"notice\":\"Address of the ETH wrapping contract\"}},\"notice\":\"Smart contract to serve as the manager for the PrimeDeals architecture\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DealManager.sol\":\"DealManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DealManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IDaoDepositManager.sol\\\";\\nimport \\\"./interfaces/IModuleBase.sol\\\";\\n\\n/**\\n * @title                   PrimeDeals Deal Manager\\n * @notice                  Smart contract to serve as the manager\\n                            for the PrimeDeals architecture\\n */\\ncontract DealManager is Ownable {\\n    /// Address of the current implementation of the\\n    /// DaoDepositManager\\n    address public daoDepositManagerImplementation;\\n    /// Address of the ETH wrapping contract\\n    address public immutable weth;\\n    /// Address DAO => address DaoDepositManager of the DAO\\n    mapping(address => address) public daoDepositManager;\\n    /// module address => true/false\\n    mapping(address => bool) public isModule;\\n\\n    /**\\n     * @notice                      This event is emitted when a DaoDepositManager is created\\n     * @param dao                   DAO address to which the DaoDepositManager is linked\\n     * @param daoDepositManager     Newly created DaoDepositManager contract address\\n     */\\n    event DaoDepositManagerCreated(\\n        address indexed dao,\\n        address indexed daoDepositManager\\n    );\\n\\n    /**\\n     * @notice                      Constructor\\n     * @param _daoDepositManager    The address of the DaoDepositManager implementation\\n     */\\n    constructor(address _daoDepositManager, address _weth) {\\n        require(\\n            _daoDepositManager != address(0) &&\\n                _daoDepositManager != address(this),\\n            \\\"DealManager: Error 100\\\"\\n        );\\n        require(\\n            _weth != address(0) && _weth != address(this),\\n            \\\"DealManager: Error 100\\\"\\n        );\\n        daoDepositManagerImplementation = _daoDepositManager;\\n        weth = _weth;\\n    }\\n\\n    /**\\n     * @notice                      Sets a new address for the DaoDepositManager implementation\\n     * @param _newImplementation    The new address of the DaoDepositManager\\n     */\\n    function setDaoDepositManagerImplementation(address _newImplementation)\\n        external\\n        onlyOwner\\n    {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _newImplementation != address(0) &&\\n                _newImplementation != address(this),\\n            \\\"DealManager: Error 100\\\"\\n        );\\n        daoDepositManagerImplementation = _newImplementation;\\n    }\\n\\n    function setDealManagerInModule(address _newDealManager, address _module)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _newDealManager != address(0) && _newDealManager != address(this),\\n            \\\"DealManager: Error 100\\\"\\n        );\\n        IDaoDepositManager(_module).setDealManager(_newDealManager);\\n    }\\n\\n    /**\\n     * @notice                  Activates a new Deals module\\n     * @param _moduleAddress    The address of a Deals module\\n     */\\n    function activateModule(address _moduleAddress) external onlyOwner {\\n        require(\\n            _moduleAddress != address(0) && _moduleAddress != address(this),\\n            \\\"DealManager: Error 100\\\"\\n        );\\n        require(\\n            IModuleBase(_moduleAddress).dealManager() == address(this),\\n            \\\"DealManager: Error 260\\\"\\n        );\\n\\n        isModule[_moduleAddress] = true;\\n    }\\n\\n    /**\\n     * @notice                  Deactivates a Deals module\\n     * @param _moduleAddress    The address of a Deals module\\n     */\\n    function deactivateModule(address _moduleAddress) external onlyOwner {\\n        require(\\n            _moduleAddress != address(0) && _moduleAddress != address(this),\\n            \\\"DealManager: Error 100\\\"\\n        );\\n\\n        isModule[_moduleAddress] = false;\\n    }\\n\\n    /**\\n     * @notice              Creates a DaoDepositManager for a DAO\\n     * @param _dao          Address of the DAO for the DaoDepositContract\\n     */\\n    function createDaoDepositManager(address _dao) public {\\n        require(\\n            _dao != address(0) && _dao != address(this),\\n            \\\"DealManager: Error 100\\\"\\n        );\\n        require(\\n            daoDepositManager[_dao] == address(0),\\n            \\\"DealManager: Error 001\\\"\\n        );\\n        require(\\n            daoDepositManagerImplementation != address(0),\\n            \\\"DealManager: Error 261\\\"\\n        );\\n        address newContract = Clones.clone(daoDepositManagerImplementation);\\n        IDaoDepositManager(newContract).initialize(_dao);\\n        require(\\n            IDaoDepositManager(newContract).dealManager() == address(this),\\n            \\\"DealManager: Error 260\\\"\\n        );\\n        daoDepositManager[_dao] = newContract;\\n        emit DaoDepositManagerCreated(_dao, newContract);\\n    }\\n\\n    /**\\n     * @notice              Returns whether a DAO already has a DaoDepositManager\\n     * @param _dao          DAO address for which to check for an existing DaoDepositManger\\n     * @return bool         A bool flag indicating whether a DaoDepositManager contract exists\\n     */\\n    function hasDaoDepositManager(address _dao) external view returns (bool) {\\n        return getDaoDepositManager(_dao) != address(0) ? true : false;\\n    }\\n\\n    /**\\n     * @notice              Returns the DaoDepositManager of a DAO\\n     * @param _dao          DAO address for which to return the DaoDepositManger\\n     * @return address      Address of the DaoDepositManager associated with the _dao\\n     */\\n    function getDaoDepositManager(address _dao) public view returns (address) {\\n        return daoDepositManager[_dao];\\n    }\\n}\\n\",\"keccak256\":\"0xa95c19bb6126336af32f333337a2601431207c3d689902fa1ae1321bca1be57c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IDaoDepositManager.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDaoDepositManager {\\n    function dealManager() external returns (address);\\n\\n    function initialize(address _dao) external;\\n\\n    function setDealManager(address _newDealManager) external;\\n\\n    function deposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function multipleDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable;\\n\\n    function registerDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external;\\n\\n    function registerDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens\\n    ) external;\\n\\n    function withdraw(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId,\\n        address _sender\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function sendToModule(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function startVesting(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount,\\n        uint32 _vestingCliff,\\n        uint32 _vestingDuration\\n    ) external payable;\\n\\n    function claimVestings() external;\\n\\n    function verifyBalance(address _token) external view;\\n\\n    function getDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId\\n    )\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAvailableDealBalance(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getTotalDepositCount(address _dealModule, uint32 _dealId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableAmountOfDepositor(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getBalance(address _token) external view returns (uint256);\\n\\n    function getVestedBalance(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0af9a01ea8d49250244085bf5ead5b86a36f4ed466606eb4b8db1097d3aeec02\",\"license\":\"Unlicense\"},\"contracts/interfaces/IModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IModuleBase {\\n    function moduleIdentifier() external view returns (bytes32);\\n\\n    function dealManager() external view returns (address);\\n\\n    function hasDealExpired(uint32 _dealId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x018e3884c2623613014747a4548002f0fd3e8fb1faa923505a48e1588c3293a5\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610d30380380610d3083398101604081905261002f916101a8565b6100383361013c565b6001600160a01b0382161580159061005957506001600160a01b0382163014155b6100aa5760405162461bcd60e51b815260206004820152601660248201527f4465616c4d616e616765723a204572726f72203130300000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038116158015906100cb57506001600160a01b0381163014155b6101175760405162461bcd60e51b815260206004820152601660248201527f4465616c4d616e616765723a204572726f72203130300000000000000000000060448201526064016100a1565b600180546001600160a01b0319166001600160a01b03938416179055166080526101db565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146101a357600080fd5b919050565b600080604083850312156101bb57600080fd5b6101c48361018c565b91506101d26020840161018c565b90509250929050565b608051610b3a6101f660003960006101750152610b3a6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806371cfe4981161008c578063c221e44b11610066578063c221e44b14610222578063e0daf0c914610235578063f2fde38b14610248578063fb22e0f21461025b57600080fd5b806371cfe498146101d25780638da5cb5b146101fe57806394ffad741461020f57600080fd5b80631bcf9e2f116100c85780631bcf9e2f1461015d5780633fc8cef31461017057806342f6e38914610197578063715018a6146101ca57600080fd5b80630c841231146100ef57806310096d2814610104578063167e0cbf1461014a575b600080fd5b6101026100fd366004610a25565b61026e565b005b61012d610112366004610a25565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610102610158366004610a49565b610300565b60015461012d906001600160a01b031681565b61012d7f000000000000000000000000000000000000000000000000000000000000000081565b6101ba6101a5366004610a25565b60036020526000908152604090205460ff1681565b6040519015158152602001610141565b6101026103c6565b61012d6101e0366004610a25565b6001600160a01b039081166000908152600260205260409020541690565b6000546001600160a01b031661012d565b61010261021d366004610a25565b6103fc565b6101ba610230366004610a25565b610676565b610102610243366004610a25565b6106ba565b610102610256366004610a25565b610742565b610102610269366004610a25565b6107dd565b6000546001600160a01b031633146102a15760405162461bcd60e51b815260040161029890610a82565b60405180910390fd5b6001600160a01b038116158015906102c257506001600160a01b0381163014155b6102de5760405162461bcd60e51b815260040161029890610ab7565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461032a5760405162461bcd60e51b815260040161029890610a82565b6001600160a01b0382161580159061034b57506001600160a01b0382163014155b6103675760405162461bcd60e51b815260040161029890610ab7565b6040516306858fa560e31b81526001600160a01b03838116600483015282169063342c7d2890602401600060405180830381600087803b1580156103aa57600080fd5b505af11580156103be573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103f05760405162461bcd60e51b815260040161029890610a82565b6103fa6000610923565b565b6001600160a01b0381161580159061041d57506001600160a01b0381163014155b6104395760405162461bcd60e51b815260040161029890610ab7565b6001600160a01b03818116600090815260026020526040902054161561049a5760405162461bcd60e51b81526020600482015260166024820152754465616c4d616e616765723a204572726f722030303160501b6044820152606401610298565b6001546001600160a01b03166104eb5760405162461bcd60e51b81526020600482015260166024820152754465616c4d616e616765723a204572726f722032363160501b6044820152606401610298565b600154600090610503906001600160a01b0316610973565b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b15801561054a57600080fd5b505af115801561055e573d6000803e3d6000fd5b50505050306001600160a01b0316816001600160a01b03166301df538d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156105ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d09190610ae7565b6001600160a01b03161461061f5760405162461bcd60e51b815260206004820152601660248201527504465616c4d616e616765723a204572726f72203236360541b6044820152606401610298565b6001600160a01b0382811660008181526002602052604080822080546001600160a01b0319169486169485179055517f265a432561b8428849ed76059de69c1301cfed8e70b5f9a7fc54df536a85d5d19190a35050565b60008061069b836001600160a01b039081166000908152600260205260409020541690565b6001600160a01b031614156106b15760006106b4565b60015b92915050565b6000546001600160a01b031633146106e45760405162461bcd60e51b815260040161029890610a82565b6001600160a01b0381161580159061070557506001600160a01b0381163014155b6107215760405162461bcd60e51b815260040161029890610ab7565b6001600160a01b03166000908152600360205260409020805460ff19169055565b6000546001600160a01b0316331461076c5760405162461bcd60e51b815260040161029890610a82565b6001600160a01b0381166107d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610298565b6107da81610923565b50565b6000546001600160a01b031633146108075760405162461bcd60e51b815260040161029890610a82565b6001600160a01b0381161580159061082857506001600160a01b0381163014155b6108445760405162461bcd60e51b815260040161029890610ab7565b306001600160a01b0316816001600160a01b03166301df538d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561088c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b09190610ae7565b6001600160a01b0316146108ff5760405162461bcd60e51b815260206004820152601660248201527504465616c4d616e616765723a204572726f72203236360541b6044820152606401610298565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610a0b5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610298565b919050565b6001600160a01b03811681146107da57600080fd5b600060208284031215610a3757600080fd5b8135610a4281610a10565b9392505050565b60008060408385031215610a5c57600080fd5b8235610a6781610a10565b91506020830135610a7781610a10565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526016908201527504465616c4d616e616765723a204572726f72203130360541b604082015260600190565b600060208284031215610af957600080fd5b8151610a4281610a1056fea264697066735822122093cbd1537f831de71b1e3850083563aa0a5a8a6a900feabb83cac809c54ad63d64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806371cfe4981161008c578063c221e44b11610066578063c221e44b14610222578063e0daf0c914610235578063f2fde38b14610248578063fb22e0f21461025b57600080fd5b806371cfe498146101d25780638da5cb5b146101fe57806394ffad741461020f57600080fd5b80631bcf9e2f116100c85780631bcf9e2f1461015d5780633fc8cef31461017057806342f6e38914610197578063715018a6146101ca57600080fd5b80630c841231146100ef57806310096d2814610104578063167e0cbf1461014a575b600080fd5b6101026100fd366004610a25565b61026e565b005b61012d610112366004610a25565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610102610158366004610a49565b610300565b60015461012d906001600160a01b031681565b61012d7f000000000000000000000000000000000000000000000000000000000000000081565b6101ba6101a5366004610a25565b60036020526000908152604090205460ff1681565b6040519015158152602001610141565b6101026103c6565b61012d6101e0366004610a25565b6001600160a01b039081166000908152600260205260409020541690565b6000546001600160a01b031661012d565b61010261021d366004610a25565b6103fc565b6101ba610230366004610a25565b610676565b610102610243366004610a25565b6106ba565b610102610256366004610a25565b610742565b610102610269366004610a25565b6107dd565b6000546001600160a01b031633146102a15760405162461bcd60e51b815260040161029890610a82565b60405180910390fd5b6001600160a01b038116158015906102c257506001600160a01b0381163014155b6102de5760405162461bcd60e51b815260040161029890610ab7565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461032a5760405162461bcd60e51b815260040161029890610a82565b6001600160a01b0382161580159061034b57506001600160a01b0382163014155b6103675760405162461bcd60e51b815260040161029890610ab7565b6040516306858fa560e31b81526001600160a01b03838116600483015282169063342c7d2890602401600060405180830381600087803b1580156103aa57600080fd5b505af11580156103be573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103f05760405162461bcd60e51b815260040161029890610a82565b6103fa6000610923565b565b6001600160a01b0381161580159061041d57506001600160a01b0381163014155b6104395760405162461bcd60e51b815260040161029890610ab7565b6001600160a01b03818116600090815260026020526040902054161561049a5760405162461bcd60e51b81526020600482015260166024820152754465616c4d616e616765723a204572726f722030303160501b6044820152606401610298565b6001546001600160a01b03166104eb5760405162461bcd60e51b81526020600482015260166024820152754465616c4d616e616765723a204572726f722032363160501b6044820152606401610298565b600154600090610503906001600160a01b0316610973565b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b15801561054a57600080fd5b505af115801561055e573d6000803e3d6000fd5b50505050306001600160a01b0316816001600160a01b03166301df538d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156105ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d09190610ae7565b6001600160a01b03161461061f5760405162461bcd60e51b815260206004820152601660248201527504465616c4d616e616765723a204572726f72203236360541b6044820152606401610298565b6001600160a01b0382811660008181526002602052604080822080546001600160a01b0319169486169485179055517f265a432561b8428849ed76059de69c1301cfed8e70b5f9a7fc54df536a85d5d19190a35050565b60008061069b836001600160a01b039081166000908152600260205260409020541690565b6001600160a01b031614156106b15760006106b4565b60015b92915050565b6000546001600160a01b031633146106e45760405162461bcd60e51b815260040161029890610a82565b6001600160a01b0381161580159061070557506001600160a01b0381163014155b6107215760405162461bcd60e51b815260040161029890610ab7565b6001600160a01b03166000908152600360205260409020805460ff19169055565b6000546001600160a01b0316331461076c5760405162461bcd60e51b815260040161029890610a82565b6001600160a01b0381166107d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610298565b6107da81610923565b50565b6000546001600160a01b031633146108075760405162461bcd60e51b815260040161029890610a82565b6001600160a01b0381161580159061082857506001600160a01b0381163014155b6108445760405162461bcd60e51b815260040161029890610ab7565b306001600160a01b0316816001600160a01b03166301df538d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561088c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b09190610ae7565b6001600160a01b0316146108ff5760405162461bcd60e51b815260206004820152601660248201527504465616c4d616e616765723a204572726f72203236360541b6044820152606401610298565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610a0b5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610298565b919050565b6001600160a01b03811681146107da57600080fd5b600060208284031215610a3757600080fd5b8135610a4281610a10565b9392505050565b60008060408385031215610a5c57600080fd5b8235610a6781610a10565b91506020830135610a7781610a10565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526016908201527504465616c4d616e616765723a204572726f72203130360541b604082015260600190565b600060208284031215610af957600080fd5b8151610a4281610a1056fea264697066735822122093cbd1537f831de71b1e3850083563aa0a5a8a6a900feabb83cac809c54ad63d64736f6c634300080a0033",
  "devdoc": {
    "events": {
      "DaoDepositManagerCreated(address,address)": {
        "params": {
          "dao": "DAO address to which the DaoDepositManager is linked",
          "daoDepositManager": "Newly created DaoDepositManager contract address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "activateModule(address)": {
        "params": {
          "_moduleAddress": "The address of a Deals module"
        }
      },
      "constructor": {
        "params": {
          "_daoDepositManager": "The address of the DaoDepositManager implementation"
        }
      },
      "createDaoDepositManager(address)": {
        "params": {
          "_dao": "Address of the DAO for the DaoDepositContract"
        }
      },
      "deactivateModule(address)": {
        "params": {
          "_moduleAddress": "The address of a Deals module"
        }
      },
      "getDaoDepositManager(address)": {
        "params": {
          "_dao": "DAO address for which to return the DaoDepositManger"
        },
        "returns": {
          "_0": "address      Address of the DaoDepositManager associated with the _dao"
        }
      },
      "hasDaoDepositManager(address)": {
        "params": {
          "_dao": "DAO address for which to check for an existing DaoDepositManger"
        },
        "returns": {
          "_0": "bool         A bool flag indicating whether a DaoDepositManager contract exists"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDaoDepositManagerImplementation(address)": {
        "params": {
          "_newImplementation": "The new address of the DaoDepositManager"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PrimeDeals Deal Manager",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DaoDepositManagerCreated(address,address)": {
        "notice": "This event is emitted when a DaoDepositManager is created"
      }
    },
    "kind": "user",
    "methods": {
      "activateModule(address)": {
        "notice": "Activates a new Deals module"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "createDaoDepositManager(address)": {
        "notice": "Creates a DaoDepositManager for a DAO"
      },
      "daoDepositManager(address)": {
        "notice": "Address DAO => address DaoDepositManager of the DAO"
      },
      "daoDepositManagerImplementation()": {
        "notice": "Address of the current implementation of the DaoDepositManager"
      },
      "deactivateModule(address)": {
        "notice": "Deactivates a Deals module"
      },
      "getDaoDepositManager(address)": {
        "notice": "Returns the DaoDepositManager of a DAO"
      },
      "hasDaoDepositManager(address)": {
        "notice": "Returns whether a DAO already has a DaoDepositManager"
      },
      "isModule(address)": {
        "notice": "module address => true/false"
      },
      "setDaoDepositManagerImplementation(address)": {
        "notice": "Sets a new address for the DaoDepositManager implementation"
      },
      "weth()": {
        "notice": "Address of the ETH wrapping contract"
      }
    },
    "notice": "Smart contract to serve as the manager for the PrimeDeals architecture",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DealManager.sol:DealManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2576,
        "contract": "contracts/DealManager.sol:DealManager",
        "label": "daoDepositManagerImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2584,
        "contract": "contracts/DealManager.sol:DealManager",
        "label": "daoDepositManager",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2589,
        "contract": "contracts/DealManager.sol:DealManager",
        "label": "isModule",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}