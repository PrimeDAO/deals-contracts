{
  "address": "0x0b500dB17E4D9e8167253956546A9A2b3412a432",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "daoDepositManager",
          "type": "address"
        }
      ],
      "name": "DaoDepositManagerCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addressIsModule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "createDaoDepositManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "daoDepositManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoDepositManagerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_moduleAddress",
          "type": "address"
        }
      ],
      "name": "deactivateModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "getDaoDepositManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "hasDaoDepositManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isModule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_moduleAddress",
          "type": "address"
        }
      ],
      "name": "registerModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newImplementation",
          "type": "address"
        }
      ],
      "name": "setDaoDepositManagerImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newWETH",
          "type": "address"
        }
      ],
      "name": "setWETHAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d33d4300965df8cb93338d807f169d4c8f5580cf175ea8edb3f05410f02a198",
  "receipt": {
    "to": null,
    "from": "0xc039897eE5A0d14A3d1F212922FaF7e159Ab619F",
    "contractAddress": "0x0b500dB17E4D9e8167253956546A9A2b3412a432",
    "transactionIndex": 19,
    "gasUsed": "702770",
    "logsBloom": "0x
    "blockHash": "0xbb85e608cae91c52841a2468329df1733e051720d608b7b9eff6e76eebf3170b",
    "transactionHash": "0x2d33d4300965df8cb93338d807f169d4c8f5580cf175ea8edb3f05410f02a198",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 10367722,
        "transactionHash": "0x2d33d4300965df8cb93338d807f169d4c8f5580cf175ea8edb3f05410f02a198",
        "address": "0x0b500dB17E4D9e8167253956546A9A2b3412a432",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c039897ee5a0d14a3d1f212922faf7e159ab619f"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0xbb85e608cae91c52841a2468329df1733e051720d608b7b9eff6e76eebf3170b"
      }
    ],
    "blockNumber": 10367722,
    "cumulativeGasUsed": "11607447",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cd75873b169443eace4faca2bc5a1b52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"daoDepositManager\",\"type\":\"address\"}],\"name\":\"DaoDepositManagerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addressIsModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"createDaoDepositManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daoDepositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoDepositManagerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moduleAddress\",\"type\":\"address\"}],\"name\":\"deactivateModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"getDaoDepositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"hasDaoDepositManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moduleAddress\",\"type\":\"address\"}],\"name\":\"registerModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"setDaoDepositManagerImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWETH\",\"type\":\"address\"}],\"name\":\"setWETHAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract to serve as the manager for the PrimeDeals architecture\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PrimeDeals Deal Manager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DealManager.sol\":\"DealManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DealManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IDaoDepositManager.sol\\\";\\nimport \\\"./interfaces/IModuleBase.sol\\\";\\n\\n/**\\n * @title PrimeDeals Deal Manager\\n * @dev   Smart contract to serve as the manager\\n          for the PrimeDeals architecture\\n */\\ncontract DealManager is Ownable {\\n    // Address of the current implementation of the\\n    // deposit contract\\n    address public daoDepositManagerImplementation;\\n\\n    // Address of the ETH wrapping contract\\n    address public weth;\\n\\n    // Address DAO => address dao deposit manager of the DAO\\n    mapping(address => address) public daoDepositManager;\\n\\n    // module address => true/false\\n    mapping(address => bool) public isModule;\\n\\n    event DaoDepositManagerCreated(\\n        address indexed dao,\\n        address indexed daoDepositManager\\n    );\\n\\n    // Sets a new address for the deposit contract implementation\\n    function setDaoDepositManagerImplementation(address _newImplementation)\\n        external\\n        onlyOwner\\n    {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _newImplementation != address(0),\\n            \\\"BASECONTRACT-INVALID-IMPLEMENTATION-ADDRESS\\\"\\n        );\\n        daoDepositManagerImplementation = _newImplementation;\\n    }\\n\\n    // Sets a new address for the deposit contract implementation\\n    function setWETHAddress(address _newWETH) external onlyOwner {\\n        // solhint-disable-next-line reason-string\\n        require(_newWETH != address(0), \\\"BASECONTRACT-INVALID-WETH-ADDRESS\\\");\\n        weth = _newWETH;\\n    }\\n\\n    // Registers a new module\\n    function registerModule(address _moduleAddress) external onlyOwner {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _moduleAddress != address(0),\\n            \\\"BASECONTRACT-INVALID-MODULE-ADDRESS\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(\\n            !isModule[_moduleAddress],\\n            \\\"BASECONTRACT-MODULE-ALREADY-REGISTERED\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(\\n            IModuleBase(_moduleAddress).dealManager() == address(this),\\n            \\\"BASECONTRACT-MODULE-SETUP-INVALID\\\"\\n        );\\n\\n        isModule[_moduleAddress] = true;\\n    }\\n\\n    // Deactivates a module\\n    function deactivateModule(address _moduleAddress) external onlyOwner {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _moduleAddress != address(0),\\n            \\\"BASECONTRACT-INVALID-MODULE-ADDRESS\\\"\\n        );\\n\\n        isModule[_moduleAddress] = false;\\n    }\\n\\n    // Creates a deposit contract for a DAO\\n    function createDaoDepositManager(address _dao) public {\\n        require(_dao != address(0), \\\"BASECONTRACT-INVALID-DAO-ADDRESS\\\");\\n        // solhint-disable-next-line reason-string\\n        require(\\n            daoDepositManager[_dao] == address(0),\\n            \\\"BASECONTRACT-DEPOSIT-CONTRACT-ALREADY-EXISTS\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(\\n            daoDepositManagerImplementation != address(0),\\n            \\\"BASECONTRACT-DEPOSIT-CONTRACT-IMPLEMENTATION-IS-NOT-SET\\\"\\n        );\\n        address newContract = Clones.clone(daoDepositManagerImplementation);\\n        IDaoDepositManager(newContract).initialize(_dao);\\n        daoDepositManager[_dao] = newContract;\\n        emit DaoDepositManagerCreated(_dao, newContract);\\n    }\\n\\n    // Returns whether a DAO already has a deposit contract\\n    function hasDaoDepositManager(address _dao) public view returns (bool) {\\n        return getDaoDepositManager(_dao) != address(0) ? true : false;\\n    }\\n\\n    // Returns the deposit contract of a DAO\\n    function getDaoDepositManager(address _dao) public view returns (address) {\\n        return daoDepositManager[_dao];\\n    }\\n\\n    function addressIsModule(address _address) public view returns (bool) {\\n        return isModule[_address];\\n    }\\n\\n    modifier onlyModule() {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            addressIsModule(msg.sender),\\n            \\\"BASECONTRACT-CAN-ONLY-BE-CALLED-BY-MODULE\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdc58b0c53e69879d3caf8846838e5c5b77efedf54ca93c96d3f5545840f93e6c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IDaoDepositManager.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDaoDepositManager {\\n    function initialize(address _dao) external;\\n\\n    function migrateBaseContract(address _newDaoDepositManager) external;\\n\\n    function deposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function multipleDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable;\\n\\n    function registerDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external;\\n\\n    function registerDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens\\n    ) external;\\n\\n    function withdraw(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId,\\n        address _sender\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function sendToModule(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function startVesting(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount,\\n        uint32 _vestingCliff,\\n        uint32 _vestingDuration\\n    ) external;\\n\\n    function claimVestings() external;\\n\\n    function verifyBalance(address _token) external view;\\n\\n    function getDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId\\n    )\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAvailableDealBalance(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getTotalDepositCount(address _dealModule, uint32 _dealId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableAmountOfUser(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getBalance(address _token) external view returns (uint256);\\n\\n    function getVestedBalance(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4a8f73a4946b475dff5781bc3f85e36f7e06e5c3bf20c3c4bd7b49631b1b348a\",\"license\":\"Unlicense\"},\"contracts/interfaces/IModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IModuleBase {\\n    function moduleIdentifier() external view returns (bytes32);\\n\\n    function dealManager() external view returns (address);\\n\\n    function hasDealExpired(uint32 _dealId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x018e3884c2623613014747a4548002f0fd3e8fb1faa923505a48e1588c3293a5\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b4a8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063ad64ae4b11610066578063ad64ae4b14610245578063c221e44b14610258578063e0daf0c91461026b578063f2fde38b1461027e57600080fd5b8063715018a6146101ed57806371cfe498146101f55780638da5cb5b1461022157806394ffad741461023257600080fd5b80631bcf9e2f116100d35780631bcf9e2f146101915780633fc8cef3146101a457806342f6e389146101b75780636a4234eb146101da57600080fd5b80630c841231146100fa57806310096d281461010f5780631b5fc51114610155575b600080fd5b61010d610108366004610a5b565b610291565b005b61013861011d366004610a5b565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610181610163366004610a5b565b6001600160a01b031660009081526004602052604090205460ff1690565b604051901515815260200161014c565b600154610138906001600160a01b031681565b600254610138906001600160a01b031681565b6101816101c5366004610a5b565b60046020526000908152604090205460ff1681565b61010d6101e8366004610a5b565b610350565b61010d6103fc565b610138610203366004610a5b565b6001600160a01b039081166000908152600360205260409020541690565b6000546001600160a01b0316610138565b61010d610240366004610a5b565b610432565b61010d610253366004610a5b565b610651565b610181610266366004610a5b565b610809565b61010d610279366004610a5b565b61084d565b61010d61028c366004610a5b565b6108be565b6000546001600160a01b031633146102c45760405162461bcd60e51b81526004016102bb90610a7f565b60405180910390fd5b6001600160a01b03811661032e5760405162461bcd60e51b815260206004820152602b60248201527f42415345434f4e54524143542d494e56414c49442d494d504c454d454e54415460448201526a494f4e2d4144445245535360a81b60648201526084016102bb565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461037a5760405162461bcd60e51b81526004016102bb90610a7f565b6001600160a01b0381166103da5760405162461bcd60e51b815260206004820152602160248201527f42415345434f4e54524143542d494e56414c49442d574554482d4144445245536044820152605360f81b60648201526084016102bb565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104265760405162461bcd60e51b81526004016102bb90610a7f565b6104306000610959565b565b6001600160a01b0381166104885760405162461bcd60e51b815260206004820181905260248201527f42415345434f4e54524143542d494e56414c49442d44414f2d4144445245535360448201526064016102bb565b6001600160a01b0381811660009081526003602052604090205416156105055760405162461bcd60e51b815260206004820152602c60248201527f42415345434f4e54524143542d4445504f5349542d434f4e54524143542d414c60448201526b52454144592d45584953545360a01b60648201526084016102bb565b6001546001600160a01b03166105835760405162461bcd60e51b815260206004820152603760248201527f42415345434f4e54524143542d4445504f5349542d434f4e54524143542d494d60448201527f504c454d454e544154494f4e2d49532d4e4f542d53455400000000000000000060648201526084016102bb565b60015460009061059b906001600160a01b03166109a9565b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b1580156105e257600080fd5b505af11580156105f6573d6000803e3d6000fd5b505050506001600160a01b0382811660008181526003602052604080822080546001600160a01b0319169486169485179055517f265a432561b8428849ed76059de69c1301cfed8e70b5f9a7fc54df536a85d5d19190a35050565b6000546001600160a01b0316331461067b5760405162461bcd60e51b81526004016102bb90610a7f565b6001600160a01b0381166106a15760405162461bcd60e51b81526004016102bb90610ab4565b6001600160a01b03811660009081526004602052604090205460ff16156107195760405162461bcd60e51b815260206004820152602660248201527f42415345434f4e54524143542d4d4f44554c452d414c52454144592d5245474960448201526514d51154915160d21b60648201526084016102bb565b306001600160a01b0316816001600160a01b03166301df538d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190610af7565b6001600160a01b0316146107e55760405162461bcd60e51b815260206004820152602160248201527f42415345434f4e54524143542d4d4f44554c452d53455455502d494e56414c496044820152601160fa1b60648201526084016102bb565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b60008061082e836001600160a01b039081166000908152600360205260409020541690565b6001600160a01b03161415610844576000610847565b60015b92915050565b6000546001600160a01b031633146108775760405162461bcd60e51b81526004016102bb90610a7f565b6001600160a01b03811661089d5760405162461bcd60e51b81526004016102bb90610ab4565b6001600160a01b03166000908152600460205260409020805460ff19169055565b6000546001600160a01b031633146108e85760405162461bcd60e51b81526004016102bb90610a7f565b6001600160a01b03811661094d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bb565b61095681610959565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610a415760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016102bb565b919050565b6001600160a01b038116811461095657600080fd5b600060208284031215610a6d57600080fd5b8135610a7881610a46565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526023908201527f42415345434f4e54524143542d494e56414c49442d4d4f44554c452d4144445260408201526245535360e81b606082015260800190565b600060208284031215610b0957600080fd5b8151610a7881610a4656fea2646970667358221220ef61e284b2b75ccba2de002c31316cee8c04b4bc0c7f989012a89216d8c7558c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063ad64ae4b11610066578063ad64ae4b14610245578063c221e44b14610258578063e0daf0c91461026b578063f2fde38b1461027e57600080fd5b8063715018a6146101ed57806371cfe498146101f55780638da5cb5b1461022157806394ffad741461023257600080fd5b80631bcf9e2f116100d35780631bcf9e2f146101915780633fc8cef3146101a457806342f6e389146101b75780636a4234eb146101da57600080fd5b80630c841231146100fa57806310096d281461010f5780631b5fc51114610155575b600080fd5b61010d610108366004610a5b565b610291565b005b61013861011d366004610a5b565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610181610163366004610a5b565b6001600160a01b031660009081526004602052604090205460ff1690565b604051901515815260200161014c565b600154610138906001600160a01b031681565b600254610138906001600160a01b031681565b6101816101c5366004610a5b565b60046020526000908152604090205460ff1681565b61010d6101e8366004610a5b565b610350565b61010d6103fc565b610138610203366004610a5b565b6001600160a01b039081166000908152600360205260409020541690565b6000546001600160a01b0316610138565b61010d610240366004610a5b565b610432565b61010d610253366004610a5b565b610651565b610181610266366004610a5b565b610809565b61010d610279366004610a5b565b61084d565b61010d61028c366004610a5b565b6108be565b6000546001600160a01b031633146102c45760405162461bcd60e51b81526004016102bb90610a7f565b60405180910390fd5b6001600160a01b03811661032e5760405162461bcd60e51b815260206004820152602b60248201527f42415345434f4e54524143542d494e56414c49442d494d504c454d454e54415460448201526a494f4e2d4144445245535360a81b60648201526084016102bb565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461037a5760405162461bcd60e51b81526004016102bb90610a7f565b6001600160a01b0381166103da5760405162461bcd60e51b815260206004820152602160248201527f42415345434f4e54524143542d494e56414c49442d574554482d4144445245536044820152605360f81b60648201526084016102bb565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104265760405162461bcd60e51b81526004016102bb90610a7f565b6104306000610959565b565b6001600160a01b0381166104885760405162461bcd60e51b815260206004820181905260248201527f42415345434f4e54524143542d494e56414c49442d44414f2d4144445245535360448201526064016102bb565b6001600160a01b0381811660009081526003602052604090205416156105055760405162461bcd60e51b815260206004820152602c60248201527f42415345434f4e54524143542d4445504f5349542d434f4e54524143542d414c60448201526b52454144592d45584953545360a01b60648201526084016102bb565b6001546001600160a01b03166105835760405162461bcd60e51b815260206004820152603760248201527f42415345434f4e54524143542d4445504f5349542d434f4e54524143542d494d60448201527f504c454d454e544154494f4e2d49532d4e4f542d53455400000000000000000060648201526084016102bb565b60015460009061059b906001600160a01b03166109a9565b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b1580156105e257600080fd5b505af11580156105f6573d6000803e3d6000fd5b505050506001600160a01b0382811660008181526003602052604080822080546001600160a01b0319169486169485179055517f265a432561b8428849ed76059de69c1301cfed8e70b5f9a7fc54df536a85d5d19190a35050565b6000546001600160a01b0316331461067b5760405162461bcd60e51b81526004016102bb90610a7f565b6001600160a01b0381166106a15760405162461bcd60e51b81526004016102bb90610ab4565b6001600160a01b03811660009081526004602052604090205460ff16156107195760405162461bcd60e51b815260206004820152602660248201527f42415345434f4e54524143542d4d4f44554c452d414c52454144592d5245474960448201526514d51154915160d21b60648201526084016102bb565b306001600160a01b0316816001600160a01b03166301df538d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190610af7565b6001600160a01b0316146107e55760405162461bcd60e51b815260206004820152602160248201527f42415345434f4e54524143542d4d4f44554c452d53455455502d494e56414c496044820152601160fa1b60648201526084016102bb565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b60008061082e836001600160a01b039081166000908152600360205260409020541690565b6001600160a01b03161415610844576000610847565b60015b92915050565b6000546001600160a01b031633146108775760405162461bcd60e51b81526004016102bb90610a7f565b6001600160a01b03811661089d5760405162461bcd60e51b81526004016102bb90610ab4565b6001600160a01b03166000908152600460205260409020805460ff19169055565b6000546001600160a01b031633146108e85760405162461bcd60e51b81526004016102bb90610a7f565b6001600160a01b03811661094d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bb565b61095681610959565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610a415760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016102bb565b919050565b6001600160a01b038116811461095657600080fd5b600060208284031215610a6d57600080fd5b8135610a7881610a46565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526023908201527f42415345434f4e54524143542d494e56414c49442d4d4f44554c452d4144445260408201526245535360e81b606082015260800190565b600060208284031215610b0957600080fd5b8151610a7881610a4656fea2646970667358221220ef61e284b2b75ccba2de002c31316cee8c04b4bc0c7f989012a89216d8c7558c64736f6c634300080a0033",
  "devdoc": {
    "details": "Smart contract to serve as the manager for the PrimeDeals architecture",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PrimeDeals Deal Manager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DealManager.sol:DealManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2776,
        "contract": "contracts/DealManager.sol:DealManager",
        "label": "daoDepositManagerImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2778,
        "contract": "contracts/DealManager.sol:DealManager",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2782,
        "contract": "contracts/DealManager.sol:DealManager",
        "label": "daoDepositManager",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2786,
        "contract": "contracts/DealManager.sol:DealManager",
        "label": "isModule",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}