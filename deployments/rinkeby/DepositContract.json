{
  "address": "0x2b3F04a519b20C29c4bca22Ad9543b7cED331fC9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "processID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "processID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vestingStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vestingEnd",
          "type": "uint256"
        }
      ],
      "name": "VestingStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "processID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "availableModuleBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseContract",
      "outputs": [
        {
          "internalType": "contract IBaseContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimVestings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_processID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "used",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_processID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getAvailableProcessBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_processID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_depositID",
          "type": "uint256"
        }
      ],
      "name": "getDeposit",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_processID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fromDepositID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toDepositID",
          "type": "uint256"
        }
      ],
      "name": "getDepositRange",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "senders",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "usedAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "times",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_module",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getProcessID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_processID",
          "type": "bytes32"
        }
      ],
      "name": "getTotalDepositCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getVestedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_processID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getWithdrawableAmountOfUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBaseContract",
          "type": "address"
        }
      ],
      "name": "migrateBaseContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_processID",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "multipleDeposits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_processID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "registerDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_processID",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "registerDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_processID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendToModule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "startVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "verifyBalance",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestings",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_processID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_depositID",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x57a00a1c60a2fbd0cb4b3a9c80a05bbf130a53123c647479f4acdd6034aca544",
  "receipt": {
    "to": null,
    "from": "0x9cA70B93CaE5576645F5F069524A9B9c3aef5006",
    "contractAddress": "0x2b3F04a519b20C29c4bca22Ad9543b7cED331fC9",
    "transactionIndex": 55,
    "gasUsed": "2743180",
    "logsBloom": "0x
    "blockHash": "0xd978130c84536732c3e276b297861d04c0b62e801b3b1ebc01cb5983cfe72ace",
    "transactionHash": "0x57a00a1c60a2fbd0cb4b3a9c80a05bbf130a53123c647479f4acdd6034aca544",
    "logs": [],
    "blockNumber": 9939509,
    "cumulativeGasUsed": "14469185",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ef94f2d2ae3f74c38ba485bdec7deb52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingEnd\",\"type\":\"uint256\"}],\"name\":\"VestingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"availableModuleBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseContract\",\"outputs\":[{\"internalType\":\"contract IBaseContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_processID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_processID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAvailableProcessBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_processID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_processID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fromDepositID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDepositID\",\"type\":\"uint256\"}],\"name\":\"getDepositRange\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"usedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"times\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_module\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getProcessID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_processID\",\"type\":\"bytes32\"}],\"name\":\"getTotalDepositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getVestedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_processID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getWithdrawableAmountOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBaseContract\",\"type\":\"address\"}],\"name\":\"migrateBaseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_processID\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multipleDeposits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_processID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"registerDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_processID\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"registerDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_processID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"startVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"verifyBalance\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_processID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DepositContract.sol\":\"DepositContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/DepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IBaseContract.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract DepositContract {\\n    address public dao;\\n    IBaseContract public baseContract;\\n\\n    mapping(address => uint256) public tokenBalances;\\n    mapping(address => mapping(bytes32 => uint256))\\n        public availableModuleBalances;\\n    mapping(address => uint256) public vestedBalances;\\n\\n    // Contains the module descriptor and the ID of the swap/action\\n    // so we can identify deposits for each individual interaction\\n    // e.g. keccak256(abi.encode(\\\"TOKEN_SWAP_MODULE\\\", 42));\\n    // for a deposit for a token swap with the id 42\\n    mapping(bytes32 => Deposit[]) public deposits;\\n\\n    Vesting[] public vestings;\\n\\n    struct Deposit {\\n        address sender;\\n        address token;\\n        uint256 amount;\\n        uint256 used;\\n        uint256 time;\\n    }\\n\\n    struct Vesting {\\n        address token;\\n        uint256 amount;\\n        uint256 sent;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    event Deposited(\\n        bytes32 processID,\\n        uint256 depositID,\\n        address token,\\n        uint256 amount,\\n        address sender\\n    );\\n\\n    event Withdrawn(\\n        bytes32 processID,\\n        uint256 depositID,\\n        address to,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    event VestingStarted(\\n        bytes32 processID,\\n        address token,\\n        uint256 amount,\\n        uint256 vestingStart,\\n        uint256 vestingEnd\\n    );\\n\\n    function initialize(address _dao) external {\\n        require(dao == address(0), \\\"D2D-DEPOSIT-ALREADY-INITIALIZED\\\");\\n        require(_dao != address(0), \\\"D2D-DEPOSIT-INVALID-DAO-ADDRESS\\\");\\n        dao = _dao;\\n        baseContract = IBaseContract(msg.sender);\\n    }\\n\\n    function migrateBaseContract(address _newBaseContract)\\n        external\\n        onlyBaseContract\\n    {\\n        baseContract = IBaseContract(_newBaseContract);\\n    }\\n\\n    function deposit(\\n        bytes32 _processID,\\n        address _token,\\n        uint256 _amount\\n    ) public payable {\\n        require(\\n            (_token != address(0) && _amount > 0) ||\\n                (_token == address(0) && msg.value > 0),\\n            \\\"D2D-DEPOSIT-INVALID-TOKEN-AMOUNT\\\"\\n        );\\n        if (_token != address(0)) {\\n            _transferTokenFrom(_token, msg.sender, address(this), _amount);\\n        } else {\\n            _amount = msg.value;\\n            _token = baseContract.weth();\\n            IWETH(_token).deposit{value: _amount}();\\n        }\\n\\n        tokenBalances[_token] += _amount;\\n        availableModuleBalances[_token][_processID] += _amount;\\n        verifyBalance(_token);\\n        // solhint-disable-next-line not-rely-on-time\\n        deposits[_processID].push(\\n            Deposit(msg.sender, _token, _amount, 0, block.timestamp)\\n        );\\n\\n        emit Deposited(\\n            _processID,\\n            deposits[_processID].length,\\n            _token,\\n            _amount,\\n            msg.sender\\n        );\\n    }\\n\\n    function multipleDeposits(\\n        bytes32 _processID,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _tokens.length == _amounts.length,\\n            \\\"D2D-DEPOSIT-ARRAY-LENGTH-MISMATCH\\\"\\n        );\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            deposit(_processID, _tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n    function registerDeposit(bytes32 _processID, address _token)\\n        public\\n        onlyAuthorized\\n    {\\n        uint256 currentBalance = 0;\\n        if (_token != address(0)) {\\n            currentBalance = IERC20(_token).balanceOf(address(this));\\n        } else {\\n            _token = baseContract.weth();\\n            currentBalance = address(this).balance;\\n        }\\n        if (currentBalance > tokenBalances[_token]) {\\n            uint256 amount = currentBalance - tokenBalances[_token];\\n            tokenBalances[_token] = currentBalance;\\n            if (_token == address(0)) {\\n                IWETH(_token).deposit{value: amount}();\\n            }\\n            availableModuleBalances[_token][_processID] += amount;\\n            deposits[_processID].push(\\n                Deposit(dao, _token, amount, 0, block.timestamp)\\n            );\\n            emit Deposited(\\n                _processID,\\n                deposits[_processID].length,\\n                _token,\\n                amount,\\n                dao\\n            );\\n        }\\n        verifyBalance(_token);\\n    }\\n\\n    function registerDeposits(bytes32 _processID, address[] calldata _tokens)\\n        external\\n    {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            registerDeposit(_processID, _tokens[i]);\\n        }\\n    }\\n\\n    function withdraw(bytes32 _processID, uint256 _depositID)\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        require(\\n            deposits[_processID].length >= _depositID,\\n            \\\"D2D-DEPOSIT-INVALID-DEPOSIT-ID\\\"\\n        );\\n        Deposit storage d = deposits[_processID][_depositID];\\n        // Either the caller did the deposit or it's a dao deposit\\n        // and the caller is the dao or a representative\\n        require(\\n            d.sender == msg.sender ||\\n                (d.sender == dao && baseContract.isDAOorOwner(msg.sender, dao)),\\n            \\\"D2D-WITHDRAW-NOT-AUTHORIZED\\\"\\n        );\\n\\n        uint256 freeAmount = d.amount - d.used;\\n        // Deposit can't be used by a module or withdrawn already\\n        require(freeAmount > 0, \\\"D2D-DEPOSIT-NOT-WITHDRAWABLE\\\");\\n        d.used = d.amount;\\n        availableModuleBalances[d.token][_processID] -= freeAmount;\\n        tokenBalances[d.token] -= freeAmount;\\n\\n        // If it's a token\\n        if (d.token != baseContract.weth()) {\\n            _transferToken(d.token, d.sender, freeAmount);\\n            // Else if it's Ether\\n        } else {\\n            IWETH(baseContract.weth()).withdraw(freeAmount);\\n            require(\\n                address(this).balance >= freeAmount,\\n                \\\"D2D-DEPOSIT-INVALID-AMOUNT\\\"\\n            );\\n            (bool sent, ) = d.sender.call{value: freeAmount}(\\\"\\\");\\n            require(sent, \\\"D2D-DEPOSIT-FAILED-TO-SEND-ETHER\\\");\\n        }\\n\\n        emit Withdrawn(_processID, _depositID, d.sender, d.token, freeAmount);\\n        return (d.sender, d.token, freeAmount);\\n    }\\n\\n    function sendToModule(\\n        bytes32 _processID,\\n        address _token,\\n        uint256 _amount\\n    ) external onlyModule returns (bool) {\\n        uint256 amountLeft = _amount;\\n        for (uint256 i = 0; i < deposits[_processID].length; i++) {\\n            if (deposits[_processID][i].token == _token) {\\n                uint256 freeAmount = deposits[_processID][i].amount -\\n                    deposits[_processID][i].used;\\n                if (freeAmount > amountLeft) {\\n                    freeAmount = amountLeft;\\n                }\\n                amountLeft -= freeAmount;\\n                deposits[_processID][i].used += freeAmount;\\n                if (amountLeft == 0) {\\n                    if (_token == address(0)) {\\n                        IWETH(baseContract.weth()).withdraw(_amount);\\n                        (bool sent, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n                        require(sent, \\\"D2D-DEPOSIT-FAILED-TO-SEND-ETHER\\\");\\n                    } else {\\n                        _transferToken(_token, msg.sender, _amount);\\n                        tokenBalances[_token] -= _amount;\\n                    }\\n                    availableModuleBalances[_token][_processID] -= _amount;\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function startVesting(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _start,\\n        uint256 _end\\n    ) external onlyModule {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _token != address(0),\\n            \\\"D2D-DEPOSIT-VESTING-INVALID-TOKEN-ADDRESS\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(_amount > 0, \\\"D2D-DEPOSIT-VESTING-INVALID-AMOUNT\\\");\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _start < _end,\\n            \\\"D2D-DEPOSIT-VESTING-INVALID-START-AND-END-TIMES\\\"\\n        );\\n\\n        _transferTokenFrom(_token, msg.sender, address(this), _amount);\\n        vestedBalances[_token] += _amount;\\n        vestings.push(Vesting(_token, _amount, 0, _start, _end));\\n    }\\n\\n    function claimVestings() external onlyAuthorized {\\n        for (uint256 i = 0; i < vestings.length; i++) {\\n            if (vestings[i].sent < vestings[i].amount) {\\n                if (block.timestamp < vestings[i].start) {\\n                    break;\\n                }\\n                uint256 amount = 0;\\n                if (block.timestamp >= vestings[i].end) {\\n                    amount = vestings[i].amount - vestings[i].sent;\\n                    vestings[i].sent = vestings[i].amount;\\n                } else {\\n                    uint256 fullDuration = vestings[i].end - vestings[i].start;\\n                    uint256 elapsed = vestings[i].end - block.timestamp;\\n                    amount = (vestings[i].amount * fullDuration) / elapsed;\\n                    vestings[i].sent += amount;\\n                }\\n                // solhint-disable-next-line reason-string\\n                require(\\n                    vestings[i].sent <= vestings[i].amount,\\n                    \\\"D2D-VESTING-CLAIM-AMOUNT-MISMATCH\\\"\\n                );\\n                vestedBalances[vestings[i].token] -= amount;\\n                if (vestings[i].token != baseContract.weth()) {\\n                    _transferToken(vestings[i].token, dao, amount);\\n                } else {\\n                    IWETH(baseContract.weth()).withdraw(amount);\\n                    (bool sent, ) = dao.call{value: amount}(\\\"\\\");\\n                    require(sent, \\\"D2D-DEPOSIT-FAILED-TO-SEND-ETHER\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function verifyBalance(address _token) public view {\\n        if (_token == address(0)) {\\n            _token = baseContract.weth();\\n        }\\n\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        require(\\n            balance >= tokenBalances[_token] + vestedBalances[_token],\\n            \\\"D2D-DEPOSIT-BALANCE-INVALID\\\"\\n        );\\n    }\\n\\n    function getDeposit(bytes32 _processID, uint256 _depositID)\\n        public\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        Deposit memory d = deposits[_processID][_depositID];\\n        return (\\n            d.sender,\\n            d.token == baseContract.weth() ? address(0) : d.token,\\n            d.amount,\\n            d.used,\\n            d.time\\n        );\\n    }\\n\\n    function getDepositRange(\\n        bytes32 _processID,\\n        uint256 _fromDepositID,\\n        uint256 _toDepositID\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory senders,\\n            address[] memory tokens,\\n            uint256[] memory amounts,\\n            uint256[] memory usedAmounts,\\n            uint256[] memory times\\n        )\\n    {\\n        uint256 range = 2 + _toDepositID - _fromDepositID; // inclusive range\\n        senders = new address[](range);\\n        tokens = new address[](range);\\n        amounts = new uint256[](range);\\n        usedAmounts = new uint256[](range);\\n        times = new uint256[](range);\\n        for (uint256 i = _toDepositID; i <= _fromDepositID; i++) {\\n            (\\n                senders[i],\\n                tokens[i],\\n                amounts[i],\\n                usedAmounts[i],\\n                times[i]\\n            ) = getDeposit(_processID, i);\\n        }\\n        return (senders, tokens, amounts, usedAmounts, times);\\n    }\\n\\n    function getAvailableProcessBalance(bytes32 _processID, address _token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return availableModuleBalances[_token][_processID];\\n    }\\n\\n    function getTotalDepositCount(bytes32 _processID)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return deposits[_processID].length;\\n    }\\n\\n    function getWithdrawableAmountOfUser(\\n        bytes32 _processID,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256) {\\n        uint256 freeAmount = 0;\\n        for (uint256 i = 0; i < deposits[_processID].length; i++) {\\n            if (\\n                deposits[_processID][i].sender == _user &&\\n                deposits[_processID][i].token == _token\\n            ) {\\n                freeAmount += (deposits[_processID][i].amount -\\n                    deposits[_processID][i].used);\\n            }\\n        }\\n        return freeAmount;\\n    }\\n\\n    function getBalance(address _token) external view returns (uint256) {\\n        if (_token == address(0)) {\\n            return address(this).balance;\\n        }\\n        return tokenBalances[_token];\\n    }\\n\\n    function getVestedBalance(address _token) external view returns (uint256) {\\n        return vestedBalances[_token];\\n    }\\n\\n    function getProcessID(string memory _module, uint256 _id)\\n        external\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(_module, _id));\\n    }\\n\\n    function _transferToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            IERC20(_token).transfer(_to, _amount),\\n            \\\"D2D-TOKEN-TRANSFER-FAILED\\\"\\n        );\\n    }\\n\\n    function _transferTokenFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            IERC20(_token).transferFrom(_from, _to, _amount),\\n            \\\"D2D-TOKEN-TRANSFER-FAILED\\\"\\n        );\\n    }\\n\\n    modifier onlyBaseContract() {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            msg.sender == address(baseContract),\\n            \\\"D2D-DEPOSIT-ONLY-BASE-CONTRACT-CAN-ACCESS\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(\\n            baseContract.isDAOorOwner(msg.sender, dao),\\n            \\\"D2D-NOT-AUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyModule() {\\n        require(baseContract.addressIsModule(msg.sender), \\\"D2D-NOT-MODULE\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0eee1afb8af7298b66037a1e124ab48b5a7d12c4ae98b2fa53ec53fefa1037b7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBaseContract.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IBaseContract {\\n    function createDepositContract(address _dao) external;\\n\\n    function hasDepositContract(address _dao) external view returns (bool);\\n\\n    function getDepositContract(address _dao) external view returns (address);\\n\\n    function isDAOorOwner(address _caller, address _dao)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isDAOorOwnerFromArray(\\n        address _caller,\\n        address[] calldata _involvedDAOs\\n    ) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function addressIsModule(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb562c8ee351e1db4ab656a3f5ac7bcf53191c3d0de7e2a27009083b76f85522d\",\"license\":\"Unlicense\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x5c3235d86b4ad50863096bdb860ebee226c6fedca70712e95c5cd6005096a5a1\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506130ab806100206000396000f3fe6080604052600436106101815760003560e01c8063821bee73116100d1578063cb3fdb611161008a578063deb2f87d11610064578063deb2f87d1461055f578063e1b32e6e1461057f578063eba3b7ae146105af578063f8b2cb4f146105cf57600080fd5b8063cb3fdb61146104ff578063cd862c3c1461052c578063d954863c1461054c57600080fd5b8063821bee73146103cd578063836d21b51461041f5780638a39f96014610434578063a00ddad114610487578063a93690aa146104a7578063c4d66de8146104df57600080fd5b80634162169f1161013e578063616c399011610118578063616c39901461032a5780636e5c8d1a1461034a578063705e00611461036a5780637f58b9d31461039757600080fd5b80634162169f146102a5578063523fba7f146102dd5780635b32619c1461030a57600080fd5b8063040cf0201461018657806319d50a65146101d15780631beaae8714610202578063205bdd6f1461021757806332296e0b146102455780633d2c0c0714610285575b600080fd5b34801561019257600080fd5b506101a66101a1366004612a6c565b6105ef565b604080516001600160a01b039485168152939092166020840152908201526060015b60405180910390f35b3480156101dd57600080fd5b506101f16101ec366004612a8e565b610b1b565b6040516101c8959493929190612b2e565b610215610210366004612be7565b610d63565b005b34801561022357600080fd5b50610237610232366004612c76565b610e2a565b6040519081526020016101c8565b34801561025157600080fd5b50610237610260366004612cb8565b6001600160a01b03166000908152600360209081526040808320938352929052205490565b34801561029157600080fd5b506102376102a0366004612cfe565b610f7f565b3480156102b157600080fd5b506000546102c5906001600160a01b031681565b6040516001600160a01b0390911681526020016101c8565b3480156102e957600080fd5b506102376102f8366004612db3565b60026020526000908152604090205481565b34801561031657600080fd5b506001546102c5906001600160a01b031681565b34801561033657600080fd5b50610215610345366004612db3565b610fb2565b34801561035657600080fd5b50610215610365366004612dd0565b611040565b34801561037657600080fd5b50610237610385366004612e0b565b60009081526005602052604090205490565b3480156103a357600080fd5b506102376103b2366004612db3565b6001600160a01b031660009081526004602052604090205490565b3480156103d957600080fd5b506103ed6103e8366004612e0b565b611365565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a0016101c8565b34801561042b57600080fd5b506102156113b0565b34801561044057600080fd5b5061045461044f366004612a6c565b611a10565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a0016101c8565b34801561049357600080fd5b506102156104a2366004612db3565b611a6b565b3480156104b357600080fd5b506102376104c2366004612e24565b600360209081526000928352604080842090915290825290205481565b3480156104eb57600080fd5b506102156104fa366004612db3565b611be2565b34801561050b57600080fd5b5061023761051a366004612db3565b60046020526000908152604090205481565b34801561053857600080fd5b50610215610547366004612e50565b611cbc565b61021561055a366004612e9c565b611d0a565b34801561056b57600080fd5b5061045461057a366004612a6c565b611fed565b34801561058b57600080fd5b5061059f61059a366004612e9c565b61211b565b60405190151581526020016101c8565b3480156105bb57600080fd5b506102156105ca366004612cb8565b6124f6565b3480156105db57600080fd5b506102376105ea366004612db3565b6128bb565b600082815260056020526040812054819081908411156106565760405162461bcd60e51b815260206004820152601e60248201527f4432442d4445504f5349542d494e56414c49442d4445504f5349542d4944000060448201526064015b60405180910390fd5b600085815260056020526040812080548690811061067657610676612ed4565b6000918252602090912060059091020180549091506001600160a01b031633148061072c575060005481546001600160a01b03908116911614801561072c5750600154600054604051635f6d73c160e11b81523360048201526001600160a01b03918216602482015291169063bedae78290604401602060405180830381865afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c9190612eea565b6107785760405162461bcd60e51b815260206004820152601b60248201527f4432442d57495448445241572d4e4f542d415554484f52495a45440000000000604482015260640161064d565b60008160030154826002015461078e9190612f22565b9050600081116107e05760405162461bcd60e51b815260206004820152601c60248201527f4432442d4445504f5349542d4e4f542d574954484452415741424c4500000000604482015260640161064d565b600282015460038084019190915560018301546001600160a01b03166000908152602091825260408082208a83529092529081208054839290610824908490612f22565b909155505060018201546001600160a01b031660009081526002602052604081208054839290610855908490612f22565b909155505060015460408051633fc8cef360e01b815290516001600160a01b0390921691633fc8cef3916004808201926020929091908290030181865afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c89190612f39565b60018301546001600160a01b0390811691161461090257600182015482546108fd916001600160a01b039081169116836128ee565b610a9c565b600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610955573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109799190612f39565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b81526004016109a691815260200190565b600060405180830381600087803b1580156109c057600080fd5b505af11580156109d4573d6000803e3d6000fd5b5050505080471015610a285760405162461bcd60e51b815260206004820152601a60248201527f4432442d4445504f5349542d494e56414c49442d414d4f554e54000000000000604482015260640161064d565b81546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610a74576040519150601f19603f3d011682016040523d82523d6000602084013e610a79565b606091505b5050905080610a9a5760405162461bcd60e51b815260040161064d90612f56565b505b81546001830154604080518a8152602081018a90526001600160a01b039384168183015292909116606083015260808201839052517f0495fa8ede9c64daa55c15439a9738cd0d911677b08efd59e801596eef644dba9181900360a00190a181546001909201546001600160a01b039283169892169650945092505050565b606080808080600087610b2f886002612f8b565b610b399190612f22565b90508067ffffffffffffffff811115610b5457610b54612ce8565b604051908082528060200260200182016040528015610b7d578160200160208202803683370190505b5095508067ffffffffffffffff811115610b9957610b99612ce8565b604051908082528060200260200182016040528015610bc2578160200160208202803683370190505b5094508067ffffffffffffffff811115610bde57610bde612ce8565b604051908082528060200260200182016040528015610c07578160200160208202803683370190505b5093508067ffffffffffffffff811115610c2357610c23612ce8565b604051908082528060200260200182016040528015610c4c578160200160208202803683370190505b5092508067ffffffffffffffff811115610c6857610c68612ce8565b604051908082528060200260200182016040528015610c91578160200160208202803683370190505b509150865b888111610d5657610ca78a82611fed565b8b8681518110610cb957610cb9612ed4565b602002602001018b8781518110610cd257610cd2612ed4565b602002602001018b8881518110610ceb57610ceb612ed4565b602002602001018b8981518110610d0457610d04612ed4565b602002602001018b8a81518110610d1d57610d1d612ed4565b602090810291909101019490945293909252929091526001600160a01b0392831690529116905280610d4e81612fa3565b915050610c96565b5050939792965093509350565b828114610dbc5760405162461bcd60e51b815260206004820152602160248201527f4432442d4445504f5349542d41525241592d4c454e4754482d4d49534d4154436044820152600960fb1b606482015260840161064d565b60005b83811015610e2257610e1086868684818110610ddd57610ddd612ed4565b9050602002016020810190610df29190612db3565b858585818110610e0457610e04612ed4565b90506020020135611d0a565b80610e1a81612fa3565b915050610dbf565b505050505050565b600080805b600086815260056020526040902054811015610f7457600086815260056020526040902080546001600160a01b038716919083908110610e7157610e71612ed4565b60009182526020909120600590910201546001600160a01b0316148015610ede5750600086815260056020526040902080546001600160a01b038616919083908110610ebf57610ebf612ed4565b60009182526020909120600160059092020101546001600160a01b0316145b15610f62576000868152600560205260409020805482908110610f0357610f03612ed4565b906000526020600020906005020160030154600560008881526020019081526020016000208281548110610f3957610f39612ed4565b906000526020600020906005020160020154610f559190612f22565b610f5f9083612f8b565b91505b80610f6c81612fa3565b915050610e2f565b5090505b9392505050565b60008282604051602001610f94929190612fbe565b60405160208183030381529060405280519060200120905092915050565b6001546001600160a01b0316331461101e5760405162461bcd60e51b815260206004820152602960248201527f4432442d4445504f5349542d4f4e4c592d424153452d434f4e54524143542d43604482015268414e2d41434345535360b81b606482015260840161064d565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600154604051631b5fc51160e01b81523360048201526001600160a01b0390911690631b5fc51190602401602060405180830381865afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac9190612eea565b6110e95760405162461bcd60e51b815260206004820152600e60248201526d4432442d4e4f542d4d4f44554c4560901b604482015260640161064d565b6001600160a01b0384166111515760405162461bcd60e51b815260206004820152602960248201527f4432442d4445504f5349542d56455354494e472d494e56414c49442d544f4b456044820152684e2d4144445245535360b81b606482015260840161064d565b600083116111ac5760405162461bcd60e51b815260206004820152602260248201527f4432442d4445504f5349542d56455354494e472d494e56414c49442d414d4f55604482015261139560f21b606482015260840161064d565b8082106112135760405162461bcd60e51b815260206004820152602f60248201527f4432442d4445504f5349542d56455354494e472d494e56414c49442d5354415260448201526e542d414e442d454e442d54494d455360881b606482015260840161064d565b61121f843330866129a9565b6001600160a01b03841660009081526004602052604081208054859290611247908490612f8b565b90915550506040805160a0810182526001600160a01b039586168152602081019485526000918101828152606082019485526080820193845260068054600181018255935290517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600590930292830180546001600160a01b031916919097161790955592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4084015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41830155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4282015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4390910155565b6006818154811061137557600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909185565b600154600054604051635f6d73c160e11b81523360048201526001600160a01b03918216602482015291169063bedae78290604401602060405180830381865afa158015611402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114269190612eea565b6114675760405162461bcd60e51b8152602060048201526012602482015271110c910b5393d50b5055551213d49256915160721b604482015260640161064d565b60005b600654811015611a0d576006818154811061148757611487612ed4565b906000526020600020906005020160010154600682815481106114ac576114ac612ed4565b90600052602060002090600502016002015410156119fb57600681815481106114d7576114d7612ed4565b9060005260206000209060050201600301544210156114f35750565b60006006828154811061150857611508612ed4565b90600052602060002090600502016004015442106115c8576006828154811061153357611533612ed4565b9060005260206000209060050201600201546006838154811061155857611558612ed4565b9060005260206000209060050201600101546115749190612f22565b90506006828154811061158957611589612ed4565b906000526020600020906005020160010154600683815481106115ae576115ae612ed4565b9060005260206000209060050201600201819055506116cd565b6000600683815481106115dd576115dd612ed4565b9060005260206000209060050201600301546006848154811061160257611602612ed4565b90600052602060002090600502016004015461161e9190612f22565b90506000426006858154811061163657611636612ed4565b9060005260206000209060050201600401546116529190612f22565b905080826006868154811061166957611669612ed4565b906000526020600020906005020160010154611685919061301b565b61168f919061303a565b925082600685815481106116a5576116a5612ed4565b906000526020600020906005020160020160008282546116c59190612f8b565b909155505050505b600682815481106116e0576116e0612ed4565b9060005260206000209060050201600101546006838154811061170557611705612ed4565b906000526020600020906005020160020154111561176f5760405162461bcd60e51b815260206004820152602160248201527f4432442d56455354494e472d434c41494d2d414d4f554e542d4d49534d4154436044820152600960fb1b606482015260840161064d565b80600460006006858154811061178757611787612ed4565b600091825260208083206005909202909101546001600160a01b03168352820192909252604001812080549091906117c0908490612f22565b909155505060015460408051633fc8cef360e01b815290516001600160a01b0390921691633fc8cef3916004808201926020929091908290030181865afa15801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190612f39565b6001600160a01b03166006838154811061184f5761184f612ed4565b60009182526020909120600590910201546001600160a01b0316146118ae576118a96006838154811061188457611884612ed4565b6000918252602082206005909102015490546001600160a01b039182169116836128ee565b6119f9565b600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119259190612f39565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040161195291815260200190565b600060405180830381600087803b15801561196c57600080fd5b505af1158015611980573d6000803e3d6000fd5b5050600080546040519193506001600160a01b0316915083908381818185875af1925050503d80600081146119d1576040519150601f19603f3d011682016040523d82523d6000602084013e6119d6565b606091505b50509050806119f75760405162461bcd60e51b815260040161064d90612f56565b505b505b80611a0581612fa3565b91505061146a565b50565b60056020528160005260406000208181548110611a2c57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039384169650929091169350919085565b6001600160a01b038116611af357600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af09190612f39565b90505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5e919061305c565b6001600160a01b038316600090815260046020908152604080832054600290925290912054919250611b8f91612f8b565b811015611bde5760405162461bcd60e51b815260206004820152601b60248201527f4432442d4445504f5349542d42414c414e43452d494e56414c49440000000000604482015260640161064d565b5050565b6000546001600160a01b031615611c3b5760405162461bcd60e51b815260206004820152601f60248201527f4432442d4445504f5349542d414c52454144592d494e495449414c495a454400604482015260640161064d565b6001600160a01b038116611c915760405162461bcd60e51b815260206004820152601f60248201527f4432442d4445504f5349542d494e56414c49442d44414f2d4144445245535300604482015260640161064d565b600080546001600160a01b039092166001600160a01b03199283161790556001805490911633179055565b60005b81811015611d0457611cf284848484818110611cdd57611cdd612ed4565b90506020020160208101906105ca9190612db3565b80611cfc81612fa3565b915050611cbf565b50505050565b6001600160a01b03821615801590611d225750600081115b80611d3f57506001600160a01b038216158015611d3f5750600034115b611d8b5760405162461bcd60e51b815260206004820181905260248201527f4432442d4445504f5349542d494e56414c49442d544f4b454e2d414d4f554e54604482015260640161064d565b6001600160a01b03821615611dab57611da6823330846129a9565b611e70565b5060015460408051633fc8cef360e01b8152905134926001600160a01b031691633fc8cef39160048083019260209291908290030181865afa158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190612f39565b9150816001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e5657600080fd5b505af1158015611e6a573d6000803e3d6000fd5b50505050505b6001600160a01b03821660009081526002602052604081208054839290611e98908490612f8b565b90915550506001600160a01b038216600090815260036020908152604080832086845290915281208054839290611ed0908490612f8b565b90915550611edf905082611a6b565b6000838152600560208181526040808420815160a081018352338082526001600160a01b038981168387019081528386018a8152606085018a81524260808701908152875460018181018a55898e528b8e209851918d0290980180549187166001600160a01b031992831617815594519785018054989096169716969096179093555160028201559051600382015591516004909201919091559488905292909152905490517f1d95434bb9e08b232f54a62aa6512b40e5aaf83565f680797563764d6e9c030d92611fe09287929091879187919094855260208501939093526001600160a01b039182166040850152606084015216608082015260a00190565b60405180910390a1505050565b60008060008060008060056000898152602001908152602001600020878154811061201a5761201a612ed4565b60009182526020918290206040805160a081018252600590930290910180546001600160a01b03908116808552600180840154831686880152600284015486860152600384015460608701526004938401546080870152548451633fc8cef360e01b815294519597509095911693633fc8cef39380840193908290030181865afa1580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d09190612f39565b6001600160a01b031682602001516001600160a01b0316146120f65781602001516120f9565b60005b60408301516060840151608090940151929b919a509850919650945092505050565b600154604051631b5fc51160e01b81523360048201526000916001600160a01b031690631b5fc51190602401602060405180830381865afa158015612164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121889190612eea565b6121c55760405162461bcd60e51b815260206004820152600e60248201526d4432442d4e4f542d4d4f44554c4560901b604482015260640161064d565b8160005b6000868152600560205260409020548110156124ea57600086815260056020526040902080546001600160a01b03871691908390811061220b5761220b612ed4565b60009182526020909120600160059092020101546001600160a01b031614156124d857600086815260056020526040812080548390811061224e5761224e612ed4565b90600052602060002090600502016003015460056000898152602001908152602001600020838154811061228457612284612ed4565b9060005260206000209060050201600201546122a09190612f22565b9050828111156122ad5750815b6122b78184612f22565b600088815260056020526040902080549194508291849081106122dc576122dc612ed4565b906000526020600020906005020160030160008282546122fc9190612f8b565b9091555050826124d6576001600160a01b03861661245857600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238b9190612f39565b6001600160a01b0316632e1a7d4d866040518263ffffffff1660e01b81526004016123b891815260200190565b600060405180830381600087803b1580156123d257600080fd5b505af11580156123e6573d6000803e3d6000fd5b50506040516000925033915087908381818185875af1925050503d806000811461242c576040519150601f19603f3d011682016040523d82523d6000602084013e612431565b606091505b50509050806124525760405162461bcd60e51b815260040161064d90612f56565b50612491565b6124638633876128ee565b6001600160a01b0386166000908152600260205260408120805487929061248b908490612f22565b90915550505b6001600160a01b03861660009081526003602090815260408083208a8452909152812080548792906124c4908490612f22565b9091555060019450610f789350505050565b505b806124e281612fa3565b9150506121c9565b50600095945050505050565b600154600054604051635f6d73c160e11b81523360048201526001600160a01b03918216602482015291169063bedae78290604401602060405180830381865afa158015612548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256c9190612eea565b6125ad5760405162461bcd60e51b8152602060048201526012602482015271110c910b5393d50b5055551213d49256915160721b604482015260640161064d565b60006001600160a01b0382161561262d576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015612602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612626919061305c565b90506126aa565b600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a49190612f39565b91504790505b6001600160a01b0382166000908152600260205260409020548111156128ad576001600160a01b0382166000908152600260205260408120546126ed9083612f22565b6001600160a01b038416600081815260026020526040902084905590915061276457826001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561274a57600080fd5b505af115801561275e573d6000803e3d6000fd5b50505050505b6001600160a01b038316600090815260036020908152604080832087845290915281208054839290612797908490612f8b565b90915550506000848152600560208181526040808420815160a08101835285546001600160a01b039081168252898116828601908152828501898152606084018981524260808601908152865460018181018955888d528a8d209751918c0290970180549187166001600160a01b0319928316178155945196850180549787169790911696909617909555905160028301555160038201559151600490920191909155898652939092529054925490517f1d95434bb9e08b232f54a62aa6512b40e5aaf83565f680797563764d6e9c030d936128a3938993919289928892169094855260208501939093526001600160a01b039182166040850152606084015216608082015260a00190565b60405180910390a1505b6128b682611a6b565b505050565b60006001600160a01b0382166128d2575047919050565b506001600160a01b031660009081526002602052604090205490565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561293d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129619190612eea565b6128b65760405162461bcd60e51b8152602060048201526019602482015278110c910b5513d2d1538b5514905394d191548b519052531151603a1b604482015260640161064d565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd906064016020604051808303816000875af1158015612a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a249190612eea565b611d045760405162461bcd60e51b8152602060048201526019602482015278110c910b5513d2d1538b5514905394d191548b519052531151603a1b604482015260640161064d565b60008060408385031215612a7f57600080fd5b50508035926020909101359150565b600080600060608486031215612aa357600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b83811015612af35781516001600160a01b031687529582019590820190600101612ace565b509495945050505050565b600081518084526020808501945080840160005b83811015612af357815187529582019590820190600101612b12565b60a081526000612b4160a0830188612aba565b8281036020840152612b538188612aba565b90508281036040840152612b678187612afe565b90508281036060840152612b7b8186612afe565b90508281036080840152612b8f8185612afe565b98975050505050505050565b60008083601f840112612bad57600080fd5b50813567ffffffffffffffff811115612bc557600080fd5b6020830191508360208260051b8501011115612be057600080fd5b9250929050565b600080600080600060608688031215612bff57600080fd5b85359450602086013567ffffffffffffffff80821115612c1e57600080fd5b612c2a89838a01612b9b565b90965094506040880135915080821115612c4357600080fd5b50612c5088828901612b9b565b969995985093965092949392505050565b6001600160a01b0381168114611a0d57600080fd5b600080600060608486031215612c8b57600080fd5b833592506020840135612c9d81612c61565b91506040840135612cad81612c61565b809150509250925092565b60008060408385031215612ccb57600080fd5b823591506020830135612cdd81612c61565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612d1157600080fd5b823567ffffffffffffffff80821115612d2957600080fd5b818501915085601f830112612d3d57600080fd5b813581811115612d4f57612d4f612ce8565b604051601f8201601f19908116603f01168101908382118183101715612d7757612d77612ce8565b81604052828152886020848701011115612d9057600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b600060208284031215612dc557600080fd5b8135610f7881612c61565b60008060008060808587031215612de657600080fd5b8435612df181612c61565b966020860135965060408601359560600135945092505050565b600060208284031215612e1d57600080fd5b5035919050565b60008060408385031215612e3757600080fd5b8235612e4281612c61565b946020939093013593505050565b600080600060408486031215612e6557600080fd5b83359250602084013567ffffffffffffffff811115612e8357600080fd5b612e8f86828701612b9b565b9497909650939450505050565b600080600060608486031215612eb157600080fd5b833592506020840135612ec381612c61565b929592945050506040919091013590565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612efc57600080fd5b81518015158114610f7857600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015612f3457612f34612f0c565b500390565b600060208284031215612f4b57600080fd5b8151610f7881612c61565b6020808252818101527f4432442d4445504f5349542d4641494c45442d544f2d53454e442d4554484552604082015260600190565b60008219821115612f9e57612f9e612f0c565b500190565b6000600019821415612fb757612fb7612f0c565b5060010190565b604081526000835180604084015260005b81811015612fec5760208187018101516060868401015201612fcf565b81811115612ffe576000606083860101525b50602083019390935250601f91909101601f191601606001919050565b600081600019048311821515161561303557613035612f0c565b500290565b60008261305757634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561306e57600080fd5b505191905056fea264697066735822122004d1470d3a8cd7d99afe7f17911e7489959e97cd30fb0ea9f813c31de217ada864736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c8063821bee73116100d1578063cb3fdb611161008a578063deb2f87d11610064578063deb2f87d1461055f578063e1b32e6e1461057f578063eba3b7ae146105af578063f8b2cb4f146105cf57600080fd5b8063cb3fdb61146104ff578063cd862c3c1461052c578063d954863c1461054c57600080fd5b8063821bee73146103cd578063836d21b51461041f5780638a39f96014610434578063a00ddad114610487578063a93690aa146104a7578063c4d66de8146104df57600080fd5b80634162169f1161013e578063616c399011610118578063616c39901461032a5780636e5c8d1a1461034a578063705e00611461036a5780637f58b9d31461039757600080fd5b80634162169f146102a5578063523fba7f146102dd5780635b32619c1461030a57600080fd5b8063040cf0201461018657806319d50a65146101d15780631beaae8714610202578063205bdd6f1461021757806332296e0b146102455780633d2c0c0714610285575b600080fd5b34801561019257600080fd5b506101a66101a1366004612a6c565b6105ef565b604080516001600160a01b039485168152939092166020840152908201526060015b60405180910390f35b3480156101dd57600080fd5b506101f16101ec366004612a8e565b610b1b565b6040516101c8959493929190612b2e565b610215610210366004612be7565b610d63565b005b34801561022357600080fd5b50610237610232366004612c76565b610e2a565b6040519081526020016101c8565b34801561025157600080fd5b50610237610260366004612cb8565b6001600160a01b03166000908152600360209081526040808320938352929052205490565b34801561029157600080fd5b506102376102a0366004612cfe565b610f7f565b3480156102b157600080fd5b506000546102c5906001600160a01b031681565b6040516001600160a01b0390911681526020016101c8565b3480156102e957600080fd5b506102376102f8366004612db3565b60026020526000908152604090205481565b34801561031657600080fd5b506001546102c5906001600160a01b031681565b34801561033657600080fd5b50610215610345366004612db3565b610fb2565b34801561035657600080fd5b50610215610365366004612dd0565b611040565b34801561037657600080fd5b50610237610385366004612e0b565b60009081526005602052604090205490565b3480156103a357600080fd5b506102376103b2366004612db3565b6001600160a01b031660009081526004602052604090205490565b3480156103d957600080fd5b506103ed6103e8366004612e0b565b611365565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a0016101c8565b34801561042b57600080fd5b506102156113b0565b34801561044057600080fd5b5061045461044f366004612a6c565b611a10565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a0016101c8565b34801561049357600080fd5b506102156104a2366004612db3565b611a6b565b3480156104b357600080fd5b506102376104c2366004612e24565b600360209081526000928352604080842090915290825290205481565b3480156104eb57600080fd5b506102156104fa366004612db3565b611be2565b34801561050b57600080fd5b5061023761051a366004612db3565b60046020526000908152604090205481565b34801561053857600080fd5b50610215610547366004612e50565b611cbc565b61021561055a366004612e9c565b611d0a565b34801561056b57600080fd5b5061045461057a366004612a6c565b611fed565b34801561058b57600080fd5b5061059f61059a366004612e9c565b61211b565b60405190151581526020016101c8565b3480156105bb57600080fd5b506102156105ca366004612cb8565b6124f6565b3480156105db57600080fd5b506102376105ea366004612db3565b6128bb565b600082815260056020526040812054819081908411156106565760405162461bcd60e51b815260206004820152601e60248201527f4432442d4445504f5349542d494e56414c49442d4445504f5349542d4944000060448201526064015b60405180910390fd5b600085815260056020526040812080548690811061067657610676612ed4565b6000918252602090912060059091020180549091506001600160a01b031633148061072c575060005481546001600160a01b03908116911614801561072c5750600154600054604051635f6d73c160e11b81523360048201526001600160a01b03918216602482015291169063bedae78290604401602060405180830381865afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c9190612eea565b6107785760405162461bcd60e51b815260206004820152601b60248201527f4432442d57495448445241572d4e4f542d415554484f52495a45440000000000604482015260640161064d565b60008160030154826002015461078e9190612f22565b9050600081116107e05760405162461bcd60e51b815260206004820152601c60248201527f4432442d4445504f5349542d4e4f542d574954484452415741424c4500000000604482015260640161064d565b600282015460038084019190915560018301546001600160a01b03166000908152602091825260408082208a83529092529081208054839290610824908490612f22565b909155505060018201546001600160a01b031660009081526002602052604081208054839290610855908490612f22565b909155505060015460408051633fc8cef360e01b815290516001600160a01b0390921691633fc8cef3916004808201926020929091908290030181865afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c89190612f39565b60018301546001600160a01b0390811691161461090257600182015482546108fd916001600160a01b039081169116836128ee565b610a9c565b600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610955573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109799190612f39565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b81526004016109a691815260200190565b600060405180830381600087803b1580156109c057600080fd5b505af11580156109d4573d6000803e3d6000fd5b5050505080471015610a285760405162461bcd60e51b815260206004820152601a60248201527f4432442d4445504f5349542d494e56414c49442d414d4f554e54000000000000604482015260640161064d565b81546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610a74576040519150601f19603f3d011682016040523d82523d6000602084013e610a79565b606091505b5050905080610a9a5760405162461bcd60e51b815260040161064d90612f56565b505b81546001830154604080518a8152602081018a90526001600160a01b039384168183015292909116606083015260808201839052517f0495fa8ede9c64daa55c15439a9738cd0d911677b08efd59e801596eef644dba9181900360a00190a181546001909201546001600160a01b039283169892169650945092505050565b606080808080600087610b2f886002612f8b565b610b399190612f22565b90508067ffffffffffffffff811115610b5457610b54612ce8565b604051908082528060200260200182016040528015610b7d578160200160208202803683370190505b5095508067ffffffffffffffff811115610b9957610b99612ce8565b604051908082528060200260200182016040528015610bc2578160200160208202803683370190505b5094508067ffffffffffffffff811115610bde57610bde612ce8565b604051908082528060200260200182016040528015610c07578160200160208202803683370190505b5093508067ffffffffffffffff811115610c2357610c23612ce8565b604051908082528060200260200182016040528015610c4c578160200160208202803683370190505b5092508067ffffffffffffffff811115610c6857610c68612ce8565b604051908082528060200260200182016040528015610c91578160200160208202803683370190505b509150865b888111610d5657610ca78a82611fed565b8b8681518110610cb957610cb9612ed4565b602002602001018b8781518110610cd257610cd2612ed4565b602002602001018b8881518110610ceb57610ceb612ed4565b602002602001018b8981518110610d0457610d04612ed4565b602002602001018b8a81518110610d1d57610d1d612ed4565b602090810291909101019490945293909252929091526001600160a01b0392831690529116905280610d4e81612fa3565b915050610c96565b5050939792965093509350565b828114610dbc5760405162461bcd60e51b815260206004820152602160248201527f4432442d4445504f5349542d41525241592d4c454e4754482d4d49534d4154436044820152600960fb1b606482015260840161064d565b60005b83811015610e2257610e1086868684818110610ddd57610ddd612ed4565b9050602002016020810190610df29190612db3565b858585818110610e0457610e04612ed4565b90506020020135611d0a565b80610e1a81612fa3565b915050610dbf565b505050505050565b600080805b600086815260056020526040902054811015610f7457600086815260056020526040902080546001600160a01b038716919083908110610e7157610e71612ed4565b60009182526020909120600590910201546001600160a01b0316148015610ede5750600086815260056020526040902080546001600160a01b038616919083908110610ebf57610ebf612ed4565b60009182526020909120600160059092020101546001600160a01b0316145b15610f62576000868152600560205260409020805482908110610f0357610f03612ed4565b906000526020600020906005020160030154600560008881526020019081526020016000208281548110610f3957610f39612ed4565b906000526020600020906005020160020154610f559190612f22565b610f5f9083612f8b565b91505b80610f6c81612fa3565b915050610e2f565b5090505b9392505050565b60008282604051602001610f94929190612fbe565b60405160208183030381529060405280519060200120905092915050565b6001546001600160a01b0316331461101e5760405162461bcd60e51b815260206004820152602960248201527f4432442d4445504f5349542d4f4e4c592d424153452d434f4e54524143542d43604482015268414e2d41434345535360b81b606482015260840161064d565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600154604051631b5fc51160e01b81523360048201526001600160a01b0390911690631b5fc51190602401602060405180830381865afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac9190612eea565b6110e95760405162461bcd60e51b815260206004820152600e60248201526d4432442d4e4f542d4d4f44554c4560901b604482015260640161064d565b6001600160a01b0384166111515760405162461bcd60e51b815260206004820152602960248201527f4432442d4445504f5349542d56455354494e472d494e56414c49442d544f4b456044820152684e2d4144445245535360b81b606482015260840161064d565b600083116111ac5760405162461bcd60e51b815260206004820152602260248201527f4432442d4445504f5349542d56455354494e472d494e56414c49442d414d4f55604482015261139560f21b606482015260840161064d565b8082106112135760405162461bcd60e51b815260206004820152602f60248201527f4432442d4445504f5349542d56455354494e472d494e56414c49442d5354415260448201526e542d414e442d454e442d54494d455360881b606482015260840161064d565b61121f843330866129a9565b6001600160a01b03841660009081526004602052604081208054859290611247908490612f8b565b90915550506040805160a0810182526001600160a01b039586168152602081019485526000918101828152606082019485526080820193845260068054600181018255935290517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600590930292830180546001600160a01b031916919097161790955592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4084015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41830155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4282015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4390910155565b6006818154811061137557600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909185565b600154600054604051635f6d73c160e11b81523360048201526001600160a01b03918216602482015291169063bedae78290604401602060405180830381865afa158015611402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114269190612eea565b6114675760405162461bcd60e51b8152602060048201526012602482015271110c910b5393d50b5055551213d49256915160721b604482015260640161064d565b60005b600654811015611a0d576006818154811061148757611487612ed4565b906000526020600020906005020160010154600682815481106114ac576114ac612ed4565b90600052602060002090600502016002015410156119fb57600681815481106114d7576114d7612ed4565b9060005260206000209060050201600301544210156114f35750565b60006006828154811061150857611508612ed4565b90600052602060002090600502016004015442106115c8576006828154811061153357611533612ed4565b9060005260206000209060050201600201546006838154811061155857611558612ed4565b9060005260206000209060050201600101546115749190612f22565b90506006828154811061158957611589612ed4565b906000526020600020906005020160010154600683815481106115ae576115ae612ed4565b9060005260206000209060050201600201819055506116cd565b6000600683815481106115dd576115dd612ed4565b9060005260206000209060050201600301546006848154811061160257611602612ed4565b90600052602060002090600502016004015461161e9190612f22565b90506000426006858154811061163657611636612ed4565b9060005260206000209060050201600401546116529190612f22565b905080826006868154811061166957611669612ed4565b906000526020600020906005020160010154611685919061301b565b61168f919061303a565b925082600685815481106116a5576116a5612ed4565b906000526020600020906005020160020160008282546116c59190612f8b565b909155505050505b600682815481106116e0576116e0612ed4565b9060005260206000209060050201600101546006838154811061170557611705612ed4565b906000526020600020906005020160020154111561176f5760405162461bcd60e51b815260206004820152602160248201527f4432442d56455354494e472d434c41494d2d414d4f554e542d4d49534d4154436044820152600960fb1b606482015260840161064d565b80600460006006858154811061178757611787612ed4565b600091825260208083206005909202909101546001600160a01b03168352820192909252604001812080549091906117c0908490612f22565b909155505060015460408051633fc8cef360e01b815290516001600160a01b0390921691633fc8cef3916004808201926020929091908290030181865afa15801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190612f39565b6001600160a01b03166006838154811061184f5761184f612ed4565b60009182526020909120600590910201546001600160a01b0316146118ae576118a96006838154811061188457611884612ed4565b6000918252602082206005909102015490546001600160a01b039182169116836128ee565b6119f9565b600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119259190612f39565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040161195291815260200190565b600060405180830381600087803b15801561196c57600080fd5b505af1158015611980573d6000803e3d6000fd5b5050600080546040519193506001600160a01b0316915083908381818185875af1925050503d80600081146119d1576040519150601f19603f3d011682016040523d82523d6000602084013e6119d6565b606091505b50509050806119f75760405162461bcd60e51b815260040161064d90612f56565b505b505b80611a0581612fa3565b91505061146a565b50565b60056020528160005260406000208181548110611a2c57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039384169650929091169350919085565b6001600160a01b038116611af357600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af09190612f39565b90505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5e919061305c565b6001600160a01b038316600090815260046020908152604080832054600290925290912054919250611b8f91612f8b565b811015611bde5760405162461bcd60e51b815260206004820152601b60248201527f4432442d4445504f5349542d42414c414e43452d494e56414c49440000000000604482015260640161064d565b5050565b6000546001600160a01b031615611c3b5760405162461bcd60e51b815260206004820152601f60248201527f4432442d4445504f5349542d414c52454144592d494e495449414c495a454400604482015260640161064d565b6001600160a01b038116611c915760405162461bcd60e51b815260206004820152601f60248201527f4432442d4445504f5349542d494e56414c49442d44414f2d4144445245535300604482015260640161064d565b600080546001600160a01b039092166001600160a01b03199283161790556001805490911633179055565b60005b81811015611d0457611cf284848484818110611cdd57611cdd612ed4565b90506020020160208101906105ca9190612db3565b80611cfc81612fa3565b915050611cbf565b50505050565b6001600160a01b03821615801590611d225750600081115b80611d3f57506001600160a01b038216158015611d3f5750600034115b611d8b5760405162461bcd60e51b815260206004820181905260248201527f4432442d4445504f5349542d494e56414c49442d544f4b454e2d414d4f554e54604482015260640161064d565b6001600160a01b03821615611dab57611da6823330846129a9565b611e70565b5060015460408051633fc8cef360e01b8152905134926001600160a01b031691633fc8cef39160048083019260209291908290030181865afa158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190612f39565b9150816001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e5657600080fd5b505af1158015611e6a573d6000803e3d6000fd5b50505050505b6001600160a01b03821660009081526002602052604081208054839290611e98908490612f8b565b90915550506001600160a01b038216600090815260036020908152604080832086845290915281208054839290611ed0908490612f8b565b90915550611edf905082611a6b565b6000838152600560208181526040808420815160a081018352338082526001600160a01b038981168387019081528386018a8152606085018a81524260808701908152875460018181018a55898e528b8e209851918d0290980180549187166001600160a01b031992831617815594519785018054989096169716969096179093555160028201559051600382015591516004909201919091559488905292909152905490517f1d95434bb9e08b232f54a62aa6512b40e5aaf83565f680797563764d6e9c030d92611fe09287929091879187919094855260208501939093526001600160a01b039182166040850152606084015216608082015260a00190565b60405180910390a1505050565b60008060008060008060056000898152602001908152602001600020878154811061201a5761201a612ed4565b60009182526020918290206040805160a081018252600590930290910180546001600160a01b03908116808552600180840154831686880152600284015486860152600384015460608701526004938401546080870152548451633fc8cef360e01b815294519597509095911693633fc8cef39380840193908290030181865afa1580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d09190612f39565b6001600160a01b031682602001516001600160a01b0316146120f65781602001516120f9565b60005b60408301516060840151608090940151929b919a509850919650945092505050565b600154604051631b5fc51160e01b81523360048201526000916001600160a01b031690631b5fc51190602401602060405180830381865afa158015612164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121889190612eea565b6121c55760405162461bcd60e51b815260206004820152600e60248201526d4432442d4e4f542d4d4f44554c4560901b604482015260640161064d565b8160005b6000868152600560205260409020548110156124ea57600086815260056020526040902080546001600160a01b03871691908390811061220b5761220b612ed4565b60009182526020909120600160059092020101546001600160a01b031614156124d857600086815260056020526040812080548390811061224e5761224e612ed4565b90600052602060002090600502016003015460056000898152602001908152602001600020838154811061228457612284612ed4565b9060005260206000209060050201600201546122a09190612f22565b9050828111156122ad5750815b6122b78184612f22565b600088815260056020526040902080549194508291849081106122dc576122dc612ed4565b906000526020600020906005020160030160008282546122fc9190612f8b565b9091555050826124d6576001600160a01b03861661245857600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238b9190612f39565b6001600160a01b0316632e1a7d4d866040518263ffffffff1660e01b81526004016123b891815260200190565b600060405180830381600087803b1580156123d257600080fd5b505af11580156123e6573d6000803e3d6000fd5b50506040516000925033915087908381818185875af1925050503d806000811461242c576040519150601f19603f3d011682016040523d82523d6000602084013e612431565b606091505b50509050806124525760405162461bcd60e51b815260040161064d90612f56565b50612491565b6124638633876128ee565b6001600160a01b0386166000908152600260205260408120805487929061248b908490612f22565b90915550505b6001600160a01b03861660009081526003602090815260408083208a8452909152812080548792906124c4908490612f22565b9091555060019450610f789350505050565b505b806124e281612fa3565b9150506121c9565b50600095945050505050565b600154600054604051635f6d73c160e11b81523360048201526001600160a01b03918216602482015291169063bedae78290604401602060405180830381865afa158015612548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256c9190612eea565b6125ad5760405162461bcd60e51b8152602060048201526012602482015271110c910b5393d50b5055551213d49256915160721b604482015260640161064d565b60006001600160a01b0382161561262d576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015612602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612626919061305c565b90506126aa565b600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a49190612f39565b91504790505b6001600160a01b0382166000908152600260205260409020548111156128ad576001600160a01b0382166000908152600260205260408120546126ed9083612f22565b6001600160a01b038416600081815260026020526040902084905590915061276457826001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561274a57600080fd5b505af115801561275e573d6000803e3d6000fd5b50505050505b6001600160a01b038316600090815260036020908152604080832087845290915281208054839290612797908490612f8b565b90915550506000848152600560208181526040808420815160a08101835285546001600160a01b039081168252898116828601908152828501898152606084018981524260808601908152865460018181018955888d528a8d209751918c0290970180549187166001600160a01b0319928316178155945196850180549787169790911696909617909555905160028301555160038201559151600490920191909155898652939092529054925490517f1d95434bb9e08b232f54a62aa6512b40e5aaf83565f680797563764d6e9c030d936128a3938993919289928892169094855260208501939093526001600160a01b039182166040850152606084015216608082015260a00190565b60405180910390a1505b6128b682611a6b565b505050565b60006001600160a01b0382166128d2575047919050565b506001600160a01b031660009081526002602052604090205490565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561293d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129619190612eea565b6128b65760405162461bcd60e51b8152602060048201526019602482015278110c910b5513d2d1538b5514905394d191548b519052531151603a1b604482015260640161064d565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd906064016020604051808303816000875af1158015612a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a249190612eea565b611d045760405162461bcd60e51b8152602060048201526019602482015278110c910b5513d2d1538b5514905394d191548b519052531151603a1b604482015260640161064d565b60008060408385031215612a7f57600080fd5b50508035926020909101359150565b600080600060608486031215612aa357600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b83811015612af35781516001600160a01b031687529582019590820190600101612ace565b509495945050505050565b600081518084526020808501945080840160005b83811015612af357815187529582019590820190600101612b12565b60a081526000612b4160a0830188612aba565b8281036020840152612b538188612aba565b90508281036040840152612b678187612afe565b90508281036060840152612b7b8186612afe565b90508281036080840152612b8f8185612afe565b98975050505050505050565b60008083601f840112612bad57600080fd5b50813567ffffffffffffffff811115612bc557600080fd5b6020830191508360208260051b8501011115612be057600080fd5b9250929050565b600080600080600060608688031215612bff57600080fd5b85359450602086013567ffffffffffffffff80821115612c1e57600080fd5b612c2a89838a01612b9b565b90965094506040880135915080821115612c4357600080fd5b50612c5088828901612b9b565b969995985093965092949392505050565b6001600160a01b0381168114611a0d57600080fd5b600080600060608486031215612c8b57600080fd5b833592506020840135612c9d81612c61565b91506040840135612cad81612c61565b809150509250925092565b60008060408385031215612ccb57600080fd5b823591506020830135612cdd81612c61565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612d1157600080fd5b823567ffffffffffffffff80821115612d2957600080fd5b818501915085601f830112612d3d57600080fd5b813581811115612d4f57612d4f612ce8565b604051601f8201601f19908116603f01168101908382118183101715612d7757612d77612ce8565b81604052828152886020848701011115612d9057600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b600060208284031215612dc557600080fd5b8135610f7881612c61565b60008060008060808587031215612de657600080fd5b8435612df181612c61565b966020860135965060408601359560600135945092505050565b600060208284031215612e1d57600080fd5b5035919050565b60008060408385031215612e3757600080fd5b8235612e4281612c61565b946020939093013593505050565b600080600060408486031215612e6557600080fd5b83359250602084013567ffffffffffffffff811115612e8357600080fd5b612e8f86828701612b9b565b9497909650939450505050565b600080600060608486031215612eb157600080fd5b833592506020840135612ec381612c61565b929592945050506040919091013590565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612efc57600080fd5b81518015158114610f7857600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015612f3457612f34612f0c565b500390565b600060208284031215612f4b57600080fd5b8151610f7881612c61565b6020808252818101527f4432442d4445504f5349542d4641494c45442d544f2d53454e442d4554484552604082015260600190565b60008219821115612f9e57612f9e612f0c565b500190565b6000600019821415612fb757612fb7612f0c565b5060010190565b604081526000835180604084015260005b81811015612fec5760208187018101516060868401015201612fcf565b81811115612ffe576000606083860101525b50602083019390935250601f91909101601f191601606001919050565b600081600019048311821515161561303557613035612f0c565b500290565b60008261305757634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561306e57600080fd5b505191905056fea264697066735822122004d1470d3a8cd7d99afe7f17911e7489959e97cd30fb0ea9f813c31de217ada864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1364,
        "contract": "contracts/DepositContract.sol:DepositContract",
        "label": "dao",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1367,
        "contract": "contracts/DepositContract.sol:DepositContract",
        "label": "baseContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IBaseContract)2910"
      },
      {
        "astId": 1371,
        "contract": "contracts/DepositContract.sol:DepositContract",
        "label": "tokenBalances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1377,
        "contract": "contracts/DepositContract.sol:DepositContract",
        "label": "availableModuleBalances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 1381,
        "contract": "contracts/DepositContract.sol:DepositContract",
        "label": "vestedBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1387,
        "contract": "contracts/DepositContract.sol:DepositContract",
        "label": "deposits",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_array(t_struct(Deposit)1402_storage)dyn_storage)"
      },
      {
        "astId": 1391,
        "contract": "contracts/DepositContract.sol:DepositContract",
        "label": "vestings",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Vesting)1413_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Deposit)1402_storage)dyn_storage": {
        "base": "t_struct(Deposit)1402_storage",
        "encoding": "dynamic_array",
        "label": "struct DepositContract.Deposit[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Vesting)1413_storage)dyn_storage": {
        "base": "t_struct(Vesting)1413_storage",
        "encoding": "dynamic_array",
        "label": "struct DepositContract.Vesting[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBaseContract)2910": {
        "encoding": "inplace",
        "label": "contract IBaseContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_struct(Deposit)1402_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DepositContract.Deposit[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Deposit)1402_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Deposit)1402_storage": {
        "encoding": "inplace",
        "label": "struct DepositContract.Deposit",
        "members": [
          {
            "astId": 1393,
            "contract": "contracts/DepositContract.sol:DepositContract",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1395,
            "contract": "contracts/DepositContract.sol:DepositContract",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1397,
            "contract": "contracts/DepositContract.sol:DepositContract",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1399,
            "contract": "contracts/DepositContract.sol:DepositContract",
            "label": "used",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1401,
            "contract": "contracts/DepositContract.sol:DepositContract",
            "label": "time",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Vesting)1413_storage": {
        "encoding": "inplace",
        "label": "struct DepositContract.Vesting",
        "members": [
          {
            "astId": 1404,
            "contract": "contracts/DepositContract.sol:DepositContract",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1406,
            "contract": "contracts/DepositContract.sol:DepositContract",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1408,
            "contract": "contracts/DepositContract.sol:DepositContract",
            "label": "sent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1410,
            "contract": "contracts/DepositContract.sol:DepositContract",
            "label": "start",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1412,
            "contract": "contracts/DepositContract.sol:DepositContract",
            "label": "end",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}