{
  "address": "0xB9d6709EA15f0e52F959636756dE443F865c6410",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dealManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldFee",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldFeeWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeWallet",
          "type": "address"
        }
      ],
      "name": "FeeWalletChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadata",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "daos",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathFrom",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathTo",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        }
      ],
      "name": "TokenSwapCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        }
      ],
      "name": "TokenSwapExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "checkExecutability",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_daos",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathFrom",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathTo",
          "type": "uint256[][]"
        },
        {
          "internalType": "bytes32",
          "name": "_metadata",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        }
      ],
      "name": "createSwap",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dealManager",
      "outputs": [
        {
          "internalType": "contract IDealManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "executeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeInBasisPoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_metadata",
          "type": "bytes32"
        }
      ],
      "name": "getTokenswapFromMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "daos",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathFrom",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathTo",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "executionDate",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "metadata",
              "type": "bytes32"
            },
            {
              "internalType": "enum ModuleBase.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct TokenSwapModule.TokenSwap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "hasDealExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "metadataToDealId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_feeInBasisPoints",
          "type": "uint32"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeWallet",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSwaps",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "executionDate",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "metadata",
          "type": "bytes32"
        },
        {
          "internalType": "enum ModuleBase.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6435d58a1f57db908b6bb803dd5e76000b6c12af262dcb940244308eb2407519",
  "receipt": {
    "to": null,
    "from": "0xc039897eE5A0d14A3d1F212922FaF7e159Ab619F",
    "contractAddress": "0xB9d6709EA15f0e52F959636756dE443F865c6410",
    "transactionIndex": 13,
    "gasUsed": "2540542",
    "logsBloom": "0x
    "blockHash": "0xc76899c022345601d687aecf39fc5b02691caa3a53afdd1255747b5bd78fdfd5",
    "transactionHash": "0x6435d58a1f57db908b6bb803dd5e76000b6c12af262dcb940244308eb2407519",
    "logs": [],
    "blockNumber": 10376141,
    "cumulativeGasUsed": "3698740",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b500dB17E4D9e8167253956546A9A2b3412a432"
  ],
  "solcInputHash": "c66ccc121d0dd1f589520e8016841891",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dealManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldFee\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"}],\"name\":\"TokenSwapCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"}],\"name\":\"TokenSwapExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"checkExecutability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes32\",\"name\":\"_metadata\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"}],\"name\":\"createSwap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealManager\",\"outputs\":[{\"internalType\":\"contract IDealManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"executeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInBasisPoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_metadata\",\"type\":\"bytes32\"}],\"name\":\"getTokenswapFromMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"executionDate\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"internalType\":\"enum ModuleBase.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenSwapModule.TokenSwap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"hasDealExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"metadataToDealId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feeInBasisPoints\",\"type\":\"uint32\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSwaps\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"executionDate\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"internalType\":\"enum ModuleBase.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract to handle token swap        interactions for PrimeDeals\",\"kind\":\"dev\",\"methods\":{\"checkExecutability(uint32)\":{\"details\":\"Checks whether a token swap action can be executed (which is the case if all DAOs have deposited)\",\"params\":{\"_dealId\":\"The dealId of the action (position in the array)\"},\"returns\":{\"_0\":\"A bool flag indiciating whether the action can be executed\"}},\"createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)\":{\"details\":\"Create a new token swap action and automatically creates Dao Deposit Manager for each DAO that does not have one\",\"params\":{\"_daos\":\"Array containing the DAOs that are involed in this action\",\"_deadline\":\"Time until which this action can be executed (unix timestamp)\",\"_metadata\":\"Unique ID that is generated throught the Prime Deals frontend\",\"_pathFrom\":\"Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens\",\"_pathTo\":\"Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]\",\"_tokens\":\"Array containing the tokens that are involed in this action\"}},\"executeSwap(uint32)\":{\"details\":\"Executes a token swap action\",\"params\":{\"_dealId\":\"The dealId of the action (position in the array)\"}},\"setFee(uint32)\":{\"details\":\"Sets a new fee\",\"params\":{\"_feeInBasisPoints\":\"Fee amount in basis points (1% = 100)\"}},\"setFeeWallet(address)\":{\"details\":\"Sets a new fee wallet\",\"params\":{\"_feeWallet\":\"Address of the new fee wallet\"}}},\"title\":\"PrimeDeals Token Swap Module\",\"version\":1},\"userdoc\":{\"events\":{\"FeeChanged(uint32,uint32)\":{\"notice\":\"This event is emitted when the fee is updated\"},\"FeeWalletChanged(address,address)\":{\"notice\":\"This event is emitted when the fee wallet address is updated\"}},\"kind\":\"user\",\"methods\":{\"setFeeWallet(address)\":{\"notice\":\"The fee system will be inactive if the feeWallet                      is set to a zero-address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/tokenswap/TokenSwapModule.sol\":\"TokenSwapModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/interfaces/IDaoDepositManager.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDaoDepositManager {\\n    function initialize(address _dao) external;\\n\\n    function migrateBaseContract(address _newDaoDepositManager) external;\\n\\n    function deposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function multipleDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable;\\n\\n    function registerDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external;\\n\\n    function registerDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens\\n    ) external;\\n\\n    function withdraw(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId,\\n        address _sender\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function sendToModule(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function startVesting(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount,\\n        uint32 _vestingCliff,\\n        uint32 _vestingDuration\\n    ) external;\\n\\n    function claimVestings() external;\\n\\n    function verifyBalance(address _token) external view;\\n\\n    function getDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId\\n    )\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAvailableDealBalance(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getTotalDepositCount(address _dealModule, uint32 _dealId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableAmountOfUser(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getBalance(address _token) external view returns (uint256);\\n\\n    function getVestedBalance(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf866f748c278dfd67ad5b2ce3991c03ee81ce1893d611120827814c523c82000\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDealManager.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDealManager {\\n    function createDaoDepositManager(address _dao) external;\\n\\n    function hasDaoDepositManager(address _dao) external view returns (bool);\\n\\n    function getDaoDepositManager(address _dao) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function addressIsModule(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa31274c64c7a0b019b71ee0839fdbf5871a178275fbf483ee201e4743b5440d9\",\"license\":\"Unlicense\"},\"contracts/modules/ModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IDaoDepositManager.sol\\\";\\nimport \\\"../interfaces/IDealManager.sol\\\";\\n\\n/**\\n * @title PrimeDeals Module Base\\n * @dev   Smart contract to serve as the\\n          basis for each module\\n */\\ncontract ModuleBase {\\n    // Address of the DealManager implementation\\n    IDealManager public dealManager;\\n\\n    // @notics      Status of a deal\\n    // NULL         Uninitialized deal\\n    // ACTIVE       Deal has been created and is ready to be funded\\n    // CANCELLED    Deal has been canceld and is no longer valid\\n    // DONE         Deal has been executed\\n    enum Status {\\n        NULL,\\n        ACTIVE,\\n        CANCELLED,\\n        DONE\\n    }\\n\\n    /**\\n     * @dev                            Constructor\\n     * @param _dealManager             The address of DealManager implementation\\n     */\\n    constructor(address _dealManager) {\\n        require(\\n            _dealManager != address(0),\\n            \\\"Module: invalid base contract address\\\"\\n        );\\n        dealManager = IDealManager(_dealManager);\\n    }\\n\\n    /**\\n      * @dev                Sends tokens from a DAO deposit manager to the module\\n      * @param _dealId      ID of the action this is related to\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _path        Double nested array containing the amounts of tokens for each\\n                            token for each dao to be send\\n      * @return amountsIn   Array containing the total amounts sent per token\\n    */\\n    function _pullTokensIntoModule(\\n        uint32 _dealId,\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _path\\n    ) internal returns (uint256[] memory amountsIn) {\\n        amountsIn = new uint256[](_tokens.length);\\n        require(_path.length == _tokens.length, \\\"Module: length mismatch\\\");\\n        for (uint256 i; i < _tokens.length; ++i) {\\n            uint256[] memory tokenPath = _path[i];\\n            require(\\n                tokenPath.length == _daos.length,\\n                \\\"Module: length mismatch\\\"\\n            );\\n            for (uint256 j; j < tokenPath.length; ++j) {\\n                uint256 daoAmount = tokenPath[j];\\n                if (daoAmount > 0) {\\n                    amountsIn[i] += daoAmount;\\n                    IDaoDepositManager(\\n                        dealManager.getDaoDepositManager(_daos[j])\\n                    ).sendToModule(_dealId, _tokens[i], daoAmount);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev            Calls the approval function of a token\\n     * @param _token   Address of the token\\n     * @param _to      Target of the approval\\n     * @param _amount  Amount to be approved\\n     */\\n    function _approveToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(IERC20(_token).approve(_to, _amount), \\\"Module: approve failed\\\");\\n    }\\n\\n    /**\\n     * @dev            Calls the approval function of a token\\n                       for the deposit manager of a DAO\\n     * @param _token   Address of the token\\n     * @param _dao     DAO whose deposit manager is the target\\n     * @param _amount  Amount to be approved\\n     */\\n    function _approveDaoDepositManager(\\n        address _token,\\n        address _dao,\\n        uint256 _amount\\n    ) internal {\\n        _approveToken(_token, dealManager.getDaoDepositManager(_dao), _amount);\\n    }\\n\\n    /**\\n     * @dev            Transfers an amount of tokens\\n     * @param _token   Address of the token\\n     * @param _to      Target of the transfer\\n     * @param _amount  Amount to be sent\\n     */\\n    function _transferToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        try IERC20(_token).transfer(_to, _amount) returns (bool success) {\\n            require(success, \\\"Module: transfer was not successful\\\");\\n        } catch {\\n            revert(\\\"Module: transfer failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev            Transfers an amount of tokens from an address\\n     * @param _token   Address of the token\\n     * @param _from    Source of the transfer\\n     * @param _to      Target of the transfer\\n     * @param _amount  Amount to be sent\\n     */\\n    function _transferFromToken(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        try IERC20(_token).transferFrom(_from, _to, _amount) returns (\\n            bool success\\n        ) {\\n            require(success, \\\"Module: transferFrom was not successful\\\");\\n        } catch {\\n            revert(\\\"Module: transferFrom failed\\\");\\n        }\\n    }\\n\\n    function hasDealExpired(uint32 _dealId)\\n        external\\n        view\\n        virtual\\n        returns (bool)\\n    {}\\n}\\n\",\"keccak256\":\"0x9f79f72f033746054f818ef911a92f30b816d25ffbaf13cf1404babb103fa436\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/ModuleBaseWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ModuleBase.sol\\\";\\n\\n/**\\n * @title PrimeDeals Module Base Fee Extension\\n * @dev   Smart contract to extend the module\\n          base with a fee mechanim\\n */\\ncontract ModuleBaseWithFee is ModuleBase {\\n    // Wallet that is receiving the fees\\n    address public feeWallet;\\n\\n    // Fee in basis points (100% = 10000)\\n    uint32 public feeInBasisPoints;\\n\\n    /**\\n     * @dev                        Constructor\\n     * @param _dealManager         The address of Dealmanager implementation\\n     */\\n    constructor(address _dealManager) ModuleBase(_dealManager) {}\\n\\n    /**\\n     * @notice                  This event is emitted when the fee wallet address is updated\\n     * @param oldFeeWallet      Address of the old fee wallet\\n     * @param newFeeWallet      Address of the new fee wallet\\n     */\\n    event FeeWalletChanged(\\n        address indexed oldFeeWallet,\\n        address indexed newFeeWallet\\n    );\\n\\n    /**\\n     * @notice                  This event is emitted when the fee is updated\\n     * @param oldFee            Old fee amount in basis points (1% = 100)\\n     * @param newFee            New fee in basis points (1% = 100) that is updated\\n     */\\n    event FeeChanged(uint32 indexed oldFee, uint32 indexed newFee);\\n\\n    /**\\n     * @dev                 Sets a new fee wallet\\n     * @param _feeWallet    Address of the new fee wallet\\n     * @notice              The fee system will be inactive if the feeWallet\\n     *                      is set to a zero-address\\n     */\\n    function setFeeWallet(address _feeWallet) external {\\n        require(msg.sender == dealManager.owner(), \\\"Fee: not authorized\\\");\\n        if (feeWallet != _feeWallet) {\\n            emit FeeWalletChanged(feeWallet, _feeWallet);\\n        }\\n        feeWallet = _feeWallet;\\n    }\\n\\n    /**\\n     * @dev                         Sets a new fee\\n     * @param _feeInBasisPoints     Fee amount in basis points (1% = 100)\\n     */\\n    function setFee(uint32 _feeInBasisPoints) external {\\n        require(msg.sender == dealManager.owner(), \\\"Fee: not authorized\\\");\\n        require(_feeInBasisPoints <= 2000, \\\"Fee: can't be more than 20%\\\");\\n        if (feeInBasisPoints != _feeInBasisPoints) {\\n            emit FeeChanged(feeInBasisPoints, _feeInBasisPoints);\\n        }\\n        feeInBasisPoints = _feeInBasisPoints;\\n    }\\n\\n    /**\\n     * @dev             Pays the fee in a token and returns the remainder\\n     * @param _token    Token in which the transfer happens\\n     * @param _amount   Amount of the transfer\\n     * @return          Remaining amount after the fee payment\\n     */\\n    function _payFeeAndReturnRemainder(address _token, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (feeWallet != address(0) && feeInBasisPoints > 0) {\\n            uint256 fee = (_amount * feeInBasisPoints) / 10000;\\n            _transferToken(_token, feeWallet, fee);\\n\\n            return _amount - fee;\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @dev             Transfers a token amount with automated fee payment\\n     * @param _token    Token in which the transfer happens\\n     * @param _to       Target of the transfer\\n     * @param _amount   Amount of the transfer\\n     */\\n    function _transferTokenWithFee(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        _transferToken(_token, _to, _payFeeAndReturnRemainder(_token, _amount));\\n    }\\n\\n    /**\\n     * @dev             Transfers a token amount from someone with \\n                        automated fee payment\\n     * @param _token    Token in which the transfer happens\\n     * @param _from     Source of the transfer\\n     * @param _to       Target of the transfer\\n     * @param _amount   Amount of the transfer\\n     */\\n    function _transferFromTokenWithFee(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        _transferFromToken(\\n            _token,\\n            _from,\\n            _to,\\n            _payFeeAndReturnRemainder(_token, _amount)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf55cc2b5c91615ec68db34aa25f93835fffd197207440156ca53d6e3da225324\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/tokenswap/TokenSwapModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../ModuleBaseWithFee.sol\\\";\\n\\n/**\\n * @title PrimeDeals Token Swap Module\\n * @dev   Smart contract to handle token swap\\n *        interactions for PrimeDeals\\n */\\ncontract TokenSwapModule is ModuleBaseWithFee {\\n    TokenSwap[] public tokenSwaps;\\n    mapping(bytes32 => uint32) public metadataToDealId;\\n\\n    /**\\n     * @dev\\n     * pathFrom Description:\\n     * Used to storing how many tokens does each DAO send to the module\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> amount\\n     * [[123, 0, 123], [0, 123, 0]]\\n     * token 1: DAO 1 sends 123, DAO 2 sends 0, DAO 3 sends 123, etc.\\n     */\\n\\n    /**\\n     * @dev\\n     * pathTo:\\n     * Used for storing how many tokens does each DAO receive from the module\\n     * includes vesting. For each DAO there is a tuple of four values:\\n     * instant amount, vested amount, vesting cliff, vesting duration.\\n     * The start time will be the block.timestamp when executing the deal.\\n     * This timestamp + vestingDuration can be used to calculate the vesting end.\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> tuple(4)\\n     * [[instantAmount_dao1, vestedAmount_dao1, vestingCliff_dao1,\\n     * vestingDuration_dao1, instantAmount_dao2, ...], [...]]\\n     */\\n\\n    struct TokenSwap {\\n        // The participating DAOs\\n        address[] daos;\\n        // The tokens involved in the swap\\n        address[] tokens;\\n        // the token flow from the DAOs to the module\\n        uint256[][] pathFrom;\\n        // the token flow from the module to the DAO\\n        uint256[][] pathTo;\\n        // unix timestamp of the deadline\\n        uint32 deadline;\\n        // unix timestamp of the execution\\n        uint32 executionDate;\\n        // hash of the deal information.\\n        bytes32 metadata;\\n        // status of the deal\\n        Status status;\\n    }\\n\\n    event TokenSwapCreated(\\n        address indexed module,\\n        uint32 indexed dealId,\\n        bytes32 indexed metadata,\\n        address[] daos,\\n        address[] tokens,\\n        uint256[][] pathFrom,\\n        uint256[][] pathTo,\\n        uint32 deadline\\n    );\\n\\n    event TokenSwapExecuted(address indexed module, uint32 indexed dealId);\\n\\n    constructor(address _dealManager) ModuleBaseWithFee(_dealManager) {}\\n\\n    /**\\n      * @dev                Create a new token swap action\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains absolute numbers of tokens\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains a tuple(4) consisting of instant amount, vested \\n                                amount, vesting start, vesting end which then makes this \\n                                array look like:\\n                                [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1,\\n                                vestingEnd_dao1, instantAmount_dao2, ...], [...]]\\n      *@param _metadata     Unique ID that is generated throught the Prime Deals frontend\\n      * @param _deadline    Time until which this action can be executed (unix timestamp)\\n      * @return             The dealId of the new action\\n    */\\n    function _createSwap(\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _pathFrom,\\n        uint256[][] memory _pathTo,\\n        bytes32 _metadata,\\n        uint32 _deadline\\n    ) internal returns (uint32) {\\n        if (tokenSwaps.length >= 1) {\\n            require(\\n                _metadataDoesNotExist(_metadata),\\n                \\\"Module: metadata already exists\\\"\\n            );\\n        }\\n        require(_daos.length >= 2, \\\"Module: at least 2 daos required\\\");\\n        require(_tokens.length != 0, \\\"Module: at least 1 token required\\\");\\n\\n        // Check outer arrays\\n        uint256 pathFromLen = _pathFrom.length;\\n        require(\\n            _tokens.length == pathFromLen && pathFromLen == _pathTo.length,\\n            \\\"Module: invalid outer array lengths\\\"\\n        );\\n\\n        // Check inner arrays\\n        uint256 daosLen = _daos.length;\\n        for (uint256 i; i < pathFromLen; ++i) {\\n            require(\\n                _pathFrom[i].length == daosLen &&\\n                    _pathTo[i].length >> 2 == daosLen,\\n                \\\"Module: invalid inner array lengths\\\"\\n            );\\n        }\\n\\n        require(_deadline > block.timestamp, \\\"Module: invalid deadline\\\");\\n\\n        TokenSwap memory ts = TokenSwap(\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline,\\n            0,\\n            _metadata,\\n            Status.ACTIVE\\n        );\\n        tokenSwaps.push(ts);\\n\\n        uint32 dealId = uint32(tokenSwaps.length - 1);\\n\\n        metadataToDealId[_metadata] = dealId;\\n\\n        emit TokenSwapCreated(\\n            address(this),\\n            dealId,\\n            ts.metadata,\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline\\n        );\\n        return dealId;\\n    }\\n\\n    /**\\n      * @dev                Create a new token swap action and automatically\\n                            creates Dao Deposit Manager for each DAO that does not have one\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains absolute numbers of tokens\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains a tuple(4) consisting of instant amount, vested \\n                                amount, vesting start, vesting end which then makes this \\n                                array look like:\\n                                [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1,\\n                                vestingEnd_dao1, instantAmount_dao2, ...], [...]]\\n      *@param _metadata     Unique ID that is generated throught the Prime Deals frontend\\n      * @param _deadline    Time until which this action can be executed (unix timestamp)\\n    */\\n    function createSwap(\\n        address[] calldata _daos,\\n        address[] calldata _tokens,\\n        uint256[][] calldata _pathFrom,\\n        uint256[][] calldata _pathTo,\\n        bytes32 _metadata,\\n        uint32 _deadline\\n    ) external returns (uint32) {\\n        for (uint256 i; i < _daos.length; ++i) {\\n            address dao = _daos[i];\\n            if (!dealManager.hasDaoDepositManager(dao)) {\\n                dealManager.createDaoDepositManager(dao);\\n            }\\n        }\\n        return (\\n            _createSwap(\\n                _daos,\\n                _tokens,\\n                _pathFrom,\\n                _pathTo,\\n                _metadata,\\n                _deadline\\n            )\\n        );\\n    }\\n\\n    /**\\n      * @dev            Checks whether a token swap action can be executed\\n                        (which is the case if all DAOs have deposited)\\n      * @param _dealId  The dealId of the action (position in the array)\\n      * @return         A bool flag indiciating whether the action can be executed\\n    */\\n    function checkExecutability(uint32 _dealId)\\n        public\\n        view\\n        validDealId(_dealId)\\n        returns (bool)\\n    {\\n        TokenSwap memory ts = tokenSwaps[_dealId];\\n        if (ts.status != Status.ACTIVE) {\\n            return false;\\n        }\\n        if (ts.deadline < uint32(block.timestamp)) {\\n            return false;\\n        }\\n\\n        address[] memory t = ts.tokens;\\n        for (uint256 i; i < t.length; ++i) {\\n            uint256[] memory p = ts.pathFrom[i];\\n            for (uint256 j; j < p.length; ++j) {\\n                // for each token and each pathFrom entry for this\\n                // token, check whether the corresponding DAO\\n                // has deposited the corresponding amount into their\\n                // deposit contract\\n                uint256 bal = IDaoDepositManager(\\n                    dealManager.getDaoDepositManager(ts.daos[j])\\n                ).getAvailableDealBalance(address(this), _dealId, t[i]);\\n                if (bal < p[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev            Executes a token swap action\\n     * @param _dealId  The dealId of the action (position in the array)\\n     */\\n    function executeSwap(uint32 _dealId)\\n        external\\n        validDealId(_dealId)\\n        activeStatus(_dealId)\\n    {\\n        TokenSwap storage ts = tokenSwaps[_dealId];\\n\\n        require(ts.deadline >= uint32(block.timestamp), \\\"Module: swap expired\\\");\\n        require(checkExecutability(_dealId), \\\"Module: swap not executable\\\");\\n\\n        // transfer the tokens from the deposit manager of the DAOs\\n        // into this module\\n        uint256[] memory amountsIn = _pullTokensIntoModule(\\n            _dealId,\\n            ts.daos,\\n            ts.tokens,\\n            ts.pathFrom\\n        );\\n\\n        // distribute the tokens from this module to the DAOs\\n        // and (if applicable) and their vesting contracts\\n        uint256[] memory amountsOut = _distributeTokens(ts, _dealId);\\n\\n        // verify whether the amounts being pulled and pushed match\\n        for (uint256 i; i < ts.tokens.length; ++i) {\\n            require(amountsIn[i] == amountsOut[i], \\\"Module: amount mismatch\\\");\\n        }\\n\\n        ts.status = Status.DONE;\\n        ts.executionDate = uint32(block.timestamp);\\n        emit TokenSwapExecuted(address(this), _dealId);\\n    }\\n\\n    /**\\n      * @dev                Distributes the tokens based on the supplied\\n                            information to the DAOs or their vesting contracts\\n      * @param _ts          TokenSwap object containing all the information\\n                            of the action\\n      * @param _dealId      The dealId of the action (position in the array)\\n      * @return amountsOut  The two min values for the token amounts _ts\\n    */\\n    function _distributeTokens(TokenSwap memory _ts, uint32 _dealId)\\n        internal\\n        returns (uint256[] memory amountsOut)\\n    {\\n        amountsOut = new uint256[](_ts.tokens.length);\\n        // Distribute tokens from the module\\n        for (uint256 i; i < _ts.tokens.length; ++i) {\\n            uint256[] memory pt = _ts.pathTo[i];\\n            address token = _ts.tokens[i];\\n            for (uint256 k; k < pt.length >> 2; ++k) {\\n                // every 4 values, the values for a new dao start\\n                // value 0 = instant amount\\n                // value 1 = vested amount\\n                // value 2 = vesting cliff\\n                // value 3 = vesting duration\\n                uint256 instant = pt[k << 2];\\n                uint256 vested = pt[(k << 2) + 1];\\n\\n                if (instant > 0) {\\n                    amountsOut[i] += instant;\\n                    _transferTokenWithFee(token, _ts.daos[k], instant);\\n                }\\n\\n                if (vested > 0) {\\n                    amountsOut[i] += vested;\\n                    uint256 amount = _payFeeAndReturnRemainder(token, vested);\\n                    _approveDaoDepositManager(token, _ts.daos[k], amount);\\n                    IDaoDepositManager(\\n                        dealManager.getDaoDepositManager(_ts.daos[k])\\n                    ).startVesting(\\n                            _dealId,\\n                            token,\\n                            amount, // amount\\n                            uint32(pt[(k << 2) + 2]), // start\\n                            uint32(pt[(k << 2) + 3]) // end\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    function getTokenswapFromMetadata(bytes32 _metadata)\\n        public\\n        view\\n        validMetadata(_metadata)\\n        returns (TokenSwap memory swap)\\n    {\\n        return tokenSwaps[metadataToDealId[_metadata]];\\n    }\\n\\n    function hasDealExpired(uint32 _dealId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            tokenSwaps[_dealId].status != Status.ACTIVE ||\\n            tokenSwaps[_dealId].deadline < uint32(block.timestamp);\\n    }\\n\\n    function _metadataDoesNotExist(bytes32 _metadata)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 dealId = metadataToDealId[_metadata];\\n        return (dealId == 0 &&\\n            tokenSwaps[dealId].metadata != _metadata &&\\n            _metadata.length > 0);\\n    }\\n\\n    modifier validMetadata(bytes32 _metadata) {\\n        uint256 dealId = metadataToDealId[_metadata];\\n        require(\\n            dealId != 0 || tokenSwaps[dealId].metadata == _metadata,\\n            \\\"Module: metadata does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validDealId(uint32 _dealId) {\\n        require(_dealId < tokenSwaps.length, \\\"Module: dealId doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier activeStatus(uint32 _dealId) {\\n        require(\\n            tokenSwaps[_dealId].status == Status.ACTIVE,\\n            \\\"Module: dealId not active\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe1e877586a8c7b5f85a5dc1efe64bcb054d5f036055a44b42a0d6580b08d7802\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b42132cd11610071578063b42132cd14610192578063b45edf47146101b2578063cfccd4bc146101c9578063d24fdb7a146101dc578063f25f4b56146101ef578063fe442f5d1461020257600080fd5b806301df538d146100b957806312d335e2146100e95780631ab971ab1461010c578063251f02b4146101215780638730f3441461014457806390d49b9d1461017f575b600080fd5b6000546100cc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fc6100f736600461260b565b610215565b6040516100e0949392919061265c565b61011f61011a3660046126a7565b610263565b005b61013461012f3660046126a7565b610409565b60405190151581526020016100e0565b61016a61015236600461260b565b60036020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016100e0565b61011f61018d3660046126d7565b610927565b6101a56101a036600461260b565b610a64565b6040516100e091906127b4565b60015461016a90600160a01b900463ffffffff1681565b6101346101d73660046126a7565b610dd7565b61016a6101ea3660046128ca565b610e66565b6001546100cc906001600160a01b031681565b61011f6102103660046126a7565b611015565b6002818154811061022557600080fd5b600091825260209091206007909102016004810154600582015460069092015463ffffffff8083169450640100000000909204909116919060ff1684565b60008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d891906129a7565b6001600160a01b0316336001600160a01b0316146103335760405162461bcd60e51b81526020600482015260136024820152721199594e881b9bdd08185d5d1a1bdc9a5e9959606a1b60448201526064015b60405180910390fd5b6107d08163ffffffff16111561038b5760405162461bcd60e51b815260206004820152601b60248201527f4665653a2063616e2774206265206d6f7265207468616e203230250000000000604482015260640161032a565b60015463ffffffff828116600160a01b90920416146103e35760015460405163ffffffff80841692600160a01b900416907fdeab7ddf530f3309d7f88438b7fbb714e557a5a30d0c2d1cfc3c0da1dde4096890600090a35b6001805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b600254600090829063ffffffff8216106104655760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c653a206465616c496420646f65736e277420657869737400000000604482015260640161032a565b600060028463ffffffff1681548110610480576104806129c4565b906000526020600020906007020160405180610100016040529081600082018054806020026020016040519081016040528092919081815260200182805480156104f357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104d5575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561055557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610537575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156105ef576000848152602090819020830180546040805182850281018501909152818152928301828280156105db57602002820191906000526020600020905b8154815260200190600101908083116105c7575b505050505081526020019060010190610583565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156106885760008481526020908190208301805460408051828502810185019091528181529283018282801561067457602002820191906000526020600020905b815481526020019060010190808311610660575b50505050508152602001906001019061061c565b50505090825250600482015463ffffffff808216602084015264010000000090910416604082015260058201546060820152600682015460809091019060ff1660038111156106d9576106d9612624565b60038111156106ea576106ea612624565b905250905060018160e00151600381111561070757610707612624565b14610716576000925050610921565b4263ffffffff16816080015163ffffffff161015610738576000925050610921565b602081015160005b815181101561091957600083604001518281518110610761576107616129c4565b6020026020010151905060005b81518110156109065760008054865180516001600160a01b03909216916371cfe4989190859081106107a2576107a26129c4565b60200260200101516040518263ffffffff1660e01b81526004016107d591906001600160a01b0391909116815260200190565b602060405180830381865afa1580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081691906129a7565b6001600160a01b031663246cd574308b888881518110610838576108386129c4565b60200260200101516040518463ffffffff1660e01b8152600401610882939291906001600160a01b03938416815263ffffffff929092166020830152909116604082015260600190565b602060405180830381865afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c391906129da565b90508282815181106108d7576108d76129c4565b60200260200101518110156108f55760009750505050505050610921565b506108ff81612a09565b905061076e565b50508061091290612a09565b9050610740565b506001935050505b50919050565b60008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c91906129a7565b6001600160a01b0316336001600160a01b0316146109f25760405162461bcd60e51b81526020600482015260136024820152721199594e881b9bdd08185d5d1a1bdc9a5e9959606a1b604482015260640161032a565b6001546001600160a01b03828116911614610a42576001546040516001600160a01b038084169216907f9f4f5dce3c4d197b5d7496cb96e25f0a89809167195964b0daa3ef5fed63c00a90600090a35b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60408051610100810182526060808252602082018190529181018290528181019190915260006080820181905260a0820181905260c0820181905260e0820152600082815260036020526040902054829063ffffffff1680151580610aec57508160028281548110610ad857610ad86129c4565b906000526020600020906007020160050154145b610b385760405162461bcd60e51b815260206004820152601f60248201527f4d6f64756c653a206d6574616461746120646f6573206e6f7420657869737400604482015260640161032a565b60008481526003602052604090205460028054909163ffffffff16908110610b6257610b626129c4565b90600052602060002090600702016040518061010001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610bd557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bb7575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610c3757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c19575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610cd157600084815260209081902083018054604080518285028101850190915281815292830182828015610cbd57602002820191906000526020600020905b815481526020019060010190808311610ca9575b505050505081526020019060010190610c65565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610d6a57600084815260209081902083018054604080518285028101850190915281815292830182828015610d5657602002820191906000526020600020905b815481526020019060010190808311610d42575b505050505081526020019060010190610cfe565b50505090825250600482015463ffffffff808216602084015264010000000090910416604082015260058201546060820152600682015460809091019060ff166003811115610dbb57610dbb612624565b6003811115610dcc57610dcc612624565b905250949350505050565b6000600160028363ffffffff1681548110610df457610df46129c4565b600091825260209091206006600790920201015460ff166003811115610e1c57610e1c612624565b141580610e6057504263ffffffff1660028363ffffffff1681548110610e4457610e446129c4565b600091825260209091206004600790920201015463ffffffff16105b92915050565b6000805b8a811015610f805760008c8c83818110610e8657610e866129c4565b9050602002016020810190610e9b91906126d7565b60005460405163c221e44b60e01b81526001600160a01b03808416600483015292935091169063c221e44b90602401602060405180830381865afa158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b9190612a24565b610f6f5760005460405163253feb5d60e21b81526001600160a01b038381166004830152909116906394ffad7490602401600060405180830381600087803b158015610f5657600080fd5b505af1158015610f6a573d6000803e3d6000fd5b505050505b50610f7981612a09565b9050610e6a565b506110068b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250610ff592508b91508c9050612ab1565b610fff888a612ab1565b87876116ab565b9b9a5050505050505050505050565b600254819063ffffffff82161061106e5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c653a206465616c496420646f65736e277420657869737400000000604482015260640161032a565b81600160028263ffffffff168154811061108a5761108a6129c4565b600091825260209091206006600790920201015460ff1660038111156110b2576110b2612624565b146110ff5760405162461bcd60e51b815260206004820152601960248201527f4d6f64756c653a206465616c4964206e6f742061637469766500000000000000604482015260640161032a565b600060028463ffffffff168154811061111a5761111a6129c4565b6000918252602090912060046007909202019081015490915063ffffffff428116911610156111825760405162461bcd60e51b8152602060048201526014602482015273135bd91d5b194e881cddd85c08195e1c1a5c995960621b604482015260640161032a565b61118b84610409565b6111d75760405162461bcd60e51b815260206004820152601b60248201527f4d6f64756c653a2073776170206e6f742065786563757461626c650000000000604482015260640161032a565b6000611330858360000180548060200260200160405190810160405280929190818152602001828054801561123557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611217575b50505050508460010180548060200260200160405190810160405280929190818152602001828054801561129257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611274575b505050505085600201805480602002602001604051908101604052809291908181526020016000905b828210156113275760008481526020908190208301805460408051828502810185019091528181529283018282801561131357602002820191906000526020600020905b8154815260200190600101908083116112ff575b5050505050815260200190600101906112bb565b50505050611b46565b6040805184546101206020820283018101909352610100820181815293945060009361159793879284929184919084018282801561139757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611379575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156113f957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113db575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156114935760008481526020908190208301805460408051828502810185019091528181529283018282801561147f57602002820191906000526020600020905b81548152602001906001019080831161146b575b505050505081526020019060010190611427565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561152c5760008481526020908190208301805460408051828502810185019091528181529283018282801561151857602002820191906000526020600020905b815481526020019060010190808311611504575b5050505050815260200190600101906114c0565b50505090825250600482015463ffffffff808216602084015264010000000090910416604082015260058201546060820152600682015460809091019060ff16600381111561157d5761157d612624565b600381111561158e5761158e612624565b90525087611e0e565b905060005b6001840154811015611639578181815181106115ba576115ba6129c4565b60200260200101518382815181106115d4576115d46129c4565b6020026020010151146116295760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a20616d6f756e74206d69736d61746368000000000000000000604482015260640161032a565b61163281612a09565b905061159c565b5060068301805460ff1916600317905560048301805467ffffffff0000000019166401000000004263ffffffff90811691909102919091179091556040519087169030907f0ac5c9ea9d419361b19812863ad8027a4f03c5936ac9955b67e9a60230ed94c890600090a3505050505050565b60025460009060011161170d576116c18361217f565b61170d5760405162461bcd60e51b815260206004820152601f60248201527f4d6f64756c653a206d6574616461746120616c72656164792065786973747300604482015260640161032a565b60028751101561175f5760405162461bcd60e51b815260206004820181905260248201527f4d6f64756c653a206174206c6561737420322064616f73207265717569726564604482015260640161032a565b85516117b75760405162461bcd60e51b815260206004820152602160248201527f4d6f64756c653a206174206c65617374203120746f6b656e20726571756972656044820152601960fa1b606482015260840161032a565b84518651811480156117c95750845181145b6118215760405162461bcd60e51b815260206004820152602360248201527f4d6f64756c653a20696e76616c6964206f75746572206172726179206c656e6760448201526274687360e81b606482015260840161032a565b875160005b828110156118dc5781888281518110611841576118416129c4565b6020026020010151511480156118745750816002888381518110611867576118676129c4565b602002602001015151901c145b6118cc5760405162461bcd60e51b815260206004820152602360248201527f4d6f64756c653a20696e76616c696420696e6e6572206172726179206c656e6760448201526274687360e81b606482015260840161032a565b6118d581612a09565b9050611826565b50428463ffffffff16116119325760405162461bcd60e51b815260206004820152601860248201527f4d6f64756c653a20696e76616c696420646561646c696e650000000000000000604482015260640161032a565b60006040518061010001604052808b81526020018a81526020018981526020018881526020018663ffffffff168152602001600063ffffffff1681526020018781526020016001600381111561198a5761198a612624565b90526002805460018101825560009190915281518051929350839260079092027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01916119df918391602091909101906124bf565b5060208281015180516119f892600185019201906124bf565b5060408201518051611a14916002840191602090910190612524565b5060608201518051611a30916003840191602090910190612524565b50608082015160048201805460a085015163ffffffff9081166401000000000267ffffffffffffffff1990921693169290921791909117905560c0820151600582015560e082015160068201805460ff19166001836003811115611a9657611a96612624565b02179055505060025460009150611aaf90600190612b7c565b9050806003600089815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055508160c001518163ffffffff16306001600160a01b03167f93ec9825c63237a731b7205f8e661ee12357e9993bda8c3d47fb709482e769a98e8e8e8e8d604051611b30959493929190612b93565b60405180910390a49a9950505050505050505050565b6060825167ffffffffffffffff811115611b6257611b62612a46565b604051908082528060200260200182016040528015611b8b578160200160208202803683370190505b5090508251825114611bd95760405162461bcd60e51b815260206004820152601760248201527609adec8ead8ca7440d8cadccee8d040dad2e6dac2e8c6d604b1b604482015260640161032a565b60005b8351811015611e05576000838281518110611bf957611bf96129c4565b602002602001015190508551815114611c4e5760405162461bcd60e51b815260206004820152601760248201527609adec8ead8ca7440d8cadccee8d040dad2e6dac2e8c6d604b1b604482015260640161032a565b60005b8151811015611df2576000828281518110611c6e57611c6e6129c4565b602002602001015190506000811115611de15780858581518110611c9457611c946129c4565b60200260200101818151611ca89190612bf9565b90525060005488516001600160a01b03909116906371cfe498908a9085908110611cd457611cd46129c4565b60200260200101516040518263ffffffff1660e01b8152600401611d0791906001600160a01b0391909116815260200190565b602060405180830381865afa158015611d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4891906129a7565b6001600160a01b0316632162a70c8a898781518110611d6957611d696129c4565b60209081029190910101516040516001600160e01b031960e085901b16815263ffffffff9290921660048301526001600160a01b0316602482015260448101849052606401600060405180830381600087803b158015611dc857600080fd5b505af1158015611ddc573d6000803e3d6000fd5b505050505b50611deb81612a09565b9050611c51565b505080611dfe90612a09565b9050611bdc565b50949350505050565b606082602001515167ffffffffffffffff811115611e2e57611e2e612a46565b604051908082528060200260200182016040528015611e57578160200160208202803683370190505b50905060005b83602001515181101561217857600084606001518281518110611e8257611e826129c4565b60200260200101519050600085602001518381518110611ea457611ea46129c4565b6020026020010151905060005b825160021c81101561216457600083600283901b81518110611ed557611ed56129c4565b60200260200101519050600084600284901b6001611ef39190612bf9565b81518110611f0357611f036129c4565b602002602001015190506000821115611f685781878781518110611f2957611f296129c4565b60200260200101818151611f3d9190612bf9565b90525088518051611f6891869186908110611f5a57611f5a6129c4565b6020026020010151846121d7565b80156121515780878781518110611f8157611f816129c4565b60200260200101818151611f959190612bf9565b9052506000611fa485836121f0565b9050611fce858b600001518681518110611fc057611fc06129c4565b602002602001015183612278565b6000548a5180516001600160a01b03909216916371cfe498919087908110611ff857611ff86129c4565b60200260200101516040518263ffffffff1660e01b815260040161202b91906001600160a01b0391909116815260200190565b602060405180830381865afa158015612048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206c91906129a7565b6001600160a01b031663d40592928a87848a61208c60028b811b90612bf9565b8151811061209c5761209c6129c4565b60200260200101518b60028b901b60036120b69190612bf9565b815181106120c6576120c66129c4565b60209081029190910101516040516001600160e01b031960e088901b16815263ffffffff95861660048201526001600160a01b03909416602485015260448401929092528316606483015291909116608482015260a401600060405180830381600087803b15801561213757600080fd5b505af115801561214b573d6000803e3d6000fd5b50505050505b50508061215d90612a09565b9050611eb1565b5050508061217190612a09565b9050611e5d565b5092915050565b60008181526003602052604081205463ffffffff16801580156121c6575082600282815481106121b1576121b16129c4565b90600052602060002090600702016005015414155b80156121d0575060015b9392505050565b6121eb83836121e686856121f0565b6122f1565b505050565b6001546000906001600160a01b03161580159061221b5750600154600160a01b900463ffffffff1615155b15610921576001546000906127109061224190600160a01b900463ffffffff1685612c11565b61224b9190612c30565b6001549091506122669085906001600160a01b0316836122f1565b6122708184612b7c565b915050610e60565b600054604051630e39fc9360e31b81526001600160a01b0384811660048301526121eb9286929116906371cfe49890602401602060405180830381865afa1580156122c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122eb91906129a7565b83612407565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af192505050801561235c575060408051601f3d908101601f1916820190925261235991810190612a24565b60015b6123a85760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a207472616e73666572206661696c6564000000000000000000604482015260640161032a565b806124015760405162461bcd60e51b815260206004820152602360248201527f4d6f64756c653a207472616e7366657220776173206e6f742073756363657373604482015262199d5b60ea1b606482015260840161032a565b50505050565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015612456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247a9190612a24565b6121eb5760405162461bcd60e51b8152602060048201526016602482015275135bd91d5b194e88185c1c1c9bdd994819985a5b195960521b604482015260640161032a565b828054828255906000526020600020908101928215612514579160200282015b8281111561251457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906124df565b5061252092915061257d565b5090565b828054828255906000526020600020908101928215612571579160200282015b828111156125715782518051612561918491602090910190612592565b5091602001919060010190612544565b506125209291506125cd565b5b80821115612520576000815560010161257e565b828054828255906000526020600020908101928215612514579160200282015b828111156125145782518255916020019190600101906125b2565b808211156125205760006125e182826125ea565b506001016125cd565b5080546000825590600052602060002090810190612608919061257d565b50565b60006020828403121561261d57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811061265857634e487b7160e01b600052602160045260246000fd5b9052565b63ffffffff8581168252841660208201526040810183905260808101612685606083018461263a565b95945050505050565b803563ffffffff811681146126a257600080fd5b919050565b6000602082840312156126b957600080fd5b6121d08261268e565b6001600160a01b038116811461260857600080fd5b6000602082840312156126e957600080fd5b81356121d0816126c2565b600081518084526020808501945080840160005b8381101561272d5781516001600160a01b031687529582019590820190600101612708565b509495945050505050565b600081518084526020808501808196508360051b810191508286016000805b868110156127a6578385038a52825180518087529087019087870190845b8181101561279157835183529289019291890191600101612775565b50509a87019a95505091850191600101612757565b509298975050505050505050565b60208152600082516101008060208501526127d36101208501836126f4565b91506020850151601f19808685030160408701526127f184836126f4565b9350604087015191508086850301606087015261280e8483612738565b935060608701519150808685030160808701525061282c8382612738565b925050608085015161284660a086018263ffffffff169052565b5060a085015163ffffffff811660c08601525060c085015160e085015260e08501516128748286018261263a565b5090949350505050565b60008083601f84011261289057600080fd5b50813567ffffffffffffffff8111156128a857600080fd5b6020830191508360208260051b85010111156128c357600080fd5b9250929050565b60008060008060008060008060008060c08b8d0312156128e957600080fd5b8a3567ffffffffffffffff8082111561290157600080fd5b61290d8e838f0161287e565b909c509a5060208d013591508082111561292657600080fd5b6129328e838f0161287e565b909a50985060408d013591508082111561294b57600080fd5b6129578e838f0161287e565b909850965060608d013591508082111561297057600080fd5b5061297d8d828e0161287e565b90955093505060808b0135915061299660a08c0161268e565b90509295989b9194979a5092959850565b6000602082840312156129b957600080fd5b81516121d0816126c2565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156129ec57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612a1d57612a1d6129f3565b5060010190565b600060208284031215612a3657600080fd5b815180151581146121d057600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a8557612a85612a46565b604052919050565b600067ffffffffffffffff821115612aa757612aa7612a46565b5060051b60200190565b6000612ac4612abf84612a8d565b612a5c565b83815260208082019190600586811b860136811115612ae257600080fd5b865b81811015612b6f57803567ffffffffffffffff811115612b045760008081fd5b880136601f820112612b165760008081fd5b8035612b24612abf82612a8d565b81815290851b82018601908681019036831115612b415760008081fd5b928701925b82841015612b5f57833582529287019290870190612b46565b8952505050948301948301612ae4565b5092979650505050505050565b600082821015612b8e57612b8e6129f3565b500390565b60a081526000612ba660a08301886126f4565b8281036020840152612bb881886126f4565b90508281036040840152612bcc8187612738565b90508281036060840152612be08186612738565b91505063ffffffff831660808301529695505050505050565b60008219821115612c0c57612c0c6129f3565b500190565b6000816000190483118215151615612c2b57612c2b6129f3565b500290565b600082612c4d57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212208beee457880178fd758531f6967f0cda1b6e82eb0e9b48c6bc35ea7327360c2b64736f6c634300080a0033",
  "devdoc": {
    "details": "Smart contract to handle token swap        interactions for PrimeDeals",
    "kind": "dev",
    "methods": {
      "checkExecutability(uint32)": {
        "details": "Checks whether a token swap action can be executed (which is the case if all DAOs have deposited)",
        "params": {
          "_dealId": "The dealId of the action (position in the array)"
        },
        "returns": {
          "_0": "A bool flag indiciating whether the action can be executed"
        }
      },
      "createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)": {
        "details": "Create a new token swap action and automatically creates Dao Deposit Manager for each DAO that does not have one",
        "params": {
          "_daos": "Array containing the DAOs that are involed in this action",
          "_deadline": "Time until which this action can be executed (unix timestamp)",
          "_metadata": "Unique ID that is generated throught the Prime Deals frontend",
          "_pathFrom": "Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens",
          "_pathTo": "Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]",
          "_tokens": "Array containing the tokens that are involed in this action"
        }
      },
      "executeSwap(uint32)": {
        "details": "Executes a token swap action",
        "params": {
          "_dealId": "The dealId of the action (position in the array)"
        }
      },
      "setFee(uint32)": {
        "details": "Sets a new fee",
        "params": {
          "_feeInBasisPoints": "Fee amount in basis points (1% = 100)"
        }
      },
      "setFeeWallet(address)": {
        "details": "Sets a new fee wallet",
        "params": {
          "_feeWallet": "Address of the new fee wallet"
        }
      }
    },
    "title": "PrimeDeals Token Swap Module",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeeChanged(uint32,uint32)": {
        "notice": "This event is emitted when the fee is updated"
      },
      "FeeWalletChanged(address,address)": {
        "notice": "This event is emitted when the fee wallet address is updated"
      }
    },
    "kind": "user",
    "methods": {
      "setFeeWallet(address)": {
        "notice": "The fee system will be inactive if the feeWallet                      is set to a zero-address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4068,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "dealManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IDealManager)3231"
      },
      {
        "astId": 4341,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeWallet",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4343,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeInBasisPoints",
        "offset": 20,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 7215,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "tokenSwaps",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(TokenSwap)7243_storage)dyn_storage"
      },
      {
        "astId": 7219,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "metadataToDealId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenSwap)7243_storage)dyn_storage": {
        "base": "t_struct(TokenSwap)7243_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenSwapModule.TokenSwap[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDealManager)3231": {
        "encoding": "inplace",
        "label": "contract IDealManager",
        "numberOfBytes": "20"
      },
      "t_enum(Status)4073": {
        "encoding": "inplace",
        "label": "enum ModuleBase.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(TokenSwap)7243_storage": {
        "encoding": "inplace",
        "label": "struct TokenSwapModule.TokenSwap",
        "members": [
          {
            "astId": 7222,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "daos",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7225,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7229,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathFrom",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7233,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathTo",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7235,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 7237,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "executionDate",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 7239,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "metadata",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 7242,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(Status)4073"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}