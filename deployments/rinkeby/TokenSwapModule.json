{
  "address": "0x930E2E8b21095Be1671A38AaaFB61e37b93874E5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dealManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldFee",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldFeeWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeWallet",
          "type": "address"
        }
      ],
      "name": "FeeWalletChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadata",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "daos",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathFrom",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathTo",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        }
      ],
      "name": "TokenSwapCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadata",
          "type": "bytes32"
        }
      ],
      "name": "TokenSwapExecuted",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "checkExecutability",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_daos",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathFrom",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathTo",
          "type": "uint256[][]"
        },
        {
          "internalType": "bytes32",
          "name": "_metadata",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        }
      ],
      "name": "createSwap",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dealManager",
      "outputs": [
        {
          "internalType": "contract IDealManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "executeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeInBasisPoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_metadata",
          "type": "bytes32"
        }
      ],
      "name": "getTokenswapFromMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "daos",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathFrom",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathTo",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "executionDate",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "metadata",
              "type": "bytes32"
            },
            {
              "internalType": "enum ModuleBase.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct TokenSwapModule.TokenSwap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "hasDealExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "metadataToDealId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_feeInBasisPoints",
          "type": "uint32"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeWallet",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSwaps",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "executionDate",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "metadata",
          "type": "bytes32"
        },
        {
          "internalType": "enum ModuleBase.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8e3f1958777230a2eb1506a0446c427248b5e9efd6c2ac275733b95171037cae",
  "receipt": {
    "to": null,
    "from": "0xc039897eE5A0d14A3d1F212922FaF7e159Ab619F",
    "contractAddress": "0x930E2E8b21095Be1671A38AaaFB61e37b93874E5",
    "transactionIndex": 27,
    "gasUsed": "2629379",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x749738e33fd9d332bedeb0d9168a85f3caa684a82989d2c0c203bde5b33d5173",
    "transactionHash": "0x8e3f1958777230a2eb1506a0446c427248b5e9efd6c2ac275733b95171037cae",
    "logs": [],
    "blockNumber": 10459054,
    "cumulativeGasUsed": "6300768",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b500dB17E4D9e8167253956546A9A2b3412a432"
  ],
  "solcInputHash": "ac2d27737392d79fda4a0a404ecb8293",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dealManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldFee\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"}],\"name\":\"TokenSwapCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"TokenSwapExecuted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"checkExecutability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes32\",\"name\":\"_metadata\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"}],\"name\":\"createSwap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealManager\",\"outputs\":[{\"internalType\":\"contract IDealManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"executeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInBasisPoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_metadata\",\"type\":\"bytes32\"}],\"name\":\"getTokenswapFromMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"executionDate\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"internalType\":\"enum ModuleBase.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenSwapModule.TokenSwap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"hasDealExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"metadataToDealId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feeInBasisPoints\",\"type\":\"uint32\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSwaps\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"executionDate\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"internalType\":\"enum ModuleBase.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Smart contract to handle token swap        interactions for PrimeDeals\",\"kind\":\"dev\",\"methods\":{\"checkExecutability(uint32)\":{\"details\":\"Checks whether a token swap action can be executed (which is the case if all DAOs have deposited)\",\"params\":{\"_dealId\":\"The dealId of the action (position in the array)\"},\"returns\":{\"_0\":\"A bool flag indiciating whether the action can be executed\"}},\"createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)\":{\"details\":\"Create a new token swap action and automatically creates Dao Deposit Manager for each DAO that does not have one\",\"params\":{\"_daos\":\"Array containing the DAOs that are involed in this action\",\"_deadline\":\"Time until which this action can be executed (unix timestamp)\",\"_metadata\":\"Unique ID that is generated throught the Prime Deals frontend\",\"_pathFrom\":\"Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens\",\"_pathTo\":\"Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]\",\"_tokens\":\"Array containing the tokens that are involed in this action\"}},\"executeSwap(uint32)\":{\"details\":\"Executes a token swap action\",\"params\":{\"_dealId\":\"The dealId of the action (position in the array)\"}},\"setFee(uint32)\":{\"details\":\"Sets a new fee\",\"params\":{\"_feeInBasisPoints\":\"Fee amount in basis points (1% = 100)\"}},\"setFeeWallet(address)\":{\"details\":\"Sets a new fee wallet\",\"params\":{\"_feeWallet\":\"Address of the new fee wallet\"}}},\"title\":\"PrimeDeals Token Swap Module\",\"version\":1},\"userdoc\":{\"events\":{\"FeeChanged(uint32,uint32)\":{\"notice\":\"This event is emitted when the fee is updated\"},\"FeeWalletChanged(address,address)\":{\"notice\":\"This event is emitted when the fee wallet address is updated\"}},\"kind\":\"user\",\"methods\":{\"setFeeWallet(address)\":{\"notice\":\"The fee system will be inactive if the feeWallet                      is set to a zero-address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/tokenswap/TokenSwapModule.sol\":\"TokenSwapModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/interfaces/IDaoDepositManager.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDaoDepositManager {\\n    function initialize(address _dao) external;\\n\\n    function migrateBaseContract(address _newDaoDepositManager) external;\\n\\n    function deposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function multipleDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable;\\n\\n    function registerDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external;\\n\\n    function registerDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens\\n    ) external;\\n\\n    function withdraw(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId,\\n        address _sender\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function sendToModule(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function startVesting(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount,\\n        uint32 _vestingCliff,\\n        uint32 _vestingDuration\\n    ) external;\\n\\n    function claimVestings() external;\\n\\n    function verifyBalance(address _token) external view;\\n\\n    function getDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId\\n    )\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAvailableDealBalance(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getTotalDepositCount(address _dealModule, uint32 _dealId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableAmountOfUser(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getBalance(address _token) external view returns (uint256);\\n\\n    function getVestedBalance(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf866f748c278dfd67ad5b2ce3991c03ee81ce1893d611120827814c523c82000\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDealManager.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDealManager {\\n    function createDaoDepositManager(address _dao) external;\\n\\n    function hasDaoDepositManager(address _dao) external view returns (bool);\\n\\n    function getDaoDepositManager(address _dao) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function addressIsModule(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa31274c64c7a0b019b71ee0839fdbf5871a178275fbf483ee201e4743b5440d9\",\"license\":\"Unlicense\"},\"contracts/modules/ModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IDaoDepositManager.sol\\\";\\nimport \\\"../interfaces/IDealManager.sol\\\";\\n\\n/**\\n * @title PrimeDeals Module Base\\n * @dev   Smart contract to serve as the\\n          basis for each module\\n */\\ncontract ModuleBase {\\n    // Address of the DealManager implementation\\n    IDealManager public dealManager;\\n\\n    // @notics      Status of a deal\\n    // NULL         Uninitialized deal\\n    // ACTIVE       Deal has been created and is ready to be funded\\n    // CANCELLED    Deal has been canceld and is no longer valid\\n    // DONE         Deal has been executed\\n    enum Status {\\n        NULL,\\n        ACTIVE,\\n        CANCELLED,\\n        DONE\\n    }\\n\\n    /**\\n     * @dev                            Constructor\\n     * @param _dealManager             The address of DealManager implementation\\n     */\\n    constructor(address _dealManager) {\\n        require(\\n            _dealManager != address(0),\\n            \\\"Module: invalid base contract address\\\"\\n        );\\n        dealManager = IDealManager(_dealManager);\\n    }\\n\\n    /**\\n      * @dev                Sends tokens from a DAO deposit manager to the module\\n      * @param _dealId      ID of the action this is related to\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _path        Double nested array containing the amounts of tokens for each\\n                            token for each dao to be send\\n      * @return amountsIn   Array containing the total amounts sent per token\\n    */\\n    function _pullTokensIntoModule(\\n        uint32 _dealId,\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _path\\n    ) internal returns (uint256[] memory amountsIn) {\\n        amountsIn = new uint256[](_tokens.length);\\n        require(_path.length == _tokens.length, \\\"Module: length mismatch\\\");\\n        for (uint256 i; i < _tokens.length; ++i) {\\n            uint256[] memory tokenPath = _path[i];\\n            require(\\n                tokenPath.length == _daos.length,\\n                \\\"Module: length mismatch\\\"\\n            );\\n            for (uint256 j; j < tokenPath.length; ++j) {\\n                uint256 daoAmount = tokenPath[j];\\n                if (daoAmount > 0) {\\n                    amountsIn[i] += daoAmount;\\n                    IDaoDepositManager(\\n                        dealManager.getDaoDepositManager(_daos[j])\\n                    ).sendToModule(_dealId, _tokens[i], daoAmount);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev            Calls the approval function of a token\\n     * @param _token   Address of the token\\n     * @param _to      Target of the approval\\n     * @param _amount  Amount to be approved\\n     */\\n    function _approveToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(IERC20(_token).approve(_to, _amount), \\\"Module: approve failed\\\");\\n    }\\n\\n    /**\\n     * @dev            Calls the approval function of a token\\n                       for the deposit manager of a DAO\\n     * @param _token   Address of the token\\n     * @param _dao     DAO whose deposit manager is the target\\n     * @param _amount  Amount to be approved\\n     */\\n    function _approveDaoDepositManager(\\n        address _token,\\n        address _dao,\\n        uint256 _amount\\n    ) internal {\\n        _approveToken(_token, dealManager.getDaoDepositManager(_dao), _amount);\\n    }\\n\\n    /**\\n     * @dev            Transfers an amount of tokens\\n     * @param _token   Address of the token\\n     * @param _to      Target of the transfer\\n     * @param _amount  Amount to be sent\\n     */\\n    function _transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_token != address(0)) {\\n            try IERC20(_token).transfer(_to, _amount) returns (bool success) {\\n                require(success, \\\"Module: erc20 transfer was not successful\\\");\\n            } catch {\\n                revert(\\\"Module: erc20 transfer failed\\\");\\n            }\\n        } else {\\n            (bool sent, ) = _to.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"Module: eth transfer failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev            Transfers an amount of tokens from an address\\n     * @param _token   Address of the token\\n     * @param _from    Source of the transfer\\n     * @param _to      Target of the transfer\\n     * @param _amount  Amount to be sent\\n     */\\n    function _transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_token != address(0), \\\"Module: transferFrom only for ERC20s\\\");\\n\\n        try IERC20(_token).transferFrom(_from, _to, _amount) returns (\\n            bool success\\n        ) {\\n            require(success, \\\"Module: transferFrom was not successful\\\");\\n        } catch {\\n            revert(\\\"Module: transferFrom failed\\\");\\n        }\\n    }\\n\\n    function hasDealExpired(uint32 _dealId)\\n        external\\n        view\\n        virtual\\n        returns (bool)\\n    {}\\n}\\n\",\"keccak256\":\"0x9ae3e76ef22cc7ca59a87197d415ef0bb23f4df9a7a9245854bffd69d3779ae4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/ModuleBaseWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ModuleBase.sol\\\";\\n\\n/**\\n * @title PrimeDeals Module Base Fee Extension\\n * @dev   Smart contract to extend the module\\n          base with a fee mechanim\\n */\\ncontract ModuleBaseWithFee is ModuleBase {\\n    // Wallet that is receiving the fees\\n    address public feeWallet;\\n\\n    // Fee in basis points (100% = 10000)\\n    uint32 public feeInBasisPoints;\\n\\n    /**\\n     * @dev                        Constructor\\n     * @param _dealManager         The address of Dealmanager implementation\\n     */\\n    constructor(address _dealManager) ModuleBase(_dealManager) {}\\n\\n    /**\\n     * @notice                  This event is emitted when the fee wallet address is updated\\n     * @param oldFeeWallet      Address of the old fee wallet\\n     * @param newFeeWallet      Address of the new fee wallet\\n     */\\n    event FeeWalletChanged(\\n        address indexed oldFeeWallet,\\n        address indexed newFeeWallet\\n    );\\n\\n    /**\\n     * @notice                  This event is emitted when the fee is updated\\n     * @param oldFee            Old fee amount in basis points (1% = 100)\\n     * @param newFee            New fee in basis points (1% = 100) that is updated\\n     */\\n    event FeeChanged(uint32 indexed oldFee, uint32 indexed newFee);\\n\\n    /**\\n     * @dev                 Sets a new fee wallet\\n     * @param _feeWallet    Address of the new fee wallet\\n     * @notice              The fee system will be inactive if the feeWallet\\n     *                      is set to a zero-address\\n     */\\n    function setFeeWallet(address _feeWallet) external {\\n        require(msg.sender == dealManager.owner(), \\\"Fee: not authorized\\\");\\n        if (feeWallet != _feeWallet) {\\n            emit FeeWalletChanged(feeWallet, _feeWallet);\\n        }\\n        feeWallet = _feeWallet;\\n    }\\n\\n    /**\\n     * @dev                         Sets a new fee\\n     * @param _feeInBasisPoints     Fee amount in basis points (1% = 100)\\n     */\\n    function setFee(uint32 _feeInBasisPoints) external {\\n        require(msg.sender == dealManager.owner(), \\\"Fee: not authorized\\\");\\n        require(_feeInBasisPoints <= 2000, \\\"Fee: can't be more than 20%\\\");\\n        if (feeInBasisPoints != _feeInBasisPoints) {\\n            emit FeeChanged(feeInBasisPoints, _feeInBasisPoints);\\n        }\\n        feeInBasisPoints = _feeInBasisPoints;\\n    }\\n\\n    /**\\n     * @dev             Pays the fee in a token and returns the remainder\\n     * @param _token    Token in which the transfer happens\\n     * @param _amount   Amount of the transfer\\n     * @return          Remaining amount after the fee payment\\n     */\\n    function _payFeeAndReturnRemainder(address _token, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (feeWallet != address(0) && feeInBasisPoints > 0) {\\n            uint256 fee = (_amount * feeInBasisPoints) / 10000;\\n            _transfer(_token, feeWallet, fee);\\n\\n            return _amount - fee;\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @dev             Transfers a token amount with automated fee payment\\n     * @param _token    Token in which the transfer happens\\n     * @param _to       Target of the transfer\\n     * @param _amount   Amount of the transfer\\n     */\\n    function _transferWithFee(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256 amountAfterFee) {\\n        amountAfterFee = _payFeeAndReturnRemainder(_token, _amount);\\n        _transfer(_token, _to, amountAfterFee);\\n    }\\n\\n    /**\\n     * @dev             Transfers a token amount from someone with \\n                        automated fee payment\\n     * @param _token    Token in which the transfer happens\\n     * @param _from     Source of the transfer\\n     * @param _to       Target of the transfer\\n     * @param _amount   Amount of the transfer\\n     */\\n    function _transferFromWithFee(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256 amountAfterFee) {\\n        // if the transfer from does not touch this contract, we first\\n        // need to transfer it here, pay the fee, and then pass it on\\n        // if that is not the case, we can do the regular transferFrom\\n        if (_to != address(this)) {\\n            _transferFrom(_token, _from, _to, _amount);\\n            amountAfterFee = _transferWithFee(_token, _to, _amount);\\n        } else {\\n            _transferFrom(_token, _from, _to, _amount);\\n            amountAfterFee = _payFeeAndReturnRemainder(_token, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xffefaccec289791be153f2f1a47156fc7f4556abe32ffd843e474f9f67caa3e5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/tokenswap/TokenSwapModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../ModuleBaseWithFee.sol\\\";\\n\\n/**\\n * @title PrimeDeals Token Swap Module\\n * @dev   Smart contract to handle token swap\\n *        interactions for PrimeDeals\\n */\\ncontract TokenSwapModule is ModuleBaseWithFee {\\n    TokenSwap[] public tokenSwaps;\\n    mapping(bytes32 => uint32) public metadataToDealId;\\n\\n    /**\\n     * @dev\\n     * pathFrom Description:\\n     * Used to storing how many tokens does each DAO send to the module\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> amount\\n     * [[123, 0, 123], [0, 123, 0]]\\n     * token 1: DAO 1 sends 123, DAO 2 sends 0, DAO 3 sends 123, etc.\\n     */\\n\\n    /**\\n     * @dev\\n     * pathTo:\\n     * Used for storing how many tokens does each DAO receive from the module\\n     * includes vesting. For each DAO there is a tuple of four values:\\n     * instant amount, vested amount, vesting cliff, vesting duration.\\n     * The start time will be the block.timestamp when executing the deal.\\n     * This timestamp + vestingDuration can be used to calculate the vesting end.\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> tuple(4)\\n     * [[instantAmount_dao1, vestedAmount_dao1, vestingCliff_dao1,\\n     * vestingDuration_dao1, instantAmount_dao2, ...], [...]]\\n     */\\n\\n    struct TokenSwap {\\n        // The participating DAOs\\n        address[] daos;\\n        // The tokens involved in the swap\\n        address[] tokens;\\n        // the token flow from the DAOs to the module\\n        uint256[][] pathFrom;\\n        // the token flow from the module to the DAO\\n        uint256[][] pathTo;\\n        // unix timestamp of the deadline\\n        uint32 deadline;\\n        // unix timestamp of the execution\\n        uint32 executionDate;\\n        // hash of the deal information.\\n        bytes32 metadata;\\n        // status of the deal\\n        Status status;\\n    }\\n\\n    event TokenSwapCreated(\\n        address indexed module,\\n        uint32 indexed dealId,\\n        bytes32 indexed metadata,\\n        address[] daos,\\n        address[] tokens,\\n        uint256[][] pathFrom,\\n        uint256[][] pathTo,\\n        uint32 deadline\\n    );\\n\\n    event TokenSwapExecuted(\\n        address indexed module,\\n        uint32 indexed dealId,\\n        bytes32 indexed metadata\\n    );\\n\\n    constructor(address _dealManager) ModuleBaseWithFee(_dealManager) {}\\n\\n    /**\\n      * @dev                Create a new token swap action\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains absolute numbers of tokens\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains a tuple(4) consisting of instant amount, vested \\n                                amount, vesting start, vesting end which then makes this \\n                                array look like:\\n                                [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1,\\n                                vestingEnd_dao1, instantAmount_dao2, ...], [...]]\\n      *@param _metadata     Unique ID that is generated throught the Prime Deals frontend\\n      * @param _deadline    Time until which this action can be executed (unix timestamp)\\n      * @return             The dealId of the new action\\n    */\\n    function _createSwap(\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _pathFrom,\\n        uint256[][] memory _pathTo,\\n        bytes32 _metadata,\\n        uint32 _deadline\\n    ) internal returns (uint32) {\\n        if (tokenSwaps.length >= 1) {\\n            require(\\n                _metadataDoesNotExist(_metadata),\\n                \\\"Module: metadata already exists\\\"\\n            );\\n        }\\n        require(_daos.length >= 2, \\\"Module: at least 2 daos required\\\");\\n        require(_tokens.length != 0, \\\"Module: at least 1 token required\\\");\\n\\n        // Check outer arrays\\n        uint256 pathFromLen = _pathFrom.length;\\n        require(\\n            _tokens.length == pathFromLen && pathFromLen == _pathTo.length,\\n            \\\"Module: invalid outer array lengths\\\"\\n        );\\n\\n        // Check inner arrays\\n        uint256 daosLen = _daos.length;\\n        for (uint256 i; i < pathFromLen; ++i) {\\n            require(\\n                _pathFrom[i].length == daosLen &&\\n                    _pathTo[i].length >> 2 == daosLen,\\n                \\\"Module: invalid inner array lengths\\\"\\n            );\\n        }\\n\\n        require(_deadline > block.timestamp, \\\"Module: invalid deadline\\\");\\n\\n        TokenSwap memory ts = TokenSwap(\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline,\\n            0,\\n            _metadata,\\n            Status.ACTIVE\\n        );\\n        tokenSwaps.push(ts);\\n\\n        uint32 dealId = uint32(tokenSwaps.length - 1);\\n\\n        metadataToDealId[_metadata] = dealId;\\n\\n        emit TokenSwapCreated(\\n            address(this),\\n            dealId,\\n            ts.metadata,\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline\\n        );\\n        return dealId;\\n    }\\n\\n    /**\\n      * @dev                Create a new token swap action and automatically\\n                            creates Dao Deposit Manager for each DAO that does not have one\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains absolute numbers of tokens\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains a tuple(4) consisting of instant amount, vested \\n                                amount, vesting start, vesting end which then makes this \\n                                array look like:\\n                                [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1,\\n                                vestingEnd_dao1, instantAmount_dao2, ...], [...]]\\n      *@param _metadata     Unique ID that is generated throught the Prime Deals frontend\\n      * @param _deadline    Time until which this action can be executed (unix timestamp)\\n    */\\n    function createSwap(\\n        address[] calldata _daos,\\n        address[] calldata _tokens,\\n        uint256[][] calldata _pathFrom,\\n        uint256[][] calldata _pathTo,\\n        bytes32 _metadata,\\n        uint32 _deadline\\n    ) external returns (uint32) {\\n        for (uint256 i; i < _daos.length; ++i) {\\n            address dao = _daos[i];\\n            if (!dealManager.hasDaoDepositManager(dao)) {\\n                dealManager.createDaoDepositManager(dao);\\n            }\\n        }\\n        return (\\n            _createSwap(\\n                _daos,\\n                _tokens,\\n                _pathFrom,\\n                _pathTo,\\n                _metadata,\\n                _deadline\\n            )\\n        );\\n    }\\n\\n    /**\\n      * @dev            Checks whether a token swap action can be executed\\n                        (which is the case if all DAOs have deposited)\\n      * @param _dealId  The dealId of the action (position in the array)\\n      * @return         A bool flag indiciating whether the action can be executed\\n    */\\n    function checkExecutability(uint32 _dealId)\\n        public\\n        view\\n        validDealId(_dealId)\\n        returns (bool)\\n    {\\n        TokenSwap memory ts = tokenSwaps[_dealId];\\n        if (ts.status != Status.ACTIVE) {\\n            return false;\\n        }\\n        if (ts.deadline < uint32(block.timestamp)) {\\n            return false;\\n        }\\n\\n        address[] memory t = ts.tokens;\\n        for (uint256 i; i < t.length; ++i) {\\n            uint256[] memory p = ts.pathFrom[i];\\n            for (uint256 j; j < p.length; ++j) {\\n                if (p[j] == 0) {\\n                    continue;\\n                }\\n                // for each token and each pathFrom entry for this\\n                // token, check whether the corresponding DAO\\n                // has deposited the corresponding amount into their\\n                // deposit contract\\n                uint256 bal = IDaoDepositManager(\\n                    dealManager.getDaoDepositManager(ts.daos[j])\\n                ).getAvailableDealBalance(address(this), _dealId, t[i]);\\n                if (bal < p[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev            Executes a token swap action\\n     * @param _dealId  The dealId of the action (position in the array)\\n     */\\n    function executeSwap(uint32 _dealId)\\n        external\\n        validDealId(_dealId)\\n        activeStatus(_dealId)\\n    {\\n        TokenSwap storage ts = tokenSwaps[_dealId];\\n\\n        require(ts.deadline >= uint32(block.timestamp), \\\"Module: swap expired\\\");\\n        require(checkExecutability(_dealId), \\\"Module: swap not executable\\\");\\n\\n        // transfer the tokens from the deposit manager of the DAOs\\n        // into this module\\n        uint256[] memory amountsIn = _pullTokensIntoModule(\\n            _dealId,\\n            ts.daos,\\n            ts.tokens,\\n            ts.pathFrom\\n        );\\n\\n        // distribute the tokens from this module to the DAOs\\n        // and (if applicable) and their vesting contracts\\n        uint256[] memory amountsOut = _distributeTokens(ts, _dealId);\\n\\n        // verify whether the amounts being pulled and pushed match\\n        for (uint256 i; i < ts.tokens.length; ++i) {\\n            require(amountsIn[i] == amountsOut[i], \\\"Module: amount mismatch\\\");\\n        }\\n\\n        ts.status = Status.DONE;\\n        ts.executionDate = uint32(block.timestamp);\\n        emit TokenSwapExecuted(address(this), _dealId, ts.metadata);\\n    }\\n\\n    /**\\n      * @dev                Distributes the tokens based on the supplied\\n                            information to the DAOs or their vesting contracts\\n      * @param _ts          TokenSwap object containing all the information\\n                            of the action\\n      * @param _dealId      The dealId of the action (position in the array)\\n      * @return amountsOut  The two min values for the token amounts _ts\\n    */\\n    function _distributeTokens(TokenSwap memory _ts, uint32 _dealId)\\n        internal\\n        returns (uint256[] memory amountsOut)\\n    {\\n        amountsOut = new uint256[](_ts.tokens.length);\\n        // Distribute tokens from the module\\n        for (uint256 i; i < _ts.tokens.length; ++i) {\\n            uint256[] memory pt = _ts.pathTo[i];\\n            address token = _ts.tokens[i];\\n            for (uint256 k; k < pt.length >> 2; ++k) {\\n                // every 4 values, the values for a new dao start\\n                // value 0 = instant amount\\n                // value 1 = vested amount\\n                // value 2 = vesting cliff\\n                // value 3 = vesting duration\\n                uint256 instant = pt[k << 2];\\n                uint256 vested = pt[(k << 2) + 1];\\n\\n                if (instant > 0) {\\n                    amountsOut[i] += instant;\\n                    _transferWithFee(token, _ts.daos[k], instant);\\n                }\\n\\n                if (vested > 0) {\\n                    amountsOut[i] += vested;\\n                    uint256 amount = _payFeeAndReturnRemainder(token, vested);\\n                    address daoDepositManager = dealManager\\n                        .getDaoDepositManager(_ts.daos[k]);\\n                    if (token == address(0)) {\\n                        // for ETH we need to manually send, since\\n                        // startVesting() works with transferFrom's\\n                        _transfer(token, daoDepositManager, amount);\\n                    } else {\\n                        _approveDaoDepositManager(token, _ts.daos[k], amount);\\n                    }\\n\\n                    IDaoDepositManager(daoDepositManager).startVesting(\\n                        _dealId,\\n                        token,\\n                        amount, // amount\\n                        uint32(pt[(k << 2) + 2]), // start\\n                        uint32(pt[(k << 2) + 3]) // end\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function getTokenswapFromMetadata(bytes32 _metadata)\\n        public\\n        view\\n        validMetadata(_metadata)\\n        returns (TokenSwap memory swap)\\n    {\\n        return tokenSwaps[metadataToDealId[_metadata]];\\n    }\\n\\n    function hasDealExpired(uint32 _dealId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            tokenSwaps[_dealId].status != Status.ACTIVE ||\\n            tokenSwaps[_dealId].deadline < uint32(block.timestamp);\\n    }\\n\\n    function _metadataDoesNotExist(bytes32 _metadata)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 dealId = metadataToDealId[_metadata];\\n        return (dealId == 0 &&\\n            tokenSwaps[dealId].metadata != _metadata &&\\n            _metadata.length > 0);\\n    }\\n\\n    modifier validMetadata(bytes32 _metadata) {\\n        uint256 dealId = metadataToDealId[_metadata];\\n        require(\\n            dealId != 0 || tokenSwaps[dealId].metadata == _metadata,\\n            \\\"Module: metadata does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validDealId(uint32 _dealId) {\\n        require(_dealId < tokenSwaps.length, \\\"Module: dealId doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier activeStatus(uint32 _dealId) {\\n        require(\\n            tokenSwaps[_dealId].status == Status.ACTIVE,\\n            \\\"Module: dealId not active\\\"\\n        );\\n        _;\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x58a06ed5147eb44c8b3065fef0348831f907401b238d20385f58ad9f0a7a1211\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Smart contract to handle token swap        interactions for PrimeDeals",
    "kind": "dev",
    "methods": {
      "checkExecutability(uint32)": {
        "details": "Checks whether a token swap action can be executed (which is the case if all DAOs have deposited)",
        "params": {
          "_dealId": "The dealId of the action (position in the array)"
        },
        "returns": {
          "_0": "A bool flag indiciating whether the action can be executed"
        }
      },
      "createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)": {
        "details": "Create a new token swap action and automatically creates Dao Deposit Manager for each DAO that does not have one",
        "params": {
          "_daos": "Array containing the DAOs that are involed in this action",
          "_deadline": "Time until which this action can be executed (unix timestamp)",
          "_metadata": "Unique ID that is generated throught the Prime Deals frontend",
          "_pathFrom": "Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens",
          "_pathTo": "Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]",
          "_tokens": "Array containing the tokens that are involed in this action"
        }
      },
      "executeSwap(uint32)": {
        "details": "Executes a token swap action",
        "params": {
          "_dealId": "The dealId of the action (position in the array)"
        }
      },
      "setFee(uint32)": {
        "details": "Sets a new fee",
        "params": {
          "_feeInBasisPoints": "Fee amount in basis points (1% = 100)"
        }
      },
      "setFeeWallet(address)": {
        "details": "Sets a new fee wallet",
        "params": {
          "_feeWallet": "Address of the new fee wallet"
        }
      }
    },
    "title": "PrimeDeals Token Swap Module",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeeChanged(uint32,uint32)": {
        "notice": "This event is emitted when the fee is updated"
      },
      "FeeWalletChanged(address,address)": {
        "notice": "This event is emitted when the fee wallet address is updated"
      }
    },
    "kind": "user",
    "methods": {
      "setFeeWallet(address)": {
        "notice": "The fee system will be inactive if the feeWallet                      is set to a zero-address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3920,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "dealManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IDealManager)3083"
      },
      {
        "astId": 4226,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeWallet",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4228,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeInBasisPoints",
        "offset": 20,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 7222,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "tokenSwaps",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(TokenSwap)7250_storage)dyn_storage"
      },
      {
        "astId": 7226,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "metadataToDealId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenSwap)7250_storage)dyn_storage": {
        "base": "t_struct(TokenSwap)7250_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenSwapModule.TokenSwap[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDealManager)3083": {
        "encoding": "inplace",
        "label": "contract IDealManager",
        "numberOfBytes": "20"
      },
      "t_enum(Status)3925": {
        "encoding": "inplace",
        "label": "enum ModuleBase.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(TokenSwap)7250_storage": {
        "encoding": "inplace",
        "label": "struct TokenSwapModule.TokenSwap",
        "members": [
          {
            "astId": 7229,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "daos",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7232,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7236,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathFrom",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7240,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathTo",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7242,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 7244,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "executionDate",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 7246,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "metadata",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 7249,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(Status)3925"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}