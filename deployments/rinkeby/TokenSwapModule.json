{
  "address": "0xd7deC2320B7FC1018896C31E433b2E51fdD8C3Af",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dealManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldFee",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldFeeWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeWallet",
          "type": "address"
        }
      ],
      "name": "FeeWalletChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadata",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "daos",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathFrom",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathTo",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        }
      ],
      "name": "TokenSwapCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadata",
          "type": "bytes32"
        }
      ],
      "name": "TokenSwapExecuted",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "checkExecutability",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_daos",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathFrom",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathTo",
          "type": "uint256[][]"
        },
        {
          "internalType": "bytes32",
          "name": "_metadata",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        }
      ],
      "name": "createSwap",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dealManager",
      "outputs": [
        {
          "internalType": "contract IDealManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "executeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeInBasisPoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_metadata",
          "type": "bytes32"
        }
      ],
      "name": "getTokenswapFromMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "daos",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathFrom",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathTo",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "executionDate",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "metadata",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "isExecuted",
              "type": "bool"
            }
          ],
          "internalType": "struct TokenSwapModule.TokenSwap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "hasDealExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "metadataToDealId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_feeInBasisPoints",
          "type": "uint32"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeWallet",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "tokenSwaps",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "executionDate",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "metadata",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isExecuted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2e3d4427eda3cfe9105415c0c204a053db17d905715112d8594324e6d5dcaee0",
  "receipt": {
    "to": null,
    "from": "0xc039897eE5A0d14A3d1F212922FaF7e159Ab619F",
    "contractAddress": "0xd7deC2320B7FC1018896C31E433b2E51fdD8C3Af",
    "transactionIndex": 25,
    "gasUsed": "2690746",
    "logsBloom": "0x
    "blockHash": "0x40d5eadcc4ee4891a7c66ec3575b17e793bbf0b05f63e144598d996fba2d3fb3",
    "transactionHash": "0x2e3d4427eda3cfe9105415c0c204a053db17d905715112d8594324e6d5dcaee0",
    "logs": [],
    "blockNumber": 10578516,
    "cumulativeGasUsed": "8244769",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb32Dd0C93673cF0A3237D362f0a65b047469DC29"
  ],
  "solcInputHash": "935a8e204a352cd41cd0a74fdfb93581",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dealManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldFee\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"}],\"name\":\"TokenSwapCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"TokenSwapExecuted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"checkExecutability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes32\",\"name\":\"_metadata\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"}],\"name\":\"createSwap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealManager\",\"outputs\":[{\"internalType\":\"contract IDealManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"executeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInBasisPoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_metadata\",\"type\":\"bytes32\"}],\"name\":\"getTokenswapFromMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"executionDate\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"}],\"internalType\":\"struct TokenSwapModule.TokenSwap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"hasDealExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"metadataToDealId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feeInBasisPoints\",\"type\":\"uint32\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"tokenSwaps\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"executionDate\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"TokenSwapCreated(address,uint32,bytes32,address[],address[],uint256[][],uint256[][],uint32)\":{\"params\":{\"daos\":\"Array containing the DAOs that are involed in creating the token swap\",\"deadline\":\"The amount of time between the creation of the swap and the time when it can no longer be executed, in seconds\",\"dealId\":\"Deal id for the created token swap\",\"metadata\":\"Unique ID that is generated throught the Prime Deals frontend\",\"module\":\"Address of this module\",\"pathFrom\":\"Two-dimensional array containing the tokens flowing from the DAOs into the module\",\"pathTo\":\"Two-dimensional array containing the tokens flowing from the module to the DAOs\",\"tokens\":\"Array containing the tokens that are involed in creating the token swap\"}},\"TokenSwapExecuted(address,uint32,bytes32)\":{\"params\":{\"dealId\":\"Deal id for the executed token swap\",\"metadata\":\"Unique ID that is generated throught the Prime Deals frontend\",\"module\":\"Address of this module\"}}},\"kind\":\"dev\",\"methods\":{\"checkExecutability(uint32)\":{\"params\":{\"_dealId\":\"The dealId of the action (key to the mapping)\"},\"returns\":{\"_0\":\"bool        A bool flag indiciating whether the action can be executed\"}},\"createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)\":{\"params\":{\"_daos\":\"Array containing the DAOs that are involed in this action\",\"_deadline\":\"The amount of time between the creation of the swap and the time when it can no longer be executed, in seconds\",\"_metadata\":\"Unique ID that is generated throught the Prime Deals frontend\",\"_pathFrom\":\"Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Detailed overview on how to configure the array can be found at the TokenSwap struct description\",\"_pathTo\":\"Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Detailed overview on how to configure the array can be found at the TokenSwap struct description\",\"_tokens\":\"Array containing the tokens that are involed in this action\"},\"returns\":{\"_0\":\"uin32       The dealId of the new token swap\"}},\"executeSwap(uint32)\":{\"params\":{\"_dealId\":\"The dealId of the action (key to the mapping)\"}},\"getTokenswapFromMetadata(bytes32)\":{\"params\":{\"_metadata\":\"Unique ID that is generated throught the Prime Deals frontend\"},\"returns\":{\"swap\":\"        Token swap struct associated with the metadata\"}},\"hasDealExpired(uint32)\":{\"params\":{\"_dealId\":\"The dealId of the action (key to the mapping)\"},\"returns\":{\"_0\":\"bool         A bool flag indiciating whether token swap has expired\"}},\"setFee(uint32)\":{\"params\":{\"_feeInBasisPoints\":\"Fee amount in basis points (1% = 100)\"}},\"setFeeWallet(address)\":{\"details\":\"The fee system will be inactive if the feeWallet is set to a zero-address\",\"params\":{\"_feeWallet\":\"Address of the new fee wallet\"}}},\"title\":\"PrimeDeals Token Swap Module\",\"version\":1},\"userdoc\":{\"events\":{\"FeeChanged(uint32,uint32)\":{\"notice\":\"This event is emitted when the fee is updated\"},\"FeeWalletChanged(address,address)\":{\"notice\":\"This event is emitted when the fee wallet address is updated\"},\"TokenSwapCreated(address,uint32,bytes32,address[],address[],uint256[][],uint256[][],uint32)\":{\"notice\":\"This event is emitted when a token swap is created\"},\"TokenSwapExecuted(address,uint32,bytes32)\":{\"notice\":\"This event is emitted when a token swap is executed\"}},\"kind\":\"user\",\"methods\":{\"checkExecutability(uint32)\":{\"notice\":\"Checks whether a token swap action can be executed, which is the case if all DAOs have deposited\"},\"createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)\":{\"notice\":\"Create a new token swap action and automatically creates Dao Deposit Manager for each DAO that does not have one\"},\"dealManager()\":{\"notice\":\"Address of the DealManager implementation\"},\"executeSwap(uint32)\":{\"notice\":\"Executes a token swap action\"},\"feeInBasisPoints()\":{\"notice\":\"Fee in basis points (100% = 10000)\"},\"feeWallet()\":{\"notice\":\"Wallet that is receiving the fees\"},\"getTokenswapFromMetadata(bytes32)\":{\"notice\":\"Returns the TokenSwap struct associated with the metadata\"},\"hasDealExpired(uint32)\":{\"notice\":\"Checks if the deal has been expired\"},\"metadataToDealId(bytes32)\":{\"notice\":\"Metadata => deal ID\"},\"setFee(uint32)\":{\"notice\":\"Sets a new fee\"},\"setFeeWallet(address)\":{\"notice\":\"Sets a new fee wallet\"}},\"notice\":\"Smart contract to handle token swap interactions for PrimeDeals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/tokenswap/TokenSwapModule.sol\":\"TokenSwapModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/interfaces/IDaoDepositManager.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDaoDepositManager {\\n    function dealManager() external returns (address);\\n\\n    function initialize(address _dao) external;\\n\\n    function migrateBaseContract(address _newDaoDepositManager) external;\\n\\n    function deposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function multipleDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable;\\n\\n    function registerDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external;\\n\\n    function registerDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens\\n    ) external;\\n\\n    function withdraw(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId,\\n        address _sender\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function sendToModule(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function startVesting(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount,\\n        uint32 _vestingCliff,\\n        uint32 _vestingDuration\\n    ) external payable;\\n\\n    function claimVestings() external;\\n\\n    function verifyBalance(address _token) external view;\\n\\n    function getDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId\\n    )\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAvailableDealBalance(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getTotalDepositCount(address _dealModule, uint32 _dealId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableAmountOfDepositor(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getBalance(address _token) external view returns (uint256);\\n\\n    function getVestedBalance(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x29c9f50be2915121839e0888cf251ac13eb3890240498987811f34e1b69fc939\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDealManager.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDealManager {\\n    function createDaoDepositManager(address _dao) external;\\n\\n    function hasDaoDepositManager(address _dao) external view returns (bool);\\n\\n    function getDaoDepositManager(address _dao) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function addressIsModule(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa31274c64c7a0b019b71ee0839fdbf5871a178275fbf483ee201e4743b5440d9\",\"license\":\"Unlicense\"},\"contracts/modules/ModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IDaoDepositManager.sol\\\";\\nimport \\\"../interfaces/IDealManager.sol\\\";\\n\\n/**\\n * @title                   PrimeDeals Module Base\\n * @notice                  Smart contract to serve as the\\n                            basis for each module\\n */\\ncontract ModuleBase {\\n    /// Address of the DealManager implementation\\n    IDealManager public immutable dealManager;\\n\\n    /**\\n     * @notice              Constructor\\n     * @param _dealManager  The address of DealManager implementation\\n     */\\n    constructor(address _dealManager) {\\n        require(_dealManager != address(0), \\\"ModuleBase: Error 100\\\");\\n        dealManager = IDealManager(_dealManager);\\n    }\\n\\n    /**\\n      * @notice             Sends tokens from a DAO deposit manager to the module\\n      * @param _dealId      ID of the action this is related to\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _path        Double nested array containing the amounts of tokens for each\\n                            token for each dao to be send\\n      * @return amountsIn   Array containing the total amounts sent per token\\n    */\\n    function _pullTokensIntoModule(\\n        uint32 _dealId,\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _path\\n    ) internal returns (uint256[] memory amountsIn) {\\n        amountsIn = new uint256[](_tokens.length);\\n        require(_path.length == _tokens.length, \\\"ModuleBase: Error 102\\\");\\n        for (uint256 i; i < _tokens.length; ++i) {\\n            uint256[] memory tokenPath = _path[i];\\n            require(tokenPath.length == _daos.length, \\\"ModuleBase: Error 102\\\");\\n            for (uint256 j; j < tokenPath.length; ++j) {\\n                uint256 daoAmount = tokenPath[j];\\n                if (daoAmount > 0) {\\n                    amountsIn[i] += daoAmount;\\n                    IDaoDepositManager(\\n                        dealManager.getDaoDepositManager(_daos[j])\\n                    ).sendToModule(_dealId, _tokens[i], daoAmount);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice              Calls the approval function of a token\\n     * @param _token        Address of the token\\n     * @param _to           Target of the approval\\n     * @param _amount       Amount to be approved\\n     */\\n    function _approveToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(IERC20(_token).approve(_to, _amount), \\\"ModuleBase: Error 243\\\");\\n    }\\n\\n    /**\\n     * @notice              Calls the approval function of a token\\n                            for the deposit manager of a DAO\\n     * @param _token        Address of the token\\n     * @param _dao          DAO whose deposit manager is the target\\n     * @param _amount       Amount to be approved\\n     */\\n    function _approveDaoDepositManager(\\n        address _token,\\n        address _dao,\\n        uint256 _amount\\n    ) internal {\\n        _approveToken(_token, dealManager.getDaoDepositManager(_dao), _amount);\\n    }\\n\\n    /**\\n     * @notice              Transfers an amount of tokens\\n     * @param _token        Address of the token\\n     * @param _to           Target of the transfer\\n     * @param _amount       Amount to be sent\\n     */\\n    function _transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_token != address(0)) {\\n            try IERC20(_token).transfer(_to, _amount) returns (bool success) {\\n                require(success, \\\"ModuleBase: Error 241\\\");\\n            } catch {\\n                revert(\\\"ModuleBase: Error 241\\\");\\n            }\\n        } else {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool sent, ) = _to.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"ModuleBase: Error 242\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice              Transfers an amount of tokens from an address\\n     * @param _token        Address of the token\\n     * @param _from         Source of the transfer\\n     * @param _to           Target of the transfer\\n     * @param _amount       Amount to be sent\\n     */\\n    function _transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_token != address(0), \\\"ModuleBase: Error 263\\\");\\n\\n        try IERC20(_token).transferFrom(_from, _to, _amount) returns (\\n            bool success\\n        ) {\\n            require(success, \\\"ModuleBase: Error 241\\\");\\n        } catch {\\n            revert(\\\"ModuleBase: Error 241\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice              Checks if the deal has been expired\\n     * @param _dealId       The dealId of the action (position in the array)\\n     * @return bool         A bool flag indiciating whether deal has expired\\n     */\\n    function hasDealExpired(uint32 _dealId)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    // solhint-disable-next-line no-empty-blocks\\n    {\\n\\n    }\\n}\\n\",\"keccak256\":\"0xb03e009e8964bd549edf413a6fccba6d20e463f71f92f732562a6eab4aec4597\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/ModuleBaseWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ModuleBase.sol\\\";\\n\\n/**\\n * @title                   PrimeDeals Module Base Fee Extension\\n * @notice                  Smart contract to extend the module\\n                            base with a fee mechanim\\n */\\ncontract ModuleBaseWithFee is ModuleBase {\\n    /// Wallet that is receiving the fees\\n    address public feeWallet;\\n    /// Fee in basis points (100% = 10000)\\n    uint32 public feeInBasisPoints;\\n    // Max fee 20%\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint32 public immutable MAX_FEE = 2000;\\n\\n    // Percentage precision to calculate the fee\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 public immutable BPS = 10000;\\n\\n    /**\\n     * @notice              Constructor\\n     * @param _dealManager  The address of Dealmanager implementation\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address _dealManager) ModuleBase(_dealManager) {}\\n\\n    /**\\n     * @notice              This event is emitted when the fee wallet address is updated\\n     * @param oldFeeWallet  Address of the old fee wallet\\n     * @param newFeeWallet  Address of the new fee wallet\\n     */\\n    event FeeWalletChanged(\\n        address indexed oldFeeWallet,\\n        address indexed newFeeWallet\\n    );\\n\\n    /**\\n     * @notice              This event is emitted when the fee is updated\\n     * @param oldFee        Old fee amount in basis points (1% = 100)\\n     * @param newFee        New fee in basis points (1% = 100) that is updated\\n     */\\n    event FeeChanged(uint32 indexed oldFee, uint32 indexed newFee);\\n\\n    /**\\n     * @notice              Sets a new fee wallet\\n     * @param _feeWallet    Address of the new fee wallet\\n     * @dev                 The fee system will be inactive if the feeWallet\\n                            is set to a zero-address\\n     */\\n    function setFeeWallet(address _feeWallet)\\n        external\\n        onlyDealManagerOwner(msg.sender)\\n    {\\n        require(\\n            _feeWallet != address(0) && _feeWallet != address(this),\\n            \\\"ModuleBaseWithFee: Error 100\\\"\\n        );\\n        if (feeWallet != _feeWallet) {\\n            feeWallet = _feeWallet;\\n            emit FeeWalletChanged(feeWallet, _feeWallet);\\n        }\\n    }\\n\\n    /**\\n     * @notice                      Sets a new fee\\n     * @param _feeInBasisPoints     Fee amount in basis points (1% = 100)\\n     */\\n    function setFee(uint32 _feeInBasisPoints)\\n        external\\n        onlyDealManagerOwner(msg.sender)\\n    {\\n        require(_feeInBasisPoints <= MAX_FEE, \\\"ModuleBaseWithFee: Error 264\\\");\\n        if (feeInBasisPoints != _feeInBasisPoints) {\\n            feeInBasisPoints = _feeInBasisPoints;\\n            emit FeeChanged(feeInBasisPoints, _feeInBasisPoints);\\n        }\\n    }\\n\\n    /**\\n     * @notice              Pays the fee in a token and returns the remainder\\n     * @param _token        Token in which the transfer happens\\n     * @param _amount       Amount of the transfer\\n     * @return uint256      Remaining amount after the fee payment\\n     */\\n    function _payFeeAndReturnRemainder(address _token, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (feeWallet != address(0) && feeInBasisPoints > 0) {\\n            uint256 fee = (_amount * feeInBasisPoints) / BPS;\\n            _transfer(_token, feeWallet, fee);\\n\\n            return _amount - fee;\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice                  Transfers a token amount with automated fee payment\\n     * @param _token            Token in which the transfer happens\\n     * @param _to               Target of the transfer\\n     * @param _amount           Amount of the transfer\\n     * @return amountAfterFee   The amount minus the fee\\n     */\\n    function _transferWithFee(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256 amountAfterFee) {\\n        amountAfterFee = _payFeeAndReturnRemainder(_token, _amount);\\n        _transfer(_token, _to, amountAfterFee);\\n    }\\n\\n    /**\\n     * @notice                  Transfers a token amount from someone with automated fee payment\\n     * @param _token            Token in which the transfer happens\\n     * @param _from             Source of the transfer\\n     * @param _to               Target of the transfer\\n     * @param _amount           Amount of the transfer\\n     * @return amountAfterFee   The amount minus the fee\\n     */\\n    function _transferFromWithFee(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256 amountAfterFee) {\\n        // if the transfer from does not touch this contract, we first\\n        // need to transfer it here, pay the fee, and then pass it on\\n        // if that is not the case, we can do the regular transferFrom\\n        if (_to != address(this)) {\\n            _transferFrom(_token, _from, address(this), _amount);\\n            amountAfterFee = _transferWithFee(_token, _to, _amount);\\n        } else {\\n            _transferFrom(_token, _from, _to, _amount);\\n            amountAfterFee = _payFeeAndReturnRemainder(_token, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice              Modifier that validates that the msg.sender\\n                            is the DealManager contract\\n     * @param _sender       Msg.sender of the function that is called\\n     */\\n    modifier onlyDealManagerOwner(address _sender) {\\n        require(_sender == dealManager.owner(), \\\"ModuleBaseWithFee: Error 221\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x88aac8a97c2e1f0dde0288c6aaba183ac259c8eff16dd74e897f6823288c9e77\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/tokenswap/TokenSwapModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../ModuleBaseWithFee.sol\\\";\\n\\n/**\\n * @title                   PrimeDeals Token Swap Module\\n * @notice                  Smart contract to handle token swap\\n                            interactions for PrimeDeals\\n */\\ncontract TokenSwapModule is ModuleBaseWithFee {\\n    uint32 lastDealId;\\n    // mapping of token swaps where the key is a dealId\\n    mapping(uint32 => TokenSwap) public tokenSwaps;\\n    /// Metadata => deal ID\\n    mapping(bytes32 => uint32) public metadataToDealId;\\n\\n    /**\\n     * @dev\\n     * pathFrom Description:\\n     * Used to storing how many tokens does each DAO send to the module\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> amount\\n     * [[123, 0, 123], [0, 123, 0]]\\n     * token 1: DAO 1 sends 123, DAO 2 sends 0, DAO 3 sends 123, etc.\\n     *\\n     * pathTo Description:\\n     * Used for storing how many tokens does each DAO receive from the module\\n     * includes vesting. For each DAO there is a tuple of four values:\\n     * instant amount, vested amount, vesting cliff, vesting duration.\\n     * The start time will be the block.timestamp when executing the deal.\\n     * This timestamp + vestingDuration can be used to calculate the vesting end.\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> tuple(4)\\n     * [[instantAmount_dao1, vestedAmount_dao1, vestingCliff_dao1,\\n     * vestingDuration_dao1, instantAmount_dao2, ...], [...]]\\n     */\\n    struct TokenSwap {\\n        /// The participating DAOs\\n        address[] daos;\\n        /// The tokens involved in the swap\\n        address[] tokens;\\n        /// The token flow from the DAOs to the module, see above\\n        uint256[][] pathFrom;\\n        /// The token flow from the module to the DAO, see above\\n        uint256[][] pathTo;\\n        /// Amount of time in seconds the token swap can be executed\\n        uint32 deadline;\\n        /// Unix timestamp of the execution\\n        uint32 executionDate;\\n        /// Hash of the deal information.\\n        bytes32 metadata;\\n        // boolean to check if the deal has been executed\\n        bool isExecuted;\\n    }\\n\\n    /**\\n     * @notice              This event is emitted when a token swap is created\\n     * @param module        Address of this module\\n     * @param dealId        Deal id for the created token swap\\n     * @param metadata      Unique ID that is generated throught the Prime Deals frontend\\n     * @param daos          Array containing the DAOs that are involed in creating the token swap\\n     * @param tokens        Array containing the tokens that are involed in creating the token swap\\n     * @param pathFrom      Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module\\n     * @param pathTo        Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs\\n     * @param deadline      The amount of time between the creation of the swap and the time when\\n                            it can no longer be executed, in seconds\\n     */\\n    event TokenSwapCreated(\\n        address indexed module,\\n        uint32 indexed dealId,\\n        bytes32 indexed metadata,\\n        address[] daos,\\n        address[] tokens,\\n        uint256[][] pathFrom,\\n        uint256[][] pathTo,\\n        uint32 deadline\\n    );\\n\\n    /**\\n     * @notice              This event is emitted when a token swap is executed\\n     * @param module        Address of this module\\n     * @param dealId        Deal id for the executed token swap\\n     * @param metadata      Unique ID that is generated throught the Prime Deals frontend\\n     */\\n    event TokenSwapExecuted(\\n        address indexed module,\\n        uint32 indexed dealId,\\n        bytes32 indexed metadata\\n    );\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address _dealManager) ModuleBaseWithFee(_dealManager) {}\\n\\n    /**\\n      * @notice             Creates a new token swap action\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Detailed overview on how to configure the array can be found at the\\n                                TokenSwap struct description\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Detailed overview on how to configure the array can be found at the\\n                                TokenSwap struct description\\n      * @param _metadata    Unique ID that is generated throught the Prime Deals frontend\\n      * @param _deadline    The amount of time between the creation of the swap and the time when\\n                            it can no longer be executed, in seconds\\n      * @return uint32      The dealId of the new token swap\\n    */\\n    function _createSwap(\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _pathFrom,\\n        uint256[][] memory _pathTo,\\n        bytes32 _metadata,\\n        uint32 _deadline\\n    ) internal returns (uint32) {\\n        require(_metadata != \\\"\\\", \\\"TokenSwapModule: Error 101\\\");\\n        require(_metadataDoesNotExist(_metadata), \\\"TokenSwapModule: Error 203\\\");\\n        require(_daos.length >= 2, \\\"TokenSwapModule: Error 204\\\");\\n        require(_tokens.length != 0, \\\"TokenSwapModule: Error 205\\\");\\n        require(_deadline > 0, \\\"TokenSwapModule: Error 101\\\");\\n\\n        // Check outer arrays\\n        uint256 pathFromLen = _pathFrom.length;\\n        require(\\n            _tokens.length == pathFromLen && pathFromLen == _pathTo.length,\\n            \\\"TokenSwapModule: Error 102\\\"\\n        );\\n\\n        // Check inner arrays\\n        uint256 daosLen = _daos.length;\\n        for (uint256 i; i < pathFromLen; ++i) {\\n            require(\\n                _pathFrom[i].length == daosLen &&\\n                    _pathTo[i].length == daosLen << 2,\\n                \\\"TokenSwapModule: Error 102\\\"\\n            );\\n        }\\n\\n        TokenSwap memory ts = TokenSwap(\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            // solhint-disable-next-line not-rely-on-time\\n            uint32(block.timestamp) + _deadline,\\n            0,\\n            _metadata,\\n            false\\n        );\\n\\n        lastDealId = lastDealId + 1;\\n\\n        tokenSwaps[lastDealId] = ts;\\n\\n        metadataToDealId[_metadata] = lastDealId;\\n\\n        emit TokenSwapCreated(\\n            address(this),\\n            lastDealId,\\n            _metadata,\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline\\n        );\\n        return lastDealId;\\n    }\\n\\n    /**\\n      * @notice             Create a new token swap action and automatically\\n                            creates Dao Deposit Manager for each DAO that does not have one\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Detailed overview on how to configure the array can be found at the\\n                                TokenSwap struct description\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Detailed overview on how to configure the array can be found at the\\n                                TokenSwap struct description\\n      * @param _metadata    Unique ID that is generated throught the Prime Deals frontend\\n      * @param _deadline    The amount of time between the creation of the swap and the time when\\n                            it can no longer be executed, in seconds\\n      * @return uin32       The dealId of the new token swap\\n    */\\n    function createSwap(\\n        address[] calldata _daos,\\n        address[] calldata _tokens,\\n        uint256[][] calldata _pathFrom,\\n        uint256[][] calldata _pathTo,\\n        bytes32 _metadata,\\n        uint32 _deadline\\n    ) external returns (uint32) {\\n        for (uint256 i; i < _daos.length; ++i) {\\n            address dao = _daos[i];\\n            if (!dealManager.hasDaoDepositManager(dao)) {\\n                dealManager.createDaoDepositManager(dao);\\n            }\\n        }\\n        return (\\n            _createSwap(\\n                _daos,\\n                _tokens,\\n                _pathFrom,\\n                _pathTo,\\n                _metadata,\\n                _deadline\\n            )\\n        );\\n    }\\n\\n    /**\\n      * @notice             Checks whether a token swap action can be executed, which is the case\\n                            if all DAOs have deposited\\n      * @param _dealId      The dealId of the action (key to the mapping)\\n      * @return bool        A bool flag indiciating whether the action can be executed\\n    */\\n    function checkExecutability(uint32 _dealId)\\n        public\\n        view\\n        validDealId(_dealId)\\n        returns (bool)\\n    {\\n        TokenSwap memory ts = tokenSwaps[_dealId];\\n        if (hasDealExpired(_dealId)) {\\n            return false;\\n        }\\n\\n        address[] memory t = ts.tokens;\\n        for (uint256 i; i < t.length; ++i) {\\n            uint256[] memory p = ts.pathFrom[i];\\n            for (uint256 j; j < p.length; ++j) {\\n                if (p[j] == 0) {\\n                    continue;\\n                }\\n                // for each token and each pathFrom entry for this\\n                // token, check whether the corresponding DAO\\n                // has deposited the corresponding amount into their\\n                // deposit contract\\n                uint256 bal = IDaoDepositManager(\\n                    dealManager.getDaoDepositManager(ts.daos[j])\\n                ).getAvailableDealBalance(address(this), _dealId, t[i]);\\n                if (bal < p[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice              Executes a token swap action\\n     * @param _dealId       The dealId of the action (key to the mapping)\\n     */\\n    function executeSwap(uint32 _dealId)\\n        external\\n        validDealId(_dealId)\\n        isNotExecuted(_dealId)\\n    {\\n        TokenSwap storage ts = tokenSwaps[_dealId];\\n\\n        require(checkExecutability(_dealId), \\\"TokenSwapModule: Error 265\\\");\\n\\n        // transfer the tokens from the deposit manager of the DAOs\\n        // into this module\\n        uint256[] memory amountsIn = _pullTokensIntoModule(\\n            _dealId,\\n            ts.daos,\\n            ts.tokens,\\n            ts.pathFrom\\n        );\\n\\n        // distribute the tokens from this module to the DAOs\\n        // and (if applicable) and their vesting contracts\\n        uint256[] memory amountsOut = _distributeTokens(ts, _dealId);\\n\\n        // verify whether the amounts being pulled and pushed match\\n        for (uint256 i; i < ts.tokens.length; ++i) {\\n            require(\\n                amountsIn[i] == amountsOut[i],\\n                \\\"TokenSwapModule: Error 103\\\"\\n            );\\n        }\\n\\n        ts.isExecuted = true;\\n        // solhint-disable-next-line not-rely-on-time\\n        ts.executionDate = uint32(block.timestamp);\\n        emit TokenSwapExecuted(address(this), _dealId, ts.metadata);\\n    }\\n\\n    /**\\n      * @notice             Distributes the tokens based on the supplied information to the DAOs\\n                            or their vesting contracts\\n      * @param _ts          TokenSwap object containing all the information of the action\\n      * @param _dealId      The dealId of the action (key to the mapping)\\n      * @return amountsOut  The two min values for the token amounts _ts\\n    */\\n    function _distributeTokens(TokenSwap memory _ts, uint32 _dealId)\\n        internal\\n        returns (uint256[] memory amountsOut)\\n    {\\n        amountsOut = new uint256[](_ts.tokens.length);\\n        // Distribute tokens from the module\\n        for (uint256 i; i < _ts.tokens.length; ++i) {\\n            uint256[] memory pt = _ts.pathTo[i];\\n            address token = _ts.tokens[i];\\n            for (uint256 k; k < pt.length >> 2; ++k) {\\n                // every 4 values, the values for a new dao start\\n                // value 0 = instant amount\\n                // value 1 = vested amount\\n                // value 2 = vesting cliff\\n                // value 3 = vesting duration\\n                uint256 instant = pt[k << 2];\\n                uint256 vested = pt[(k << 2) + 1];\\n\\n                if (instant > 0) {\\n                    amountsOut[i] += instant;\\n                    _transferWithFee(token, _ts.daos[k], instant);\\n                }\\n\\n                if (vested > 0) {\\n                    amountsOut[i] += vested;\\n                    uint256 amount = _payFeeAndReturnRemainder(token, vested);\\n                    address daoDepositManager = dealManager\\n                        .getDaoDepositManager(_ts.daos[k]);\\n                    if (token != address(0)) {\\n                        _approveDaoDepositManager(token, _ts.daos[k], amount);\\n                    }\\n\\n                    IDaoDepositManager(daoDepositManager).startVesting{\\n                        value: token == address(0) ? amount : 0\\n                    }(\\n                        _dealId,\\n                        token,\\n                        amount, // amount\\n                        uint32(pt[(k << 2) + 2]), // cliff\\n                        uint32(pt[(k << 2) + 3]) // duration\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice              Returns the TokenSwap struct associated with the metadata\\n     * @param _metadata     Unique ID that is generated throught the Prime Deals frontend\\n     * @return swap         Token swap struct associated with the metadata\\n     */\\n    function getTokenswapFromMetadata(bytes32 _metadata)\\n        public\\n        view\\n        returns (TokenSwap memory swap)\\n    {\\n        return tokenSwaps[metadataToDealId[_metadata]];\\n    }\\n\\n    /**\\n     * @notice              Checks if the deal has been expired\\n     * @param _dealId       The dealId of the action (key to the mapping)\\n     * @return bool         A bool flag indiciating whether token swap has expired\\n     */\\n    function hasDealExpired(uint32 _dealId)\\n        public\\n        view\\n        override\\n        validDealId(_dealId)\\n        returns (bool)\\n    {\\n        TokenSwap memory swap = tokenSwaps[_dealId];\\n        return\\n            swap.isExecuted ||\\n            // solhint-disable-next-line not-rely-on-time\\n            swap.deadline < uint32(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice              Checks if the given metadata is Unique, and not already used\\n     * @param _metadata     Unique ID that is generated throught the Prime Deals frontend\\n     * @return bool         A bool flag indiciating whether the metadata is unique\\n     */\\n    function _metadataDoesNotExist(bytes32 _metadata)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        TokenSwap memory ts = getTokenswapFromMetadata(_metadata);\\n        return ts.metadata == 0;\\n    }\\n\\n    /**\\n     * @notice              Modifier that validates if the given deal ID is valid\\n     * @param _dealId       The dealId of the action (key to the mapping)\\n     */\\n    modifier validDealId(uint32 _dealId) {\\n        require(\\n            tokenSwaps[_dealId].metadata != 0,\\n            \\\"TokenSwapModule: Error 207\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice              Modifier that validates if token swap has not been executed\\n     * @param _dealId       The dealId of the action (key to the mapping)\\n     */\\n    modifier isNotExecuted(uint32 _dealId) {\\n        require(!tokenSwaps[_dealId].isExecuted, \\\"TokenSwapModule: Error 266\\\");\\n        _;\\n    }\\n\\n    fallback() external payable {}\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa14c8193a906942523d5dfe2b9e0dc89f9d359739bb5bc5ceea4b092d2b77840\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040526107d060a05261271060c0523480156200001d57600080fd5b5060405162003110380380620031108339810160408190526200004091620000b2565b80806001600160a01b0381166200009d5760405162461bcd60e51b815260206004820152601560248201527f4d6f64756c65426173653a204572726f72203130300000000000000000000000604482015260640160405180910390fd5b6001600160a01b031660805250620000e49050565b600060208284031215620000c557600080fd5b81516001600160a01b0381168114620000dd57600080fd5b9392505050565b60805160a05160c051612fb76200015960003960008181610161015261248b01526000818161028c015261049501526000818160f0015281816103ae0152818161088501528181610a510152818161119a0152818161122a01528181611ef00152818161220701526125270152612fb76000f3fe6080604052600436106100d55760003560e01c8063b45edf4711610079578063d24fdb7a11610056578063d24fdb7a146102ce578063f25f4b56146102ee578063fb458ec31461030e578063fe442f5d1461038b57005b8063b45edf4714610256578063bc063e1a1461027a578063cfccd4bc146102ae57005b8063251f02b4116100b2578063251f02b4146101915780638730f344146101c157806390d49b9d14610209578063b42132cd1461022957005b806301df538d146100de5780631ab971ab1461012f578063249d39e91461014f57005b366100dc57005b005b3480156100ea57600080fd5b506101127f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013b57600080fd5b506100dc61014a36600461295d565b6103ab565b34801561015b57600080fd5b506101837f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610126565b34801561019d57600080fd5b506101b16101ac36600461295d565b610580565b6040519015158152602001610126565b3480156101cd57600080fd5b506101f46101dc366004612978565b60026020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610126565b34801561021557600080fd5b506100dc6102243660046129a6565b610a4e565b34801561023557600080fd5b50610249610244366004612978565b610bff565b6040516101269190612a83565b34801561026257600080fd5b506000546101f490600160a01b900463ffffffff1681565b34801561028657600080fd5b506101f47f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ba57600080fd5b506101b16102c936600461295d565b610e98565b3480156102da57600080fd5b506101f46102e9366004612b9a565b611143565b3480156102fa57600080fd5b50600054610112906001600160a01b031681565b34801561031a57600080fd5b5061036161032936600461295d565b60016020526000908152604090206004810154600582015460069092015463ffffffff80831693600160201b90930416919060ff1684565b6040805163ffffffff95861681529490931660208501529183015215156060820152608001610126565b34801561039757600080fd5b506100dc6103a636600461295d565b61132d565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e9190612c77565b6001600160a01b0316816001600160a01b0316146104935760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f72203232310000000060448201526064015b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff16111561050f5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f722032363400000000604482015260640161048a565b60005463ffffffff838116600160a01b909204161461057c576000805463ffffffff60a01b1916600160a01b63ffffffff85811682810293909317808555604051939492900416917fdeab7ddf530f3309d7f88438b7fbb714e557a5a30d0c2d1cfc3c0da1dde409689190a35b5050565b63ffffffff811660009081526001602052604081206005015482906105b75760405162461bcd60e51b815260040161048a90612c94565b63ffffffff831660009081526001602090815260408083208151815461012094810282018501909352610100810183815290939192849284919084018282801561062a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161060c575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561068c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161066e575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156107265760008481526020908190208301805460408051828502810185019091528181529283018282801561071257602002820191906000526020600020905b8154815260200190600101908083116106fe575b5050505050815260200190600101906106ba565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156107bf576000848152602090819020830180546040805182850281018501909152818152928301828280156107ab57602002820191906000526020600020905b815481526020019060010190808311610797575b505050505081526020019060010190610753565b50505090825250600482015463ffffffff8082166020840152600160201b9091041660408201526005820154606082015260069091015460ff161515608090910152905061080c84610e98565b1561081b576000925050610a48565b602081015160005b8151811015610a405760008360400151828151811061084457610844612ccb565b6020026020010151905060005b8151811015610a2d5781818151811061086c5761086c612ccb565b60200260200101516000141561088157610a1d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe498876000015184815181106108c8576108c8612ccb565b60200260200101516040518263ffffffff1660e01b81526004016108fb91906001600160a01b0391909116815260200190565b602060405180830381865afa158015610918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093c9190612c77565b6001600160a01b031663246cd574308b88888151811061095e5761095e612ccb565b60200260200101516040518463ffffffff1660e01b81526004016109a8939291906001600160a01b03938416815263ffffffff929092166020830152909116604082015260600190565b602060405180830381865afa1580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e99190612ce1565b90508282815181106109fd576109fd612ccb565b6020026020010151811015610a1b5760009750505050505050610a48565b505b610a2681612d10565b9050610851565b505080610a3990612d10565b9050610823565b506001935050505b50919050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190612c77565b6001600160a01b0316816001600160a01b031614610b315760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f722032323100000000604482015260640161048a565b6001600160a01b03821615801590610b5257506001600160a01b0382163014155b610b9e5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f722031303000000000604482015260640161048a565b6000546001600160a01b0383811691161461057c57600080546001600160a01b0319166001600160a01b0384169081178255604051909182917f9f4f5dce3c4d197b5d7496cb96e25f0a89809167195964b0daa3ef5fed63c00a9190a35050565b60408051610100810182526060808252602082018190529181018290528181019190915260006080820181905260a0820181905260c0820181905260e082015260008281526002602090815260408083205463ffffffff1683526001825291829020825181546101209381028201840190945261010081018481529093919284928491840182828015610cbb57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c9d575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610d1d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cff575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610db757600084815260209081902083018054604080518285028101850190915281815292830182828015610da357602002820191906000526020600020905b815481526020019060010190808311610d8f575b505050505081526020019060010190610d4b565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610e5057600084815260209081902083018054604080518285028101850190915281815292830182828015610e3c57602002820191906000526020600020905b815481526020019060010190808311610e28575b505050505081526020019060010190610de4565b50505090825250600482015463ffffffff8082166020840152600160201b9091041660408201526005820154606082015260069091015460ff16151560809091015292915050565b63ffffffff81166000908152600160205260408120600501548290610ecf5760405162461bcd60e51b815260040161048a90612c94565b63ffffffff8316600090815260016020908152604080832081518154610120948102820185019093526101008101838152909391928492849190840182828015610f4257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f24575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610fa457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f86575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561103e5760008481526020908190208301805460408051828502810185019091528181529283018282801561102a57602002820191906000526020600020905b815481526020019060010190808311611016575b505050505081526020019060010190610fd2565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156110d7576000848152602090819020830180546040805182850281018501909152818152928301828280156110c357602002820191906000526020600020905b8154815260200190600101908083116110af575b50505050508152602001906001019061106b565b50505090825250600482015463ffffffff8082166020840152600160201b9091041660408201526005820154606082015260069091015460ff16151560809091015260e08101519091508061113b57504263ffffffff16816080015163ffffffff16105b949350505050565b6000805b8a8110156112985760008c8c8381811061116357611163612ccb565b905060200201602081019061117891906129a6565b60405163c221e44b60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063c221e44b90602401602060405180830381865afa1580156111e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112079190612d2b565b6112875760405163253feb5d60e21b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906394ffad7490602401600060405180830381600087803b15801561126e57600080fd5b505af1158015611282573d6000803e3d6000fd5b505050505b5061129181612d10565b9050611147565b5061131e8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061130d92508b91508c9050612db8565b611317888a612db8565b87876118ed565b9b9a5050505050505050505050565b63ffffffff811660009081526001602052604090206005015481906113645760405162461bcd60e51b815260040161048a90612c94565b63ffffffff8216600090815260016020526040902060060154829060ff16156113cf5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220323636000000000000604482015260640161048a565b63ffffffff831660009081526001602052604090206113ed84610580565b6114395760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220323635000000000000604482015260640161048a565b6000611592858360000180548060200260200160405190810160405280929190818152602001828054801561149757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611479575b5050505050846001018054806020026020016040519081016040528092919081815260200182805480156114f457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114d6575b505050505085600201805480602002602001604051908101604052809291908181526020016000905b828210156115895760008481526020908190208301805460408051828502810185019091528181529283018282801561157557602002820191906000526020600020905b815481526020019060010190808311611561575b50505050508152602001906001019061151d565b50505050611d89565b604080518454610120602082028301810190935261010082018181529394506000936117d69387928492918491908401828280156115f957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115db575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561165b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161163d575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156116f5576000848152602090819020830180546040805182850281018501909152818152928301828280156116e157602002820191906000526020600020905b8154815260200190600101908083116116cd575b505050505081526020019060010190611689565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561178e5760008481526020908190208301805460408051828502810185019091528181529283018282801561177a57602002820191906000526020600020905b815481526020019060010190808311611766575b505050505081526020019060010190611722565b50505090825250600482015463ffffffff8082166020840152600160201b9091041660408201526005820154606082015260069091015460ff16151560809091015287612069565b905060005b6001840154811015611878578181815181106117f9576117f9612ccb565b602002602001015183828151811061181357611813612ccb565b6020026020010151146118685760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220313033000000000000604482015260640161048a565b61187181612d10565b90506117db565b5060068301805460ff1916600117905560048301805463ffffffff428116600160201b0267ffffffff0000000019909216919091179091556005840154604051909188169030907fec8c89d1275fdc3512da61ea020e4d570bb3bf0fba7163f506a1ef7b5e55179a90600090a4505050505050565b60008261193c5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220313031000000000000604482015260640161048a565b6119458361241f565b6119915760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220323033000000000000604482015260640161048a565b6002875110156119e35760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220323034000000000000604482015260640161048a565b8551611a315760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220323035000000000000604482015260640161048a565b60008263ffffffff1611611a875760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220313031000000000000604482015260640161048a565b8451865181148015611a995750845181145b611ae55760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220313032000000000000604482015260640161048a565b875160005b82811015611b945781888281518110611b0557611b05612ccb565b602002602001015151148015611b385750600282901b878281518110611b2d57611b2d612ccb565b602002602001015151145b611b845760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220313032000000000000604482015260640161048a565b611b8d81612d10565b9050611aea565b5060006040518061010001604052808b81526020018a81526020018981526020018881526020018642611bc79190612e83565b63ffffffff9081168252600060208301819052604083018a905260609092018290529054919250611c0191600160c01b9004166001612e83565b6000805463ffffffff60c01b1916600160c01b63ffffffff938416810291909117808355049091168152600160209081526040909120825180518493611c4b9284929101906127f8565b506020828101518051611c6492600185019201906127f8565b5060408201518051611c8091600284019160209091019061285d565b5060608201518051611c9c91600384019160209091019061285d565b50608082015160048201805460a085015163ffffffff908116600160201b0267ffffffffffffffff199092169381169390931717905560c0830151600583015560e0909201516006909101805491151560ff199092169190911790556000805488825260026020526040808320805463ffffffff1916600160c01b93849004861617905591549151899391909204169030907f93ec9825c63237a731b7205f8e661ee12357e9993bda8c3d47fb709482e769a990611d63908f908f908f908f908e90612eab565b60405180910390a45050600054600160c01b900463ffffffff1698975050505050505050565b6060825167ffffffffffffffff811115611da557611da5612d4d565b604051908082528060200260200182016040528015611dce578160200160208202803683370190505b5090508251825114611e1a5760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b91018981960591b604482015260640161048a565b60005b8351811015612060576000838281518110611e3a57611e3a612ccb565b602002602001015190508551815114611e8d5760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b91018981960591b604482015260640161048a565b60005b815181101561204d576000828281518110611ead57611ead612ccb565b60200260200101519050600081111561203c5780858581518110611ed357611ed3612ccb565b60200260200101818151611ee79190612f11565b915081815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe498898481518110611f2f57611f2f612ccb565b60200260200101516040518263ffffffff1660e01b8152600401611f6291906001600160a01b0391909116815260200190565b602060405180830381865afa158015611f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa39190612c77565b6001600160a01b0316632162a70c8a898781518110611fc457611fc4612ccb565b60209081029190910101516040516001600160e01b031960e085901b16815263ffffffff9290921660048301526001600160a01b0316602482015260448101849052606401600060405180830381600087803b15801561202357600080fd5b505af1158015612037573d6000803e3d6000fd5b505050505b5061204681612d10565b9050611e90565b50508061205990612d10565b9050611e1d565b50949350505050565b606082602001515167ffffffffffffffff81111561208957612089612d4d565b6040519080825280602002602001820160405280156120b2578160200160208202803683370190505b50905060005b836020015151811015612418576000846060015182815181106120dd576120dd612ccb565b602002602001015190506000856020015183815181106120ff576120ff612ccb565b6020026020010151905060005b825160021c81101561240457600083600283901b8151811061213057612130612ccb565b60200260200101519050600084600284901b600161214e9190612f11565b8151811061215e5761215e612ccb565b6020026020010151905060008211156121c5578187878151811061218457612184612ccb565b602002602001018181516121989190612f11565b905250885180516121c3918691869081106121b5576121b5612ccb565b602002602001015184612437565b505b80156123f157808787815181106121de576121de612ccb565b602002602001018181516121f29190612f11565b90525060006122018583612457565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe4988c60000151878151811061224a5761224a612ccb565b60200260200101516040518263ffffffff1660e01b815260040161227d91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561229a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122be9190612c77565b90506001600160a01b038616156122f7576122f7868c6000015187815181106122e9576122e9612ccb565b602002602001015184612502565b6001600160a01b038082169063d405929290881615612317576000612319565b835b8c89868c61232b60028d811b90612f11565b8151811061233b5761233b612ccb565b60200260200101518d60028d901b60036123559190612f11565b8151811061236557612365612ccb565b60209081029190910101516040516001600160e01b031960e089901b16815263ffffffff95861660048201526001600160a01b03909416602485015260448401929092528316606483015291909116608482015260a4016000604051808303818588803b1580156123d557600080fd5b505af11580156123e9573d6000803e3d6000fd5b505050505050505b5050806123fd90612d10565b905061210c565b5050508061241190612d10565b90506120b8565b5092915050565b60008061242b83610bff565b60c00151159392505050565b60006124438483612457565b905061245084848361259d565b9392505050565b600080546001600160a01b0316158015906124805750600054600160a01b900463ffffffff1615155b156124f957600080547f0000000000000000000000000000000000000000000000000000000000000000906124c290600160a01b900463ffffffff1685612f29565b6124cc9190612f48565b6000549091506124e79085906001600160a01b03168361259d565b6124f18184612f6a565b9150506124fc565b50805b92915050565b604051630e39fc9360e31b81526001600160a01b0383811660048301526125989185917f000000000000000000000000000000000000000000000000000000000000000016906371cfe49890602401602060405180830381865afa15801561256e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125929190612c77565b83612741565b505050565b6001600160a01b038316156126a65760405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1925050508015612617575060408051601f3d908101601f1916820190925261261491810190612d2b565b60015b61265b5760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343160581b604482015260640161048a565b806126a05760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343160581b604482015260640161048a565b50505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146126f3576040519150601f19603f3d011682016040523d82523d6000602084013e6126f8565b606091505b50509050806126a05760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b910191a1960591b604482015260640161048a565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015612790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b49190612d2b565b6125985760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343360581b604482015260640161048a565b82805482825590600052602060002090810192821561284d579160200282015b8281111561284d57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612818565b506128599291506128b6565b5090565b8280548282559060005260206000209081019282156128aa579160200282015b828111156128aa578251805161289a9184916020909101906128cb565b509160200191906001019061287d565b50612859929150612906565b5b8082111561285957600081556001016128b7565b82805482825590600052602060002090810192821561284d579160200282015b8281111561284d5782518255916020019190600101906128eb565b8082111561285957600061291a8282612923565b50600101612906565b508054600082559060005260206000209081019061294191906128b6565b50565b803563ffffffff8116811461295857600080fd5b919050565b60006020828403121561296f57600080fd5b61245082612944565b60006020828403121561298a57600080fd5b5035919050565b6001600160a01b038116811461294157600080fd5b6000602082840312156129b857600080fd5b813561245081612991565b600081518084526020808501945080840160005b838110156129fc5781516001600160a01b0316875295820195908201906001016129d7565b509495945050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015612a75578385038a52825180518087529087019087870190845b81811015612a6057835183529289019291890191600101612a44565b50509a87019a95505091850191600101612a26565b509298975050505050505050565b6020815260008251610100806020850152612aa26101208501836129c3565b91506020850151601f1980868503016040870152612ac084836129c3565b93506040870151915080868503016060870152612add8483612a07565b9350606087015191508086850301608087015250612afb8382612a07565b9250506080850151612b1560a086018263ffffffff169052565b5060a085015163ffffffff811660c08601525060c085015160e085015260e0850151612b448286018215159052565b5090949350505050565b60008083601f840112612b6057600080fd5b50813567ffffffffffffffff811115612b7857600080fd5b6020830191508360208260051b8501011115612b9357600080fd5b9250929050565b60008060008060008060008060008060c08b8d031215612bb957600080fd5b8a3567ffffffffffffffff80821115612bd157600080fd5b612bdd8e838f01612b4e565b909c509a5060208d0135915080821115612bf657600080fd5b612c028e838f01612b4e565b909a50985060408d0135915080821115612c1b57600080fd5b612c278e838f01612b4e565b909850965060608d0135915080821115612c4057600080fd5b50612c4d8d828e01612b4e565b90955093505060808b01359150612c6660a08c01612944565b90509295989b9194979a5092959850565b600060208284031215612c8957600080fd5b815161245081612991565b6020808252601a908201527f546f6b656e537761704d6f64756c653a204572726f7220323037000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612cf357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d2457612d24612cfa565b5060010190565b600060208284031215612d3d57600080fd5b8151801515811461245057600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d8c57612d8c612d4d565b604052919050565b600067ffffffffffffffff821115612dae57612dae612d4d565b5060051b60200190565b6000612dcb612dc684612d94565b612d63565b83815260208082019190600586811b860136811115612de957600080fd5b865b81811015612e7657803567ffffffffffffffff811115612e0b5760008081fd5b880136601f820112612e1d5760008081fd5b8035612e2b612dc682612d94565b81815290851b82018601908681019036831115612e485760008081fd5b928701925b82841015612e6657833582529287019290870190612e4d565b8952505050948301948301612deb565b5092979650505050505050565b600063ffffffff808316818516808303821115612ea257612ea2612cfa565b01949350505050565b60a081526000612ebe60a08301886129c3565b8281036020840152612ed081886129c3565b90508281036040840152612ee48187612a07565b90508281036060840152612ef88186612a07565b91505063ffffffff831660808301529695505050505050565b60008219821115612f2457612f24612cfa565b500190565b6000816000190483118215151615612f4357612f43612cfa565b500290565b600082612f6557634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612f7c57612f7c612cfa565b50039056fea2646970667358221220ece019195b4d8f1ade1c2700a6b34fd6c3f2cce52479afda55c0f67283941be864736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100d55760003560e01c8063b45edf4711610079578063d24fdb7a11610056578063d24fdb7a146102ce578063f25f4b56146102ee578063fb458ec31461030e578063fe442f5d1461038b57005b8063b45edf4714610256578063bc063e1a1461027a578063cfccd4bc146102ae57005b8063251f02b4116100b2578063251f02b4146101915780638730f344146101c157806390d49b9d14610209578063b42132cd1461022957005b806301df538d146100de5780631ab971ab1461012f578063249d39e91461014f57005b366100dc57005b005b3480156100ea57600080fd5b506101127f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013b57600080fd5b506100dc61014a36600461295d565b6103ab565b34801561015b57600080fd5b506101837f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610126565b34801561019d57600080fd5b506101b16101ac36600461295d565b610580565b6040519015158152602001610126565b3480156101cd57600080fd5b506101f46101dc366004612978565b60026020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610126565b34801561021557600080fd5b506100dc6102243660046129a6565b610a4e565b34801561023557600080fd5b50610249610244366004612978565b610bff565b6040516101269190612a83565b34801561026257600080fd5b506000546101f490600160a01b900463ffffffff1681565b34801561028657600080fd5b506101f47f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ba57600080fd5b506101b16102c936600461295d565b610e98565b3480156102da57600080fd5b506101f46102e9366004612b9a565b611143565b3480156102fa57600080fd5b50600054610112906001600160a01b031681565b34801561031a57600080fd5b5061036161032936600461295d565b60016020526000908152604090206004810154600582015460069092015463ffffffff80831693600160201b90930416919060ff1684565b6040805163ffffffff95861681529490931660208501529183015215156060820152608001610126565b34801561039757600080fd5b506100dc6103a636600461295d565b61132d565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e9190612c77565b6001600160a01b0316816001600160a01b0316146104935760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f72203232310000000060448201526064015b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff16111561050f5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f722032363400000000604482015260640161048a565b60005463ffffffff838116600160a01b909204161461057c576000805463ffffffff60a01b1916600160a01b63ffffffff85811682810293909317808555604051939492900416917fdeab7ddf530f3309d7f88438b7fbb714e557a5a30d0c2d1cfc3c0da1dde409689190a35b5050565b63ffffffff811660009081526001602052604081206005015482906105b75760405162461bcd60e51b815260040161048a90612c94565b63ffffffff831660009081526001602090815260408083208151815461012094810282018501909352610100810183815290939192849284919084018282801561062a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161060c575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561068c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161066e575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156107265760008481526020908190208301805460408051828502810185019091528181529283018282801561071257602002820191906000526020600020905b8154815260200190600101908083116106fe575b5050505050815260200190600101906106ba565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156107bf576000848152602090819020830180546040805182850281018501909152818152928301828280156107ab57602002820191906000526020600020905b815481526020019060010190808311610797575b505050505081526020019060010190610753565b50505090825250600482015463ffffffff8082166020840152600160201b9091041660408201526005820154606082015260069091015460ff161515608090910152905061080c84610e98565b1561081b576000925050610a48565b602081015160005b8151811015610a405760008360400151828151811061084457610844612ccb565b6020026020010151905060005b8151811015610a2d5781818151811061086c5761086c612ccb565b60200260200101516000141561088157610a1d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe498876000015184815181106108c8576108c8612ccb565b60200260200101516040518263ffffffff1660e01b81526004016108fb91906001600160a01b0391909116815260200190565b602060405180830381865afa158015610918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093c9190612c77565b6001600160a01b031663246cd574308b88888151811061095e5761095e612ccb565b60200260200101516040518463ffffffff1660e01b81526004016109a8939291906001600160a01b03938416815263ffffffff929092166020830152909116604082015260600190565b602060405180830381865afa1580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e99190612ce1565b90508282815181106109fd576109fd612ccb565b6020026020010151811015610a1b5760009750505050505050610a48565b505b610a2681612d10565b9050610851565b505080610a3990612d10565b9050610823565b506001935050505b50919050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190612c77565b6001600160a01b0316816001600160a01b031614610b315760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f722032323100000000604482015260640161048a565b6001600160a01b03821615801590610b5257506001600160a01b0382163014155b610b9e5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f722031303000000000604482015260640161048a565b6000546001600160a01b0383811691161461057c57600080546001600160a01b0319166001600160a01b0384169081178255604051909182917f9f4f5dce3c4d197b5d7496cb96e25f0a89809167195964b0daa3ef5fed63c00a9190a35050565b60408051610100810182526060808252602082018190529181018290528181019190915260006080820181905260a0820181905260c0820181905260e082015260008281526002602090815260408083205463ffffffff1683526001825291829020825181546101209381028201840190945261010081018481529093919284928491840182828015610cbb57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c9d575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610d1d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cff575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610db757600084815260209081902083018054604080518285028101850190915281815292830182828015610da357602002820191906000526020600020905b815481526020019060010190808311610d8f575b505050505081526020019060010190610d4b565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610e5057600084815260209081902083018054604080518285028101850190915281815292830182828015610e3c57602002820191906000526020600020905b815481526020019060010190808311610e28575b505050505081526020019060010190610de4565b50505090825250600482015463ffffffff8082166020840152600160201b9091041660408201526005820154606082015260069091015460ff16151560809091015292915050565b63ffffffff81166000908152600160205260408120600501548290610ecf5760405162461bcd60e51b815260040161048a90612c94565b63ffffffff8316600090815260016020908152604080832081518154610120948102820185019093526101008101838152909391928492849190840182828015610f4257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f24575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610fa457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f86575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561103e5760008481526020908190208301805460408051828502810185019091528181529283018282801561102a57602002820191906000526020600020905b815481526020019060010190808311611016575b505050505081526020019060010190610fd2565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156110d7576000848152602090819020830180546040805182850281018501909152818152928301828280156110c357602002820191906000526020600020905b8154815260200190600101908083116110af575b50505050508152602001906001019061106b565b50505090825250600482015463ffffffff8082166020840152600160201b9091041660408201526005820154606082015260069091015460ff16151560809091015260e08101519091508061113b57504263ffffffff16816080015163ffffffff16105b949350505050565b6000805b8a8110156112985760008c8c8381811061116357611163612ccb565b905060200201602081019061117891906129a6565b60405163c221e44b60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063c221e44b90602401602060405180830381865afa1580156111e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112079190612d2b565b6112875760405163253feb5d60e21b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906394ffad7490602401600060405180830381600087803b15801561126e57600080fd5b505af1158015611282573d6000803e3d6000fd5b505050505b5061129181612d10565b9050611147565b5061131e8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061130d92508b91508c9050612db8565b611317888a612db8565b87876118ed565b9b9a5050505050505050505050565b63ffffffff811660009081526001602052604090206005015481906113645760405162461bcd60e51b815260040161048a90612c94565b63ffffffff8216600090815260016020526040902060060154829060ff16156113cf5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220323636000000000000604482015260640161048a565b63ffffffff831660009081526001602052604090206113ed84610580565b6114395760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220323635000000000000604482015260640161048a565b6000611592858360000180548060200260200160405190810160405280929190818152602001828054801561149757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611479575b5050505050846001018054806020026020016040519081016040528092919081815260200182805480156114f457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114d6575b505050505085600201805480602002602001604051908101604052809291908181526020016000905b828210156115895760008481526020908190208301805460408051828502810185019091528181529283018282801561157557602002820191906000526020600020905b815481526020019060010190808311611561575b50505050508152602001906001019061151d565b50505050611d89565b604080518454610120602082028301810190935261010082018181529394506000936117d69387928492918491908401828280156115f957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115db575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561165b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161163d575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156116f5576000848152602090819020830180546040805182850281018501909152818152928301828280156116e157602002820191906000526020600020905b8154815260200190600101908083116116cd575b505050505081526020019060010190611689565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561178e5760008481526020908190208301805460408051828502810185019091528181529283018282801561177a57602002820191906000526020600020905b815481526020019060010190808311611766575b505050505081526020019060010190611722565b50505090825250600482015463ffffffff8082166020840152600160201b9091041660408201526005820154606082015260069091015460ff16151560809091015287612069565b905060005b6001840154811015611878578181815181106117f9576117f9612ccb565b602002602001015183828151811061181357611813612ccb565b6020026020010151146118685760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220313033000000000000604482015260640161048a565b61187181612d10565b90506117db565b5060068301805460ff1916600117905560048301805463ffffffff428116600160201b0267ffffffff0000000019909216919091179091556005840154604051909188169030907fec8c89d1275fdc3512da61ea020e4d570bb3bf0fba7163f506a1ef7b5e55179a90600090a4505050505050565b60008261193c5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220313031000000000000604482015260640161048a565b6119458361241f565b6119915760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220323033000000000000604482015260640161048a565b6002875110156119e35760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220323034000000000000604482015260640161048a565b8551611a315760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220323035000000000000604482015260640161048a565b60008263ffffffff1611611a875760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220313031000000000000604482015260640161048a565b8451865181148015611a995750845181145b611ae55760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220313032000000000000604482015260640161048a565b875160005b82811015611b945781888281518110611b0557611b05612ccb565b602002602001015151148015611b385750600282901b878281518110611b2d57611b2d612ccb565b602002602001015151145b611b845760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f7220313032000000000000604482015260640161048a565b611b8d81612d10565b9050611aea565b5060006040518061010001604052808b81526020018a81526020018981526020018881526020018642611bc79190612e83565b63ffffffff9081168252600060208301819052604083018a905260609092018290529054919250611c0191600160c01b9004166001612e83565b6000805463ffffffff60c01b1916600160c01b63ffffffff938416810291909117808355049091168152600160209081526040909120825180518493611c4b9284929101906127f8565b506020828101518051611c6492600185019201906127f8565b5060408201518051611c8091600284019160209091019061285d565b5060608201518051611c9c91600384019160209091019061285d565b50608082015160048201805460a085015163ffffffff908116600160201b0267ffffffffffffffff199092169381169390931717905560c0830151600583015560e0909201516006909101805491151560ff199092169190911790556000805488825260026020526040808320805463ffffffff1916600160c01b93849004861617905591549151899391909204169030907f93ec9825c63237a731b7205f8e661ee12357e9993bda8c3d47fb709482e769a990611d63908f908f908f908f908e90612eab565b60405180910390a45050600054600160c01b900463ffffffff1698975050505050505050565b6060825167ffffffffffffffff811115611da557611da5612d4d565b604051908082528060200260200182016040528015611dce578160200160208202803683370190505b5090508251825114611e1a5760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b91018981960591b604482015260640161048a565b60005b8351811015612060576000838281518110611e3a57611e3a612ccb565b602002602001015190508551815114611e8d5760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b91018981960591b604482015260640161048a565b60005b815181101561204d576000828281518110611ead57611ead612ccb565b60200260200101519050600081111561203c5780858581518110611ed357611ed3612ccb565b60200260200101818151611ee79190612f11565b915081815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe498898481518110611f2f57611f2f612ccb565b60200260200101516040518263ffffffff1660e01b8152600401611f6291906001600160a01b0391909116815260200190565b602060405180830381865afa158015611f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa39190612c77565b6001600160a01b0316632162a70c8a898781518110611fc457611fc4612ccb565b60209081029190910101516040516001600160e01b031960e085901b16815263ffffffff9290921660048301526001600160a01b0316602482015260448101849052606401600060405180830381600087803b15801561202357600080fd5b505af1158015612037573d6000803e3d6000fd5b505050505b5061204681612d10565b9050611e90565b50508061205990612d10565b9050611e1d565b50949350505050565b606082602001515167ffffffffffffffff81111561208957612089612d4d565b6040519080825280602002602001820160405280156120b2578160200160208202803683370190505b50905060005b836020015151811015612418576000846060015182815181106120dd576120dd612ccb565b602002602001015190506000856020015183815181106120ff576120ff612ccb565b6020026020010151905060005b825160021c81101561240457600083600283901b8151811061213057612130612ccb565b60200260200101519050600084600284901b600161214e9190612f11565b8151811061215e5761215e612ccb565b6020026020010151905060008211156121c5578187878151811061218457612184612ccb565b602002602001018181516121989190612f11565b905250885180516121c3918691869081106121b5576121b5612ccb565b602002602001015184612437565b505b80156123f157808787815181106121de576121de612ccb565b602002602001018181516121f29190612f11565b90525060006122018583612457565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe4988c60000151878151811061224a5761224a612ccb565b60200260200101516040518263ffffffff1660e01b815260040161227d91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561229a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122be9190612c77565b90506001600160a01b038616156122f7576122f7868c6000015187815181106122e9576122e9612ccb565b602002602001015184612502565b6001600160a01b038082169063d405929290881615612317576000612319565b835b8c89868c61232b60028d811b90612f11565b8151811061233b5761233b612ccb565b60200260200101518d60028d901b60036123559190612f11565b8151811061236557612365612ccb565b60209081029190910101516040516001600160e01b031960e089901b16815263ffffffff95861660048201526001600160a01b03909416602485015260448401929092528316606483015291909116608482015260a4016000604051808303818588803b1580156123d557600080fd5b505af11580156123e9573d6000803e3d6000fd5b505050505050505b5050806123fd90612d10565b905061210c565b5050508061241190612d10565b90506120b8565b5092915050565b60008061242b83610bff565b60c00151159392505050565b60006124438483612457565b905061245084848361259d565b9392505050565b600080546001600160a01b0316158015906124805750600054600160a01b900463ffffffff1615155b156124f957600080547f0000000000000000000000000000000000000000000000000000000000000000906124c290600160a01b900463ffffffff1685612f29565b6124cc9190612f48565b6000549091506124e79085906001600160a01b03168361259d565b6124f18184612f6a565b9150506124fc565b50805b92915050565b604051630e39fc9360e31b81526001600160a01b0383811660048301526125989185917f000000000000000000000000000000000000000000000000000000000000000016906371cfe49890602401602060405180830381865afa15801561256e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125929190612c77565b83612741565b505050565b6001600160a01b038316156126a65760405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1925050508015612617575060408051601f3d908101601f1916820190925261261491810190612d2b565b60015b61265b5760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343160581b604482015260640161048a565b806126a05760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343160581b604482015260640161048a565b50505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146126f3576040519150601f19603f3d011682016040523d82523d6000602084013e6126f8565b606091505b50509050806126a05760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b910191a1960591b604482015260640161048a565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015612790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b49190612d2b565b6125985760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343360581b604482015260640161048a565b82805482825590600052602060002090810192821561284d579160200282015b8281111561284d57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612818565b506128599291506128b6565b5090565b8280548282559060005260206000209081019282156128aa579160200282015b828111156128aa578251805161289a9184916020909101906128cb565b509160200191906001019061287d565b50612859929150612906565b5b8082111561285957600081556001016128b7565b82805482825590600052602060002090810192821561284d579160200282015b8281111561284d5782518255916020019190600101906128eb565b8082111561285957600061291a8282612923565b50600101612906565b508054600082559060005260206000209081019061294191906128b6565b50565b803563ffffffff8116811461295857600080fd5b919050565b60006020828403121561296f57600080fd5b61245082612944565b60006020828403121561298a57600080fd5b5035919050565b6001600160a01b038116811461294157600080fd5b6000602082840312156129b857600080fd5b813561245081612991565b600081518084526020808501945080840160005b838110156129fc5781516001600160a01b0316875295820195908201906001016129d7565b509495945050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015612a75578385038a52825180518087529087019087870190845b81811015612a6057835183529289019291890191600101612a44565b50509a87019a95505091850191600101612a26565b509298975050505050505050565b6020815260008251610100806020850152612aa26101208501836129c3565b91506020850151601f1980868503016040870152612ac084836129c3565b93506040870151915080868503016060870152612add8483612a07565b9350606087015191508086850301608087015250612afb8382612a07565b9250506080850151612b1560a086018263ffffffff169052565b5060a085015163ffffffff811660c08601525060c085015160e085015260e0850151612b448286018215159052565b5090949350505050565b60008083601f840112612b6057600080fd5b50813567ffffffffffffffff811115612b7857600080fd5b6020830191508360208260051b8501011115612b9357600080fd5b9250929050565b60008060008060008060008060008060c08b8d031215612bb957600080fd5b8a3567ffffffffffffffff80821115612bd157600080fd5b612bdd8e838f01612b4e565b909c509a5060208d0135915080821115612bf657600080fd5b612c028e838f01612b4e565b909a50985060408d0135915080821115612c1b57600080fd5b612c278e838f01612b4e565b909850965060608d0135915080821115612c4057600080fd5b50612c4d8d828e01612b4e565b90955093505060808b01359150612c6660a08c01612944565b90509295989b9194979a5092959850565b600060208284031215612c8957600080fd5b815161245081612991565b6020808252601a908201527f546f6b656e537761704d6f64756c653a204572726f7220323037000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612cf357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d2457612d24612cfa565b5060010190565b600060208284031215612d3d57600080fd5b8151801515811461245057600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d8c57612d8c612d4d565b604052919050565b600067ffffffffffffffff821115612dae57612dae612d4d565b5060051b60200190565b6000612dcb612dc684612d94565b612d63565b83815260208082019190600586811b860136811115612de957600080fd5b865b81811015612e7657803567ffffffffffffffff811115612e0b5760008081fd5b880136601f820112612e1d5760008081fd5b8035612e2b612dc682612d94565b81815290851b82018601908681019036831115612e485760008081fd5b928701925b82841015612e6657833582529287019290870190612e4d565b8952505050948301948301612deb565b5092979650505050505050565b600063ffffffff808316818516808303821115612ea257612ea2612cfa565b01949350505050565b60a081526000612ebe60a08301886129c3565b8281036020840152612ed081886129c3565b90508281036040840152612ee48187612a07565b90508281036060840152612ef88186612a07565b91505063ffffffff831660808301529695505050505050565b60008219821115612f2457612f24612cfa565b500190565b6000816000190483118215151615612f4357612f43612cfa565b500290565b600082612f6557634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612f7c57612f7c612cfa565b50039056fea2646970667358221220ece019195b4d8f1ade1c2700a6b34fd6c3f2cce52479afda55c0f67283941be864736f6c634300080a0033",
  "devdoc": {
    "events": {
      "TokenSwapCreated(address,uint32,bytes32,address[],address[],uint256[][],uint256[][],uint32)": {
        "params": {
          "daos": "Array containing the DAOs that are involed in creating the token swap",
          "deadline": "The amount of time between the creation of the swap and the time when it can no longer be executed, in seconds",
          "dealId": "Deal id for the created token swap",
          "metadata": "Unique ID that is generated throught the Prime Deals frontend",
          "module": "Address of this module",
          "pathFrom": "Two-dimensional array containing the tokens flowing from the DAOs into the module",
          "pathTo": "Two-dimensional array containing the tokens flowing from the module to the DAOs",
          "tokens": "Array containing the tokens that are involed in creating the token swap"
        }
      },
      "TokenSwapExecuted(address,uint32,bytes32)": {
        "params": {
          "dealId": "Deal id for the executed token swap",
          "metadata": "Unique ID that is generated throught the Prime Deals frontend",
          "module": "Address of this module"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "checkExecutability(uint32)": {
        "params": {
          "_dealId": "The dealId of the action (key to the mapping)"
        },
        "returns": {
          "_0": "bool        A bool flag indiciating whether the action can be executed"
        }
      },
      "createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)": {
        "params": {
          "_daos": "Array containing the DAOs that are involed in this action",
          "_deadline": "The amount of time between the creation of the swap and the time when it can no longer be executed, in seconds",
          "_metadata": "Unique ID that is generated throught the Prime Deals frontend",
          "_pathFrom": "Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Detailed overview on how to configure the array can be found at the TokenSwap struct description",
          "_pathTo": "Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Detailed overview on how to configure the array can be found at the TokenSwap struct description",
          "_tokens": "Array containing the tokens that are involed in this action"
        },
        "returns": {
          "_0": "uin32       The dealId of the new token swap"
        }
      },
      "executeSwap(uint32)": {
        "params": {
          "_dealId": "The dealId of the action (key to the mapping)"
        }
      },
      "getTokenswapFromMetadata(bytes32)": {
        "params": {
          "_metadata": "Unique ID that is generated throught the Prime Deals frontend"
        },
        "returns": {
          "swap": "        Token swap struct associated with the metadata"
        }
      },
      "hasDealExpired(uint32)": {
        "params": {
          "_dealId": "The dealId of the action (key to the mapping)"
        },
        "returns": {
          "_0": "bool         A bool flag indiciating whether token swap has expired"
        }
      },
      "setFee(uint32)": {
        "params": {
          "_feeInBasisPoints": "Fee amount in basis points (1% = 100)"
        }
      },
      "setFeeWallet(address)": {
        "details": "The fee system will be inactive if the feeWallet is set to a zero-address",
        "params": {
          "_feeWallet": "Address of the new fee wallet"
        }
      }
    },
    "title": "PrimeDeals Token Swap Module",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeeChanged(uint32,uint32)": {
        "notice": "This event is emitted when the fee is updated"
      },
      "FeeWalletChanged(address,address)": {
        "notice": "This event is emitted when the fee wallet address is updated"
      },
      "TokenSwapCreated(address,uint32,bytes32,address[],address[],uint256[][],uint256[][],uint32)": {
        "notice": "This event is emitted when a token swap is created"
      },
      "TokenSwapExecuted(address,uint32,bytes32)": {
        "notice": "This event is emitted when a token swap is executed"
      }
    },
    "kind": "user",
    "methods": {
      "checkExecutability(uint32)": {
        "notice": "Checks whether a token swap action can be executed, which is the case if all DAOs have deposited"
      },
      "createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)": {
        "notice": "Create a new token swap action and automatically creates Dao Deposit Manager for each DAO that does not have one"
      },
      "dealManager()": {
        "notice": "Address of the DealManager implementation"
      },
      "executeSwap(uint32)": {
        "notice": "Executes a token swap action"
      },
      "feeInBasisPoints()": {
        "notice": "Fee in basis points (100% = 10000)"
      },
      "feeWallet()": {
        "notice": "Wallet that is receiving the fees"
      },
      "getTokenswapFromMetadata(bytes32)": {
        "notice": "Returns the TokenSwap struct associated with the metadata"
      },
      "hasDealExpired(uint32)": {
        "notice": "Checks if the deal has been expired"
      },
      "metadataToDealId(bytes32)": {
        "notice": "Metadata => deal ID"
      },
      "setFee(uint32)": {
        "notice": "Sets a new fee"
      },
      "setFeeWallet(address)": {
        "notice": "Sets a new fee wallet"
      }
    },
    "notice": "Smart contract to handle token swap interactions for PrimeDeals",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4408,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeWallet",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4411,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeInBasisPoints",
        "offset": 20,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 7409,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "lastDealId",
        "offset": 24,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 7414,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "tokenSwaps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_struct(TokenSwap)7449_storage)"
      },
      {
        "astId": 7419,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "metadataToDealId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint32,t_struct(TokenSwap)7449_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct TokenSwapModule.TokenSwap)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenSwap)7449_storage"
      },
      "t_struct(TokenSwap)7449_storage": {
        "encoding": "inplace",
        "label": "struct TokenSwapModule.TokenSwap",
        "members": [
          {
            "astId": 7423,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "daos",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7427,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7432,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathFrom",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7437,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathTo",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7440,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 7443,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "executionDate",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 7446,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "metadata",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 7448,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "isExecuted",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}