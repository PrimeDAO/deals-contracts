{
  "address": "0x6cc679281471Db14ebCDD3323ed28354290fFc21",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldFeeWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeWallet",
          "type": "address"
        }
      ],
      "name": "FeeWalletChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "daos",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathFrom",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathTo",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "TokenSwapCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "TokenSwapExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_daos",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathFrom",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathTo",
          "type": "uint256[][]"
        },
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "_createSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseContract",
      "outputs": [
        {
          "internalType": "contract IBaseContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "checkExecutability",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_daos",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathFrom",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathTo",
          "type": "uint256[][]"
        },
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "createSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "executeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeInBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        }
      ],
      "name": "getTokenswap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "daos",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathFrom",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathTo",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "executionDate",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "internalType": "enum ModuleBase.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct TokenSwapModule.TokenSwap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "metadataToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleIdentifier",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleIdentifierString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeInBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeWallet",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSwaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executionDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        },
        {
          "internalType": "enum ModuleBase.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x861626dd43a27981748a78292fef659e9eab8e2dc226fa97b4bfa3633eea5c14",
  "receipt": {
    "to": null,
    "from": "0xc039897eE5A0d14A3d1F212922FaF7e159Ab619F",
    "contractAddress": "0x6cc679281471Db14ebCDD3323ed28354290fFc21",
    "transactionIndex": 22,
    "gasUsed": "2890503",
    "logsBloom": "0x
    "blockHash": "0xf2fc9f0d4cb76473eca1f8a3a4677f5c2defa5e03a0f82ae54f35347fb552a4a",
    "transactionHash": "0x861626dd43a27981748a78292fef659e9eab8e2dc226fa97b4bfa3633eea5c14",
    "logs": [],
    "blockNumber": 10314409,
    "cumulativeGasUsed": "8932841",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7431c9bfA33add7BccCfbAEF79B597bea54702d6"
  ],
  "solcInputHash": "cfb4d5c1adc8b1c777f04cbfe46f0a57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"TokenSwapCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TokenSwapExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"_createSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseContract\",\"outputs\":[{\"internalType\":\"contract IBaseContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"checkExecutability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"createSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"executeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"getTokenswap\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"enum ModuleBase.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenSwapModule.TokenSwap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"metadataToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleIdentifierString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSwaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"enum ModuleBase.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract to handle token swap        interactions for PrimeDeals\",\"events\":{\"TokenSwapCreated(uint256,bytes,address[],address[],uint256[][],uint256[][],uint256)\":{\"details\":\"pathTo: Used for storing how many tokens does each DAO receive from the module includes vesting. For each DAO there is a tuple of four values: instant amount, vested amount, vesting cliff, vesting duration. The start time will be the block.timestamp when executing the deal. This timestamp + vestingDuration can be used to calculate the vesting end. Example on how the values are stored: token -> DAO -> tuple(4) [[instantAmount_dao1, vestedAmount_dao1, vestingCliff_dao1, vestingDuration_dao1, instantAmount_dao2, ...], [...]]\"}},\"kind\":\"dev\",\"methods\":{\"_createSwap(address[],address[],uint256[][],uint256[][],bytes,uint256)\":{\"details\":\"Create a new token swap action\",\"params\":{\"_daos\":\"Array containing the DAOs that are involed in this action\",\"_deadline\":\"Time until which this action can be executed (unix timestamp)\",\"_pathFrom\":\"Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens\",\"_pathTo\":\"Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]\",\"_tokens\":\"Array containing the tokens that are involed in this action\"},\"returns\":{\"_0\":\"The ID of the new action\"}},\"checkExecutability(uint256)\":{\"details\":\"Checks whether a token swap action can be executed (which is the case if all DAOs have deposited)\",\"params\":{\"_id\":\"The ID of the action (position in the array)\"},\"returns\":{\"_0\":\"A bool flag indiciating whether the action can be executed\"}},\"createSwap(address[],address[],uint256[][],uint256[][],bytes,uint256)\":{\"details\":\"Create a new token swap action and automatically creates Deposit Contracts for each DAO that does not have one\",\"params\":{\"_daos\":\"Array containing the DAOs that are involed in this action\",\"_deadline\":\"Time until which this action can be executed (unix timestamp)\",\"_pathFrom\":\"Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens\",\"_pathTo\":\"Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]\",\"_tokens\":\"Array containing the tokens that are involed in this action\"},\"returns\":{\"_0\":\"The ID of the new action\"}},\"executeSwap(uint256)\":{\"details\":\"Executes a token swap action\",\"params\":{\"_id\":\"The ID of the action (position in the array)\"}},\"setFee(uint256)\":{\"details\":\"Sets a new fee\",\"params\":{\"_feeInBasisPoints\":\"Fee amount in basis points (1% = 10000)\"}},\"setFeeWallet(address)\":{\"details\":\"Sets a new fee wallet\",\"params\":{\"_feeWallet\":\"Address of the new fee wallet\"}}},\"title\":\"PrimeDeals Token Swap Module\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/tokenswap/TokenSwapModule.sol\":\"TokenSwapModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseContract.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IBaseContract {\\n    function createDepositContract(address _dao) external;\\n\\n    function hasDepositContract(address _dao) external view returns (bool);\\n\\n    function getDepositContract(address _dao) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function addressIsModule(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfa23fb1c31aaec0a91012e9c568c59603bef7f7733b410b38bb58d84647174be\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDepositContract {\\n    function initialize(address _dao) external;\\n\\n    function migrateBaseContract(address _newBaseContract) external;\\n\\n    function deposit(\\n        bytes32 _processID,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function multipleDeposits(\\n        bytes32 _processID,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable;\\n\\n    function registerDeposit(bytes32 _processID, address _token) external;\\n\\n    function registerDeposits(bytes32 _processID, address[] calldata _tokens)\\n        external;\\n\\n    function withdraw(\\n        bytes32 _processID,\\n        uint256 _depositID,\\n        address _sender\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function sendToModule(\\n        bytes32 _processID,\\n        address _token,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function startVesting(\\n        bytes32 _actionId,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _start,\\n        uint256 _end\\n    ) external;\\n\\n    function claimVestings() external;\\n\\n    function verifyBalance(address _token) external view;\\n\\n    function getDeposit(bytes32 _processID, uint256 _depositID)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAvailableProcessBalance(bytes32 _processID, address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalDepositCount(bytes32 _processID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableAmountOfUser(\\n        bytes32 _processID,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getBalance(address _token) external view returns (uint256);\\n\\n    function getVestedBalance(address _token) external view returns (uint256);\\n\\n    function getProcessID(string memory _module, uint256 _id)\\n        external\\n        pure\\n        returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1af367a4bdf0a740b15a61c37fb44421702dd70292d14faa02574fe5512684bf\",\"license\":\"Unlicense\"},\"contracts/modules/ModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\nimport \\\"../interfaces/IBaseContract.sol\\\";\\n\\n/**\\n * @title PrimeDeals Module Base\\n * @dev   Smart contract to serve as the\\n          basis for each module\\n */\\ncontract ModuleBase {\\n    // String of the unique module identifier\\n    // e.g. TOKEN_SWAP_MODULE\\n    string public moduleIdentifierString;\\n\\n    // keccak256 of the identifier string\\n    bytes32 public moduleIdentifier;\\n\\n    IBaseContract public baseContract;\\n\\n    enum Status {\\n        NULL,\\n        ACTIVE,\\n        CANCELLED,\\n        DONE\\n    }\\n\\n    constructor(address _baseContract, string memory _moduleIdentifier) {\\n        require(\\n            _baseContract != address(0),\\n            \\\"Module: invalid base contract address\\\"\\n        );\\n        baseContract = IBaseContract(_baseContract);\\n        require(\\n            bytes(_moduleIdentifier).length > 0,\\n            \\\"Module: module identifier invalid\\\"\\n        );\\n        moduleIdentifierString = _moduleIdentifier;\\n        moduleIdentifier = keccak256(abi.encode(moduleIdentifierString));\\n    }\\n\\n    /**\\n      * @dev                Sends tokens from a deposit contract to the module\\n      * @param _id          ID of the action this is related to\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _path        Double nested array containing the amounts of tokens for each\\n                            token for each dao to be send\\n      * @return amountsIn   Array containing the total amounts sent per token\\n    */\\n    function _pullTokensIntoModule(\\n        uint256 _id,\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _path\\n    ) internal returns (uint256[] memory amountsIn) {\\n        amountsIn = new uint256[](_tokens.length);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(_path[i].length == _daos.length, \\\"Module: length mismatch\\\");\\n            for (uint256 j = 0; j < _path[i].length; j++) {\\n                if (_path[i][j] > 0) {\\n                    amountsIn[i] += _path[i][j];\\n                    IDepositContract(baseContract.getDepositContract(_daos[j]))\\n                        .sendToModule(\\n                            keccak256(abi.encode(moduleIdentifierString, _id)),\\n                            _tokens[i],\\n                            _path[i][j]\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev            Calls the approval function of a token\\n     * @param _token   Address of the token\\n     * @param _to      Target of the approval\\n     * @param _amount  Amount to be approved\\n     */\\n    function _approveToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(IERC20(_token).approve(_to, _amount), \\\"Module: approve failed\\\");\\n    }\\n\\n    /**\\n     * @dev            Calls the approval function of a token\\n                       for the deposit contract of a DAO\\n     * @param _token   Address of the token\\n     * @param _dao     DAO whose deposit contract is the target\\n     * @param _amount  Amount to be approved\\n     */\\n    function _approveDepositContract(\\n        address _token,\\n        address _dao,\\n        uint256 _amount\\n    ) internal {\\n        _approveToken(_token, baseContract.getDepositContract(_dao), _amount);\\n    }\\n\\n    /**\\n     * @dev            Transfers an amount of tokens\\n     * @param _token   Address of the token\\n     * @param _to      Target of the transfer\\n     * @param _amount  Amount to be sent\\n     */\\n    function _transferToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            IERC20(_token).transfer(_to, _amount),\\n            \\\"Module: transfer failed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev            Transfers an amount of tokens from an address\\n     * @param _token   Address of the token\\n     * @param _from    Source of the transfer\\n     * @param _to      Target of the transfer\\n     * @param _amount  Amount to be sent\\n     */\\n    function _transferFromToken(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            IERC20(_token).transferFrom(_from, _to, _amount),\\n            \\\"Module: transfer from failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe540789eea0ffa1a03e1bb89782caad52acac461d01f8928566898347365beb7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/ModuleBaseWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ModuleBase.sol\\\";\\n\\n/**\\n * @title PrimeDeals Module Base Fee Extension\\n * @dev   Smart contract to extend the module\\n          base with a fee mechanim\\n */\\ncontract ModuleBaseWithFee is ModuleBase {\\n    // Wallet that is receiving the fees\\n    address public feeWallet;\\n    // Fee in basis points (1% = 10000)\\n    uint256 public feeInBasisPoints;\\n\\n    constructor(address _baseContract, string memory _moduleIdentifier)\\n        ModuleBase(_baseContract, _moduleIdentifier)\\n    {}\\n\\n    event FeeWalletChanged(address oldFeeWallet, address newFeeWallet);\\n\\n    event FeeChanged(uint256 oldFee, uint256 newFee);\\n\\n    /**\\n     * @dev                 Sets a new fee wallet\\n     * @param _feeWallet    Address of the new fee wallet\\n     */\\n    function setFeeWallet(address _feeWallet) external {\\n        require(msg.sender == baseContract.owner(), \\\"Fee: not authorized\\\");\\n        emit FeeWalletChanged(feeWallet, _feeWallet);\\n        feeWallet = _feeWallet;\\n    }\\n\\n    /**\\n     * @dev                         Sets a new fee\\n     * @param _feeInBasisPoints     Fee amount in basis points (1% = 10000)\\n     */\\n    function setFee(uint256 _feeInBasisPoints) external {\\n        require(msg.sender == baseContract.owner(), \\\"Fee: not authorized\\\");\\n        require(_feeInBasisPoints <= 10000, \\\"Fee: can't be more than 100%\\\");\\n        emit FeeChanged(feeInBasisPoints, _feeInBasisPoints);\\n        feeInBasisPoints = _feeInBasisPoints;\\n    }\\n\\n    /**\\n     * @dev             Pays the fee in a token and returns the remainder\\n     * @param _token    Token in which the transfer happens\\n     * @param _amount   Amount of the transfer\\n     * @return          Remaining amount after the fee payment\\n     */\\n    function _payFeeAndReturnRemainder(address _token, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (feeWallet != address(0) && feeInBasisPoints > 0) {\\n            uint256 fee = (_amount * feeInBasisPoints) / 10000;\\n            _transferToken(_token, feeWallet, fee);\\n\\n            return _amount - fee;\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @dev             Transfers a token amount with automated fee payment\\n     * @param _token    Token in which the transfer happens\\n     * @param _to       Target of the transfer\\n     * @param _amount   Amount of the transfer\\n     */\\n    function _transferTokenWithFee(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        _transferToken(_token, _to, _payFeeAndReturnRemainder(_token, _amount));\\n    }\\n\\n    /**\\n     * @dev             Transfers a token amount from someone with \\n                        automated fee payment\\n     * @param _token    Token in which the transfer happens\\n     * @param _from     Source of the transfer\\n     * @param _to       Target of the transfer\\n     * @param _amount   Amount of the transfer\\n     */\\n    function _transferFromTokenWithFee(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        _transferFromToken(\\n            _token,\\n            _from,\\n            _to,\\n            _payFeeAndReturnRemainder(_token, _amount)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb3460a9933dccef2d6e0cdab4c467a0f63be2a7dde6e76b4d0315db70559ddb1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/tokenswap/TokenSwapModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../ModuleBaseWithFee.sol\\\";\\n\\n/**\\n * @title PrimeDeals Token Swap Module\\n * @dev   Smart contract to handle token swap\\n *        interactions for PrimeDeals\\n */\\ncontract TokenSwapModule is ModuleBaseWithFee {\\n    TokenSwap[] public tokenSwaps;\\n\\n    mapping(bytes => uint256) public metadataToId;\\n\\n    struct TokenSwap {\\n        // the participating DAOs\\n        address[] daos;\\n        // the tokens involved in the swap\\n        address[] tokens;\\n        // the token flow from the DAOs to the module\\n        uint256[][] pathFrom;\\n        // the token flow from the module to the DAO\\n        uint256[][] pathTo;\\n        // unix timestamp of the deadline\\n        uint256 deadline;\\n        // unix timestamp of the execution\\n        uint256 executionDate;\\n        // hash of the deal information.\\n        bytes metadata;\\n        // status of the deal\\n        Status status;\\n    }\\n\\n    /**\\n     * @dev\\n     * pathFrom Description:\\n     * Used to storing how many tokens does each DAO send to the module\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> amount\\n     * [[123, 0, 123], [0, 123, 0]]\\n     * token 1: DAO 1 sends 123, DAO 2 sends 0, DAO 3 sends 123, etc.\\n     */\\n\\n    /**\\n     * @dev\\n     * pathTo:\\n     * Used for storing how many tokens does each DAO receive from the module\\n     * includes vesting. For each DAO there is a tuple of four values:\\n     * instant amount, vested amount, vesting cliff, vesting duration.\\n     * The start time will be the block.timestamp when executing the deal.\\n     * This timestamp + vestingDuration can be used to calculate the vesting end.\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> tuple(4)\\n     * [[instantAmount_dao1, vestedAmount_dao1, vestingCliff_dao1,\\n     * vestingDuration_dao1, instantAmount_dao2, ...], [...]]\\n     */\\n\\n    event TokenSwapCreated(\\n        uint256 indexed id,\\n        bytes indexed metadata,\\n        address[] daos,\\n        address[] tokens,\\n        uint256[][] pathFrom,\\n        uint256[][] pathTo,\\n        uint256 deadline\\n    );\\n\\n    event TokenSwapExecuted(uint256 indexed id);\\n\\n    constructor(address _baseContract)\\n        ModuleBaseWithFee(_baseContract, \\\"TOKEN_SWAP_MODULE\\\")\\n    {}\\n\\n    /**\\n      * @dev                Create a new token swap action\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains absolute numbers of tokens\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains a tuple(4) consisting of instant amount, vested \\n                                amount, vesting start, vesting end which then makes this \\n                                array look like:\\n                                [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1,\\n                                vestingEnd_dao1, instantAmount_dao2, ...], [...]]\\n      * @param _deadline    Time until which this action can be executed (unix timestamp)\\n      * @return             The ID of the new action\\n    */\\n    function _createSwap(\\n        address[] calldata _daos,\\n        address[] calldata _tokens,\\n        uint256[][] calldata _pathFrom,\\n        uint256[][] calldata _pathTo,\\n        bytes calldata _metadata,\\n        uint256 _deadline\\n    ) public returns (uint256) {\\n        require(\\n            metadataToId[_metadata] == 0,\\n            \\\"Module: metadata already exists\\\"\\n        );\\n        require(_daos.length >= 2, \\\"Module: at least 2 daos required\\\");\\n        require(_tokens.length >= 1, \\\"Module: at least 1 token required\\\");\\n        require(\\n            _tokens.length == _pathFrom.length &&\\n                _pathFrom.length == _pathTo.length &&\\n                _pathFrom[0].length == _daos.length &&\\n                _pathTo[0].length / 4 == _daos.length,\\n            \\\"Module: invalid array lengths\\\"\\n        );\\n\\n        TokenSwap memory ts = TokenSwap(\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline,\\n            0,\\n            _metadata,\\n            Status.ACTIVE\\n        );\\n        tokenSwaps.push(ts);\\n\\n        metadataToId[_metadata] = tokenSwaps.length - 1;\\n\\n        emit TokenSwapCreated(\\n            tokenSwaps.length - 1,\\n            _metadata,\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline\\n        );\\n\\n        return tokenSwaps.length - 1;\\n    }\\n\\n    /**\\n      * @dev                Create a new token swap action and automatically\\n                            creates Deposit Contracts for each DAO that does not have one\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains absolute numbers of tokens\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains a tuple(4) consisting of instant amount, vested \\n                                amount, vesting start, vesting end which then makes this \\n                                array look like:\\n                                [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1,\\n                                vestingEnd_dao1, instantAmount_dao2, ...], [...]]\\n      * @param _deadline    Time until which this action can be executed (unix timestamp)\\n      * @return             The ID of the new action\\n    */\\n    function createSwap(\\n        address[] calldata _daos,\\n        address[] calldata _tokens,\\n        uint256[][] calldata _pathFrom,\\n        uint256[][] calldata _pathTo,\\n        bytes calldata _metadata,\\n        uint256 _deadline\\n    ) external returns (uint256) {\\n        for (uint256 i = 0; i < _daos.length; i++) {\\n            if (!baseContract.hasDepositContract(_daos[i])) {\\n                baseContract.createDepositContract(_daos[i]);\\n            }\\n        }\\n\\n        return\\n            _createSwap(\\n                _daos,\\n                _tokens,\\n                _pathFrom,\\n                _pathTo,\\n                _metadata,\\n                _deadline\\n            );\\n    }\\n\\n    /**\\n      * @dev            Checks whether a token swap action can be executed\\n                        (which is the case if all DAOs have deposited)\\n      * @param _id      The ID of the action (position in the array)\\n      * @return         A bool flag indiciating whether the action can be executed\\n    */\\n    function checkExecutability(uint256 _id)\\n        external\\n        view\\n        validId(_id)\\n        returns (bool)\\n    {\\n        TokenSwap memory ts = tokenSwaps[_id];\\n        if (ts.status != Status.ACTIVE) {\\n            return false;\\n        }\\n        if (ts.deadline < block.timestamp) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < ts.tokens.length; i++) {\\n            for (uint256 j = 0; j < ts.pathFrom[i].length; j++) {\\n                // for each token and each pathFrom entry for this\\n                // token, check whether the corresponding DAO\\n                // has deposited the corresponding amount into their\\n                // deposit contract\\n                if (\\n                    IDepositContract(\\n                        baseContract.getDepositContract(ts.daos[j])\\n                    ).getAvailableProcessBalance(\\n                            keccak256(abi.encode(moduleIdentifierString, _id)),\\n                            ts.tokens[i]\\n                        ) < ts.pathFrom[i][j]\\n                ) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev            Executes a token swap action\\n     * @param _id      The ID of the action (position in the array)\\n     */\\n    function executeSwap(uint256 _id) external validId(_id) activeStatus(_id) {\\n        TokenSwap memory ts = tokenSwaps[_id];\\n\\n        require(ts.deadline >= block.timestamp, \\\"Module: swap expired\\\");\\n\\n        // transfer the tokens from the deposit contract of the DAOs\\n        // into this module\\n        uint256[] memory amountsIn = _pullTokensIntoModule(\\n            _id,\\n            ts.daos,\\n            ts.tokens,\\n            ts.pathFrom\\n        );\\n\\n        // distribute the tokens from this module to the DAOs\\n        // and (if applicable) and their vesting contracts\\n        uint256[] memory amountsOut = _distributeTokens(ts, _id);\\n\\n        // verify whether the amounts being pulled and pushed match\\n        for (uint256 i = 0; i < ts.tokens.length; i++) {\\n            require(amountsIn[i] == amountsOut[i], \\\"Module: amount mismatch\\\");\\n        }\\n\\n        ts.status = Status.DONE;\\n        ts.executionDate = block.timestamp;\\n        emit TokenSwapExecuted(_id);\\n    }\\n\\n    /**\\n      * @dev                Distributes the tokens based on the supplied\\n                            information to the DAOs or their vesting contracts\\n      * @param _ts          TokenSwap object containing all the information\\n                            of the action\\n      * @param _id          The ID of the action (position in the array)\\n      * @return amountsOut  The two min values for the token amounts _ts\\n    */\\n    function _distributeTokens(TokenSwap memory _ts, uint256 _id)\\n        internal\\n        returns (uint256[] memory amountsOut)\\n    {\\n        amountsOut = new uint256[](_ts.tokens.length);\\n        // Distribute tokens from the module\\n        for (uint256 i = 0; i < _ts.tokens.length; i++) {\\n            for (uint256 k = 0; k < _ts.pathTo[i].length / 4; k++) {\\n                // every 4 values, the values for a new dao start\\n                // value 0 = instant amount\\n                // value 1 = vested amount\\n                // value 2 = vesting cliff\\n                // value 3 = vesting duration\\n                if (_ts.pathTo[i][k * 4] > 0) {\\n                    amountsOut[i] += _ts.pathTo[i][k * 4];\\n                    _transferTokenWithFee(\\n                        _ts.tokens[i],\\n                        _ts.daos[k],\\n                        _ts.pathTo[i][k * 4]\\n                    );\\n                }\\n                if (_ts.pathTo[i][k * 4 + 1] > 0) {\\n                    amountsOut[i] += _ts.pathTo[i][k * 4 + 1];\\n                    uint256 amount = _payFeeAndReturnRemainder(\\n                        _ts.tokens[i],\\n                        _ts.pathTo[i][k * 4 + 1]\\n                    );\\n                    _approveDepositContract(_ts.tokens[i], _ts.daos[k], amount);\\n                    IDepositContract(\\n                        baseContract.getDepositContract(_ts.daos[k])\\n                    ).startVesting(\\n                            keccak256(abi.encode(moduleIdentifierString, _id)),\\n                            _ts.tokens[i],\\n                            amount, // amount\\n                            _ts.pathTo[i][k * 4 + 2], // start\\n                            _ts.pathTo[i][k * 4 + 3] // end\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    function getTokenswap(bytes memory _metadata)\\n        public\\n        view\\n        returns (TokenSwap memory swap)\\n    {\\n        return tokenSwaps[metadataToId[_metadata]];\\n    }\\n\\n    modifier validId(uint256 _id) {\\n        require(_id <= tokenSwaps.length, \\\"Module: id doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier activeStatus(uint256 _id) {\\n        require(\\n            tokenSwaps[_id].status == Status.ACTIVE,\\n            \\\"Module: id not active\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4118c5b180fd5ff6dae62649d8ac5f8fe4107395fa14bf64fda5cdf2c0556eb9\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200354338038062003543833981016040819052620000349162000236565b604080518082019091526011815270544f4b454e5f535741505f4d4f44554c4560781b6020820152819081816001600160a01b038216620000ca5760405162461bcd60e51b815260206004820152602560248201527f4d6f64756c653a20696e76616c6964206261736520636f6e7472616374206164604482015264647265737360d81b60648201526084015b60405180910390fd5b600280546001600160a01b0319166001600160a01b03841617905580516200013f5760405162461bcd60e51b815260206004820152602160248201527f4d6f64756c653a206d6f64756c65206964656e74696669657220696e76616c696044820152601960fa1b6064820152608401620000c1565b80516200015490600090602084019062000190565b506000604051602001620001699190620002a5565b60405160208183030381529060405280519060200120600181905550505050505062000355565b8280546200019e9062000268565b90600052602060002090601f016020900481019282620001c257600085556200020d565b82601f10620001dd57805160ff19168380011785556200020d565b828001600101855582156200020d579182015b828111156200020d578251825591602001919060010190620001f0565b506200021b9291506200021f565b5090565b5b808211156200021b576000815560010162000220565b6000602082840312156200024957600080fd5b81516001600160a01b03811681146200026157600080fd5b9392505050565b600181811c908216806200027d57607f821691505b602082108114156200029f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208083526000845481600182811c915080831680620002c857607f831692505b858310811415620002e757634e487b7160e01b85526022600452602485fd5b878601838152602001818015620003075760018114620003195762000346565b60ff1986168252878201965062000346565b60008b81526020902060005b86811015620003405781548482015290850190890162000325565b83019750505b50949998505050505050505050565b6131de80620003656000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806379573cf91161008c578063b45edf4711610066578063b45edf4714610201578063c74de1121461020a578063ea03570d14610235578063f25f4b561461024a57600080fd5b806379573cf9146101d257806390d49b9d146101db578063a9ab232b146101ee57600080fd5b806340bf679c116100c857806340bf679c1461015c57806345033de01461017f5780635b32619c1461019257806369fe0e2d146101bd57600080fd5b806312d335e2146100ef578063196f41f01461011b5780633889e19a1461013b575b600080fd5b6101026100fd3660046127bd565b61025d565b604051610112949392919061286a565b60405180910390f35b61012e6101293660046128e8565b610328565b6040516101129190612a40565b61014e610149366004612b95565b61064f565b604051908152602001610112565b61016f61016a3660046127bd565b610ade565b6040519015158152602001610112565b61014e61018d366004612b95565b611087565b6002546101a5906001600160a01b031681565b6040516001600160a01b039091168152602001610112565b6101d06101cb3660046127bd565b6111ff565b005b61014e60015481565b6101d06101e9366004612ca7565b61135f565b6101d06101fc3660046127bd565b611495565b61014e60045481565b61014e6102183660046128e8565b805160208183018101805160068252928201919093012091525481565b61023d6119c0565b6040516101129190612ccb565b6003546101a5906001600160a01b031681565b6005818154811061026d57600080fd5b906000526020600020906008020160009150905080600401549080600501549080600601805461029c90612cde565b80601f01602080910402602001604051908101604052809291908181526020018280546102c890612cde565b80156103155780601f106102ea57610100808354040283529160200191610315565b820191906000526020600020905b8154815290600101906020018083116102f857829003601f168201915b5050506007909301549192505060ff1684565b6103306125a9565b60056006836040516103429190612d13565b9081526020016040518091039020548154811061036157610361612d2f565b906000526020600020906008020160405180610100016040529081600082018054806020026020016040519081016040528092919081815260200182805480156103d457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103b6575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561043657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610418575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156104d0576000848152602090819020830180546040805182850281018501909152818152928301828280156104bc57602002820191906000526020600020905b8154815260200190600101908083116104a8575b505050505081526020019060010190610464565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156105695760008481526020908190208301805460408051828502810185019091528181529283018282801561055557602002820191906000526020600020905b815481526020019060010190808311610541575b5050505050815260200190600101906104fd565b505050508152602001600482015481526020016005820154815260200160068201805461059590612cde565b80601f01602080910402602001604051908101604052809291908181526020018280546105c190612cde565b801561060e5780601f106105e35761010080835404028352916020019161060e565b820191906000526020600020905b8154815290600101906020018083116105f157829003601f168201915b5050509183525050600782015460209091019060ff16600381111561063557610635612832565b600381111561064657610646612832565b90525092915050565b600060068484604051610663929190612d45565b9081526020016040518091039020546000146106c65760405162461bcd60e51b815260206004820152601f60248201527f4d6f64756c653a206d6574616461746120616c7265616479206578697374730060448201526064015b60405180910390fd5b60028b10156107175760405162461bcd60e51b815260206004820181905260248201527f4d6f64756c653a206174206c6561737420322064616f7320726571756972656460448201526064016106bd565b60018910156107725760405162461bcd60e51b815260206004820152602160248201527f4d6f64756c653a206174206c65617374203120746f6b656e20726571756972656044820152601960fa1b60648201526084016106bd565b888714801561078057508685145b80156107af57508a888860008161079957610799612d2f565b90506020028101906107ab9190612d55565b9050145b80156107e957508a600487876000816107ca576107ca612d2f565b90506020028101906107dc9190612d55565b6107e7929150612db5565b145b6108355760405162461bcd60e51b815260206004820152601d60248201527f4d6f64756c653a20696e76616c6964206172726179206c656e6774687300000060448201526064016106bd565b60006040518061010001604052808e8e808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050908252506040805160208e810282810182019093528e82529283019290918f918f9182918501908490808284376000920191909152505050908252506020016108be8a8c612dfb565b81526020016108cd888a612dfb565b81526020018481526020016000815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001600190526005805460018101825560009190915281518051929350839260089092027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00191610972918391602091909101906125fe565b50602082810151805161098b92600185019201906125fe565b50604082015180516109a7916002840191602090910190612663565b50606082015180516109c3916003840191602090910190612663565b506080820151600482015560a0820151600582015560c082015180516109f39160068401916020909101906126bc565b5060e082015160078201805460ff19166001836003811115610a1757610a17612832565b021790555050600554610a2d9150600190612ec6565b60068686604051610a3f929190612d45565b90815260405190819003602001812091909155610a5f9086908690612d45565b604051908190039020600554610a7790600190612ec6565b7ff1ac09b179f42add63d6c22043c66c48664a42ffaf38871d262324962fa231a28f8f8f8f8f8f8f8f8d604051610ab699989796959493929190612fe6565b60405180910390a3600554610acd90600190612ec6565b9d9c50505050505050505050505050565b6005546000908290811115610b305760405162461bcd60e51b8152602060048201526018602482015277135bd91d5b194e881a5908191bd95cdb89dd08195e1a5cdd60421b60448201526064016106bd565b600060058481548110610b4557610b45612d2f565b90600052602060002090600802016040518061010001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610bb857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b9a575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610c1a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bfc575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610cb457600084815260209081902083018054604080518285028101850190915281815292830182828015610ca057602002820191906000526020600020905b815481526020019060010190808311610c8c575b505050505081526020019060010190610c48565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610d4d57600084815260209081902083018054604080518285028101850190915281815292830182828015610d3957602002820191906000526020600020905b815481526020019060010190808311610d25575b505050505081526020019060010190610ce1565b5050505081526020016004820154815260200160058201548152602001600682018054610d7990612cde565b80601f0160208091040260200160405190810160405280929190818152602001828054610da590612cde565b8015610df25780601f10610dc757610100808354040283529160200191610df2565b820191906000526020600020905b815481529060010190602001808311610dd557829003601f168201915b5050509183525050600782015460209091019060ff166003811115610e1957610e19612832565b6003811115610e2a57610e2a612832565b905250905060018160e001516003811115610e4757610e47612832565b14610e56576000925050611081565b4281608001511015610e6c576000925050611081565b60005b81602001515181101561107a5760005b82604001518281518110610e9557610e95612d2f565b6020026020010151518110156110675782604001518281518110610ebb57610ebb612d2f565b60200260200101518181518110610ed457610ed4612d2f565b6020908102919091010151600254845180516001600160a01b039092169163852f26a0919085908110610f0957610f09612d2f565b60200260200101516040518263ffffffff1660e01b8152600401610f3c91906001600160a01b0391909116815260200190565b602060405180830381865afa158015610f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7d919061304e565b6001600160a01b03166332296e0b600089604051602001610f9f92919061306b565b6040516020818303038152906040528051906020012086602001518681518110610fcb57610fcb612d2f565b60200260200101516040518363ffffffff1660e01b81526004016110029291909182526001600160a01b0316602082015260400190565b602060405180830381865afa15801561101f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611043919061311b565b10156110555760009450505050611081565b8061105f81613134565b915050610e7f565b508061107281613134565b915050610e6f565b5060019250505b50919050565b6000805b8b8110156111db576002546001600160a01b0316636bafdaac8e8e848181106110b6576110b6612d2f565b90506020020160208101906110cb9190612ca7565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561110f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611133919061314f565b6111c9576002546001600160a01b031663aba9650e8e8e8481811061115a5761115a612d2f565b905060200201602081019061116f9190612ca7565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156111b057600080fd5b505af11580156111c4573d6000803e3d6000fd5b505050505b806111d381613134565b91505061108b565b506111ef8c8c8c8c8c8c8c8c8c8c8c61064f565b9c9b505050505050505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611276919061304e565b6001600160a01b0316336001600160a01b0316146112cc5760405162461bcd60e51b81526020600482015260136024820152721199594e881b9bdd08185d5d1a1bdc9a5e9959606a1b60448201526064016106bd565b61271081111561131e5760405162461bcd60e51b815260206004820152601c60248201527f4665653a2063616e2774206265206d6f7265207468616e20313030250000000060448201526064016106bd565b60045460408051918252602082018390527f5fc463da23c1b063e66f9e352006a7fbe8db7223c455dc429e881a2dfe2f94f1910160405180910390a1600455565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d6919061304e565b6001600160a01b0316336001600160a01b03161461142c5760405162461bcd60e51b81526020600482015260136024820152721199594e881b9bdd08185d5d1a1bdc9a5e9959606a1b60448201526064016106bd565b600354604080516001600160a01b03928316815291831660208301527f9f4f5dce3c4d197b5d7496cb96e25f0a89809167195964b0daa3ef5fed63c00a910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b60055481908111156114e45760405162461bcd60e51b8152602060048201526018602482015277135bd91d5b194e881a5908191bd95cdb89dd08195e1a5cdd60421b60448201526064016106bd565b816001600582815481106114fa576114fa612d2f565b600091825260209091206007600890920201015460ff16600381111561152257611522612832565b146115675760405162461bcd60e51b81526020600482015260156024820152744d6f64756c653a206964206e6f742061637469766560581b60448201526064016106bd565b60006005848154811061157c5761157c612d2f565b906000526020600020906008020160405180610100016040529081600082018054806020026020016040519081016040528092919081815260200182805480156115ef57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115d1575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561165157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611633575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156116eb576000848152602090819020830180546040805182850281018501909152818152928301828280156116d757602002820191906000526020600020905b8154815260200190600101908083116116c3575b50505050508152602001906001019061167f565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156117845760008481526020908190208301805460408051828502810185019091528181529283018282801561177057602002820191906000526020600020905b81548152602001906001019080831161175c575b505050505081526020019060010190611718565b50505050815260200160048201548152602001600582015481526020016006820180546117b090612cde565b80601f01602080910402602001604051908101604052809291908181526020018280546117dc90612cde565b80156118295780601f106117fe57610100808354040283529160200191611829565b820191906000526020600020905b81548152906001019060200180831161180c57829003601f168201915b5050509183525050600782015460209091019060ff16600381111561185057611850612832565b600381111561186157611861612832565b81525050905042816080015110156118b25760405162461bcd60e51b8152602060048201526014602482015273135bd91d5b194e881cddd85c08195e1c1a5c995960621b60448201526064016106bd565b60006118cc85836000015184602001518560400151611a4e565b905060006118da8387611d95565b905060005b83602001515181101561197f578181815181106118fe576118fe612d2f565b602002602001015183828151811061191857611918612d2f565b60200260200101511461196d5760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a20616d6f756e74206d69736d6174636800000000000000000060448201526064016106bd565b8061197781613134565b9150506118df565b50600360e08401524260a084015260405186907f76f19c9edafbe983391d9eaad9c2d2630b4f9bc80de49978dc57f58d2216adc690600090a2505050505050565b600080546119cd90612cde565b80601f01602080910402602001604051908101604052809291908181526020018280546119f990612cde565b8015611a465780601f10611a1b57610100808354040283529160200191611a46565b820191906000526020600020905b815481529060010190602001808311611a2957829003601f168201915b505050505081565b6060825167ffffffffffffffff811115611a6a57611a6a6128a1565b604051908082528060200260200182016040528015611a93578160200160208202803683370190505b50905060005b8351811015611d8c578451838281518110611ab657611ab6612d2f565b60200260200101515114611b0c5760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a206c656e677468206d69736d6174636800000000000000000060448201526064016106bd565b60005b838281518110611b2157611b21612d2f565b602002602001015151811015611d79576000848381518110611b4557611b45612d2f565b60200260200101518281518110611b5e57611b5e612d2f565b60200260200101511115611d6757838281518110611b7e57611b7e612d2f565b60200260200101518181518110611b9757611b97612d2f565b6020026020010151838381518110611bb157611bb1612d2f565b60200260200101818151611bc59190613171565b90525060025486516001600160a01b039091169063852f26a090889084908110611bf157611bf1612d2f565b60200260200101516040518263ffffffff1660e01b8152600401611c2491906001600160a01b0391909116815260200190565b602060405180830381865afa158015611c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c65919061304e565b6001600160a01b031663e1b32e6e600089604051602001611c8792919061306b565b60405160208183030381529060405280519060200120878581518110611caf57611caf612d2f565b6020026020010151878681518110611cc957611cc9612d2f565b60200260200101518581518110611ce257611ce2612d2f565b60200260200101516040518463ffffffff1660e01b8152600401611d22939291909283526001600160a01b03919091166020830152604082015260600190565b6020604051808303816000875af1158015611d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d65919061314f565b505b80611d7181613134565b915050611b0f565b5080611d8481613134565b915050611a99565b50949350505050565b606082602001515167ffffffffffffffff811115611db557611db56128a1565b604051908082528060200260200182016040528015611dde578160200160208202803683370190505b50905060005b8360200151518110156123225760005b600485606001518381518110611e0c57611e0c612d2f565b602002602001015151611e1f9190612db5565b81101561230f57600085606001518381518110611e3e57611e3e612d2f565b6020026020010151826004611e539190613189565b81518110611e6357611e63612d2f565b60200260200101511115611f675784606001518281518110611e8757611e87612d2f565b6020026020010151816004611e9c9190613189565b81518110611eac57611eac612d2f565b6020026020010151838381518110611ec657611ec6612d2f565b60200260200101818151611eda9190613171565b90525060208501518051611f67919084908110611ef957611ef9612d2f565b602002602001015186600001518381518110611f1757611f17612d2f565b602002602001015187606001518581518110611f3557611f35612d2f565b6020026020010151846004611f4a9190613189565b81518110611f5a57611f5a612d2f565b6020026020010151612329565b600085606001518381518110611f7f57611f7f612d2f565b6020026020010151826004611f949190613189565b611f9f906001613171565b81518110611faf57611faf612d2f565b602002602001015111156122fd5784606001518281518110611fd357611fd3612d2f565b6020026020010151816004611fe89190613189565b611ff3906001613171565b8151811061200357612003612d2f565b602002602001015183838151811061201d5761201d612d2f565b602002602001018181516120319190613171565b905250602085015180516000916120ad918590811061205257612052612d2f565b60200260200101518760600151858151811061207057612070612d2f565b60200260200101518460046120859190613189565b612090906001613171565b815181106120a0576120a0612d2f565b6020026020010151612342565b90506120f4866020015184815181106120c8576120c8612d2f565b6020026020010151876000015184815181106120e6576120e6612d2f565b6020026020010151836123b9565b600254865180516001600160a01b039092169163852f26a091908590811061211e5761211e612d2f565b60200260200101516040518263ffffffff1660e01b815260040161215191906001600160a01b0391909116815260200190565b602060405180830381865afa15801561216e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612192919061304e565b6001600160a01b031663f62d1d6b6000876040516020016121b492919061306b565b60405160208183030381529060405280519060200120886020015186815181106121e0576121e0612d2f565b6020026020010151848a6060015188815181106121ff576121ff612d2f565b60200260200101518760046122149190613189565b61221f906002613171565b8151811061222f5761222f612d2f565b60200260200101518b60600151898151811061224d5761224d612d2f565b60200260200101518860046122629190613189565b61226d906003613171565b8151811061227d5761227d612d2f565b60209081029190910101516040516001600160e01b031960e088901b16815260048101959095526001600160a01b03909316602485015260448401919091526064830152608482015260a401600060405180830381600087803b1580156122e357600080fd5b505af11580156122f7573d6000803e3d6000fd5b50505050505b8061230781613134565b915050611df4565b508061231a81613134565b915050611de4565b5092915050565b61233d83836123388685612342565b612432565b505050565b6003546000906001600160a01b03161580159061236157506000600454115b156123b0576000612710600454846123799190613189565b6123839190612db5565b60035490915061239e9085906001600160a01b031683612432565b6123a88184612ec6565b9150506123b3565b50805b92915050565b600254604051630429793560e51b81526001600160a01b03848116600483015261233d92869291169063852f26a090602401602060405180830381865afa158015612408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242c919061304e565b836124f1565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015612481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a5919061314f565b61233d5760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a207472616e73666572206661696c656400000000000000000060448201526064016106bd565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015612540573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612564919061314f565b61233d5760405162461bcd60e51b8152602060048201526016602482015275135bd91d5b194e88185c1c1c9bdd994819985a5b195960521b60448201526064016106bd565b60405180610100016040528060608152602001606081526020016060815260200160608152602001600081526020016000815260200160608152602001600060038111156125f9576125f9612832565b905290565b828054828255906000526020600020908101928215612653579160200282015b8281111561265357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061261e565b5061265f929150612730565b5090565b8280548282559060005260206000209081019282156126b0579160200282015b828111156126b057825180516126a0918491602090910190612745565b5091602001919060010190612683565b5061265f92915061277f565b8280546126c890612cde565b90600052602060002090601f0160209004810192826126ea5760008555612653565b82601f1061270357805160ff1916838001178555612653565b82800160010185558215612653579182015b82811115612653578251825591602001919060010190612715565b5b8082111561265f5760008155600101612731565b8280548282559060005260206000209081019282156126535791602002820182811115612653578251825591602001919060010190612715565b8082111561265f576000612793828261279c565b5060010161277f565b50805460008255906000526020600020908101906127ba9190612730565b50565b6000602082840312156127cf57600080fd5b5035919050565b60005b838110156127f15781810151838201526020016127d9565b83811115612800576000848401525b50505050565b6000815180845261281e8160208601602086016127d6565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b6004811061286657634e487b7160e01b600052602160045260246000fd5b9052565b8481528360208201526080604082015260006128896080830185612806565b90506128986060830184612848565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156128e0576128e06128a1565b604052919050565b600060208083850312156128fb57600080fd5b823567ffffffffffffffff8082111561291357600080fd5b818501915085601f83011261292757600080fd5b813581811115612939576129396128a1565b61294b601f8201601f191685016128b7565b9150808252868482850101111561296157600080fd5b8084840185840137600090820190930192909252509392505050565b600081518084526020808501945080840160005b838110156129b65781516001600160a01b031687529582019590820190600101612991565b509495945050505050565b600082825180855260208086019550808260051b8401018186016000805b85811015612a3257868403601f19018a52825180518086529086019086860190845b81811015612a1d57835183529288019291880191600101612a01565b50509a86019a945050918401916001016129df565b509198975050505050505050565b6020815260008251610100806020850152612a5f61012085018361297d565b91506020850151601f1980868503016040870152612a7d848361297d565b93506040870151915080868503016060870152612a9a84836129c1565b93506060870151915080868503016080870152612ab784836129c1565b9350608087015160a087015260a087015160c087015260c08701519150808685030160e087015250612ae98382612806565b92505060e0850151612afd82860182612848565b5090949350505050565b60008083601f840112612b1957600080fd5b50813567ffffffffffffffff811115612b3157600080fd5b6020830191508360208260051b8501011115612b4c57600080fd5b9250929050565b60008083601f840112612b6557600080fd5b50813567ffffffffffffffff811115612b7d57600080fd5b602083019150836020828501011115612b4c57600080fd5b600080600080600080600080600080600060c08c8e031215612bb657600080fd5b67ffffffffffffffff808d351115612bcd57600080fd5b612bda8e8e358f01612b07565b909c509a5060208d0135811015612bf057600080fd5b612c008e60208f01358f01612b07565b909a50985060408d0135811015612c1657600080fd5b612c268e60408f01358f01612b07565b909850965060608d0135811015612c3c57600080fd5b612c4c8e60608f01358f01612b07565b909650945060808d0135811015612c6257600080fd5b50612c738d60808e01358e01612b53565b819450809350505060a08c013590509295989b509295989b9093969950565b6001600160a01b03811681146127ba57600080fd5b600060208284031215612cb957600080fd5b8135612cc481612c92565b9392505050565b602081526000612cc46020830184612806565b600181811c90821680612cf257607f821691505b6020821081141561108157634e487b7160e01b600052602260045260246000fd5b60008251612d258184602087016127d6565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b6000808335601e19843603018112612d6c57600080fd5b83018035915067ffffffffffffffff821115612d8757600080fd5b6020019150600581901b3603821315612b4c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082612dd257634e487b7160e01b600052601260045260246000fd5b500490565b600067ffffffffffffffff821115612df157612df16128a1565b5060051b60200190565b6000612e0e612e0984612dd7565b6128b7565b83815260208082019190600586811b860136811115612e2c57600080fd5b865b81811015612eb957803567ffffffffffffffff811115612e4e5760008081fd5b880136601f820112612e605760008081fd5b8035612e6e612e0982612dd7565b81815290851b82018601908681019036831115612e8b5760008081fd5b928701925b82841015612ea957833582529287019290870190612e90565b8952505050948301948301612e2e565b5092979650505050505050565b600082821015612ed857612ed8612d9f565b500390565b8183526000602080850194508260005b858110156129b6578135612f0081612c92565b6001600160a01b031687529582019590820190600101612eed565b81835260006001600160fb1b03831115612f3457600080fd5b8260051b8083602087013760009401602001938452509192915050565b81835260006020808501808196506005915085821b81018560005b88811015612fd8578383038a528135601e19893603018112612f8d57600080fd5b8801803567ffffffffffffffff811115612fa657600080fd5b80871b36038a1315612fb757600080fd5b612fc485828a8501612f1b565b9b88019b9450505090850190600101612f6c565b509098975050505050505050565b60a081526000612ffa60a083018b8d612edd565b828103602084015261300d818a8c612edd565b9050828103604084015261302281888a612f51565b90508281036060840152613037818688612f51565b9150508260808301529a9950505050505050505050565b60006020828403121561306057600080fd5b8151612cc481612c92565b60408152600080845481600182811c91508083168061308b57607f831692505b60208084108214156130ab57634e487b7160e01b86526022600452602486fd5b60408801849052606088018280156130ca57600181146130db57613106565b60ff19871682528282019750613106565b60008c81526020902060005b87811015613100578154848201529086019084016130e7565b83019850505b50509690960196909652509095945050505050565b60006020828403121561312d57600080fd5b5051919050565b600060001982141561314857613148612d9f565b5060010190565b60006020828403121561316157600080fd5b81518015158114612cc457600080fd5b6000821982111561318457613184612d9f565b500190565b60008160001904831182151516156131a3576131a3612d9f565b50029056fea26469706673582212207611852c2bf72861c8ae3dea7c26fedd8efaf8d89c2a996c27051b7f767673dc64736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Smart contract to handle token swap        interactions for PrimeDeals",
    "events": {
      "TokenSwapCreated(uint256,bytes,address[],address[],uint256[][],uint256[][],uint256)": {
        "details": "pathTo: Used for storing how many tokens does each DAO receive from the module includes vesting. For each DAO there is a tuple of four values: instant amount, vested amount, vesting cliff, vesting duration. The start time will be the block.timestamp when executing the deal. This timestamp + vestingDuration can be used to calculate the vesting end. Example on how the values are stored: token -> DAO -> tuple(4) [[instantAmount_dao1, vestedAmount_dao1, vestingCliff_dao1, vestingDuration_dao1, instantAmount_dao2, ...], [...]]"
      }
    },
    "kind": "dev",
    "methods": {
      "_createSwap(address[],address[],uint256[][],uint256[][],bytes,uint256)": {
        "details": "Create a new token swap action",
        "params": {
          "_daos": "Array containing the DAOs that are involed in this action",
          "_deadline": "Time until which this action can be executed (unix timestamp)",
          "_pathFrom": "Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens",
          "_pathTo": "Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]",
          "_tokens": "Array containing the tokens that are involed in this action"
        },
        "returns": {
          "_0": "The ID of the new action"
        }
      },
      "checkExecutability(uint256)": {
        "details": "Checks whether a token swap action can be executed (which is the case if all DAOs have deposited)",
        "params": {
          "_id": "The ID of the action (position in the array)"
        },
        "returns": {
          "_0": "A bool flag indiciating whether the action can be executed"
        }
      },
      "createSwap(address[],address[],uint256[][],uint256[][],bytes,uint256)": {
        "details": "Create a new token swap action and automatically creates Deposit Contracts for each DAO that does not have one",
        "params": {
          "_daos": "Array containing the DAOs that are involed in this action",
          "_deadline": "Time until which this action can be executed (unix timestamp)",
          "_pathFrom": "Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens",
          "_pathTo": "Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]",
          "_tokens": "Array containing the tokens that are involed in this action"
        },
        "returns": {
          "_0": "The ID of the new action"
        }
      },
      "executeSwap(uint256)": {
        "details": "Executes a token swap action",
        "params": {
          "_id": "The ID of the action (position in the array)"
        }
      },
      "setFee(uint256)": {
        "details": "Sets a new fee",
        "params": {
          "_feeInBasisPoints": "Fee amount in basis points (1% = 10000)"
        }
      },
      "setFeeWallet(address)": {
        "details": "Sets a new fee wallet",
        "params": {
          "_feeWallet": "Address of the new fee wallet"
        }
      }
    },
    "title": "PrimeDeals Token Swap Module",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3822,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "moduleIdentifierString",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3824,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "moduleIdentifier",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 3827,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "baseContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IBaseContract)2786"
      },
      {
        "astId": 4091,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeWallet",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4093,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeInBasisPoints",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6905,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "tokenSwaps",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(TokenSwap)6933_storage)dyn_storage"
      },
      {
        "astId": 6909,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "metadataToId",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenSwap)6933_storage)dyn_storage": {
        "base": "t_struct(TokenSwap)6933_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenSwapModule.TokenSwap[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IBaseContract)2786": {
        "encoding": "inplace",
        "label": "contract IBaseContract",
        "numberOfBytes": "20"
      },
      "t_enum(Status)3832": {
        "encoding": "inplace",
        "label": "enum ModuleBase.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenSwap)6933_storage": {
        "encoding": "inplace",
        "label": "struct TokenSwapModule.TokenSwap",
        "members": [
          {
            "astId": 6912,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "daos",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6915,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6919,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathFrom",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 6923,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathTo",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 6925,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6927,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "executionDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6929,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "metadata",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes_storage"
          },
          {
            "astId": 6932,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "status",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(Status)3832"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}