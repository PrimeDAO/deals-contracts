{
  "address": "0xC13dcc1E21681f8069A5f0f81507d37C81822a45",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldFeeWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeWallet",
          "type": "address"
        }
      ],
      "name": "FeeWalletChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "TokenSwapCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "daos",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathFrom",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathTo",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "TokenSwapCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDeadline",
          "type": "uint256"
        }
      ],
      "name": "TokenSwapDeadlineExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "TokenSwapExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseContract",
      "outputs": [
        {
          "internalType": "contract IBaseContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "cancelSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "checkExecutability",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_daos",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathFrom",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathTo",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "createDepositContractAndCreateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_daos",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathFrom",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathTo",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "createSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "executeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "extendDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeInBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleIdentifier",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleIdentifierString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeInBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeWallet",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSwaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executionDate",
          "type": "uint256"
        },
        {
          "internalType": "enum ModuleBase.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeeaa6068acee7a0eac509a9584948398865b831af4995f5921d26b2ec0cfe3b0",
  "receipt": {
    "to": null,
    "from": "0x9cA70B93CaE5576645F5F069524A9B9c3aef5006",
    "contractAddress": "0xC13dcc1E21681f8069A5f0f81507d37C81822a45",
    "transactionIndex": 11,
    "gasUsed": "2654173",
    "logsBloom": "0x
    "blockHash": "0x5c09cd31f963a81efc69fdea5b760c3f6f71b3f4673232cf710ddabfffd05e56",
    "transactionHash": "0xeeaa6068acee7a0eac509a9584948398865b831af4995f5921d26b2ec0cfe3b0",
    "logs": [],
    "blockNumber": 9939511,
    "cumulativeGasUsed": "3699488",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC7cf47fA740ec7358fF48157013727Bb3C675E77"
  ],
  "solcInputHash": "ef94f2d2ae3f74c38ba485bdec7deb52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TokenSwapCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"TokenSwapCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeadline\",\"type\":\"uint256\"}],\"name\":\"TokenSwapDeadlineExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TokenSwapExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseContract\",\"outputs\":[{\"internalType\":\"contract IBaseContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"checkExecutability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"createDepositContractAndCreateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"createSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"executeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"extendDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleIdentifierString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSwaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionDate\",\"type\":\"uint256\"},{\"internalType\":\"enum ModuleBase.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract to handle token swap        interactions for PrimeDeals\",\"kind\":\"dev\",\"methods\":{\"cancelSwap(uint256)\":{\"details\":\"Cancels a token swap action\",\"params\":{\"_id\":\"The ID of the action (position in the array)\"}},\"checkExecutability(uint256)\":{\"details\":\"Checks whether a token swap action can be executed (which is the case if all DAOs have deposited)\",\"params\":{\"_id\":\"The ID of the action (position in the array)\"},\"returns\":{\"_0\":\"A bool flag indiciating whether the action can be executed\"}},\"createDepositContractAndCreateSwap(address[],address[],uint256[][],uint256[][],uint256)\":{\"details\":\"Create a new token swap action and automatically creates Deposit Contracts for each DAO that does not have one\",\"params\":{\"_daos\":\"Array containing the DAOs that are involed in this action\",\"_deadline\":\"Time until which this action can be executed (unix timestamp)\",\"_pathFrom\":\"Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens\",\"_pathTo\":\"Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]\",\"_tokens\":\"Array containing the tokens that are involed in this action\"},\"returns\":{\"_0\":\"The ID of the new action\"}},\"createSwap(address[],address[],uint256[][],uint256[][],uint256)\":{\"details\":\"Create a new token swap action\",\"params\":{\"_daos\":\"Array containing the DAOs that are involed in this action\",\"_deadline\":\"Time until which this action can be executed (unix timestamp)\",\"_pathFrom\":\"Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens\",\"_pathTo\":\"Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]\",\"_tokens\":\"Array containing the tokens that are involed in this action\"},\"returns\":{\"_0\":\"The ID of the new action\"}},\"executeSwap(uint256)\":{\"details\":\"Executes a token swap action\",\"params\":{\"_id\":\"The ID of the action (position in the array)\"}},\"extendDeadline(uint256,uint256)\":{\"details\":\"Cancels a token swap action\",\"params\":{\"_amount\":\"Amount of seconds that the current deadline will be pushed back by\",\"_id\":\"The ID of the action (position in the array)\"}},\"setFee(uint256)\":{\"details\":\"Sets a new fee\",\"params\":{\"_feeInBasisPoints\":\"Fee amount in basis points (1% = 10000)\"}},\"setFeeWallet(address)\":{\"details\":\"Sets a new fee wallet\",\"params\":{\"_feeWallet\":\"Address of the new fee wallet\"}}},\"title\":\"PrimeDeals Token Swap Module\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/tokenswap/TokenSwapModule.sol\":\"TokenSwapModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseContract.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IBaseContract {\\n    function createDepositContract(address _dao) external;\\n\\n    function hasDepositContract(address _dao) external view returns (bool);\\n\\n    function getDepositContract(address _dao) external view returns (address);\\n\\n    function isDAOorOwner(address _caller, address _dao)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isDAOorOwnerFromArray(\\n        address _caller,\\n        address[] calldata _involvedDAOs\\n    ) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function addressIsModule(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb562c8ee351e1db4ab656a3f5ac7bcf53191c3d0de7e2a27009083b76f85522d\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDepositContract {\\n    function initialize(address _dao) external;\\n\\n    function migrateBaseContract(address _newBaseContract) external;\\n\\n    function deposit(\\n        bytes32 _processID,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function multipleDeposits(\\n        bytes32 _processID,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable;\\n\\n    function registerDeposit(bytes32 _processID, address _token) external;\\n\\n    function registerDeposits(bytes32 _processID, address[] calldata _tokens)\\n        external;\\n\\n    function withdraw(\\n        bytes32 _processID,\\n        uint256 _depositID,\\n        address _sender\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function sendToModule(\\n        bytes32 _processID,\\n        address _token,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function startVesting(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _start,\\n        uint256 _end\\n    ) external;\\n\\n    function claimVestings() external;\\n\\n    function verifyBalance(address _token) external view;\\n\\n    function getDeposit(bytes32 _processID, uint256 _depositID)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAvailableProcessBalance(bytes32 _processID, address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalDepositCount(bytes32 _processID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableAmountOfUser(\\n        bytes32 _processID,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getBalance(address _token) external view returns (uint256);\\n\\n    function getVestedBalance(address _token) external view returns (uint256);\\n\\n    function getProcessID(string memory _module, uint256 _id)\\n        external\\n        pure\\n        returns (bytes32);\\n}\\n\",\"keccak256\":\"0x61342cb7329e6f2328f0f81db1450a18fae544ed70b712f6778a6afecde86d40\",\"license\":\"Unlicense\"},\"contracts/modules/ModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\nimport \\\"../interfaces/IBaseContract.sol\\\";\\n\\n/**\\n * @title PrimeDeals Module Base\\n * @dev   Smart contract to serve as the\\n          basis for each module\\n */\\ncontract ModuleBase {\\n    // String of the unique module identifier\\n    // e.g. TOKEN_SWAP_MODULE\\n    string public moduleIdentifierString;\\n\\n    // keccak256 of the identifier string\\n    bytes32 public moduleIdentifier;\\n\\n    IBaseContract public baseContract;\\n\\n    enum Status {\\n        NULL,\\n        ACTIVE,\\n        CANCELLED,\\n        DONE\\n    }\\n\\n    constructor(address _baseContract, string memory _moduleIdentifier) {\\n        require(\\n            _baseContract != address(0),\\n            \\\"Module: invalid base contract address\\\"\\n        );\\n        baseContract = IBaseContract(_baseContract);\\n        require(\\n            bytes(_moduleIdentifier).length > 0,\\n            \\\"Module: module identifier invalid\\\"\\n        );\\n        moduleIdentifierString = _moduleIdentifier;\\n        moduleIdentifier = keccak256(abi.encode(moduleIdentifierString));\\n    }\\n\\n    /**\\n      * @dev                Sends tokens from a deposit contract to the module\\n      * @param _id          ID of the action this is related to\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _path        Double nested array containing the amounts of tokens for each\\n                            token for each dao to be send\\n      * @return amountsIn   Array containing the total amounts sent per token\\n    */\\n    function _pullTokensIntoModule(\\n        uint256 _id,\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _path\\n    ) internal returns (uint256[] memory amountsIn) {\\n        amountsIn = new uint256[](_tokens.length);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(_path[i].length == _daos.length, \\\"asd\\\");\\n            for (uint256 j = 0; j < _path[i].length; j++) {\\n                if (_path[i][j] > 0) {\\n                    amountsIn[i] += _path[i][j];\\n                    IDepositContract(baseContract.getDepositContract(_daos[j]))\\n                        .sendToModule(\\n                            keccak256(abi.encode(moduleIdentifierString, _id)),\\n                            _tokens[i],\\n                            _path[i][j]\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev            Calls the approval function of a token\\n     * @param _token   Address of the token\\n     * @param _to      Target of the approval\\n     * @param _amount  Amount to be approved\\n     */\\n    function _approveToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(IERC20(_token).approve(_to, _amount), \\\"Module: approve failed\\\");\\n    }\\n\\n    /**\\n     * @dev            Calls the approval function of a token\\n                       for the deposit contract of a DAO\\n     * @param _token   Address of the token\\n     * @param _dao     DAO whose deposit contract is the target\\n     * @param _amount  Amount to be approved\\n     */\\n    function _approveDepositContract(\\n        address _token,\\n        address _dao,\\n        uint256 _amount\\n    ) internal {\\n        _approveToken(_token, baseContract.getDepositContract(_dao), _amount);\\n    }\\n\\n    /**\\n     * @dev            Transfers an amount of tokens\\n     * @param _token   Address of the token\\n     * @param _to      Target of the transfer\\n     * @param _amount  Amount to be sent\\n     */\\n    function _transferToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            IERC20(_token).transfer(_to, _amount),\\n            \\\"Module: transfer failed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev            Transfers an amount of tokens from an address\\n     * @param _token   Address of the token\\n     * @param _from    Source of the transfer\\n     * @param _to      Target of the transfer\\n     * @param _amount  Amount to be sent\\n     */\\n    function _transferFromToken(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            IERC20(_token).transferFrom(_from, _to, _amount),\\n            \\\"Module: transfer from failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x748d5b349451bb6f522384f253b34eba0bacf7d37f6f727b7c47cb3cd268d7a5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/ModuleBaseWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ModuleBase.sol\\\";\\n\\n/**\\n * @title PrimeDeals Module Base Fee Extension\\n * @dev   Smart contract to extend the module\\n          base with a fee mechanim\\n */\\ncontract ModuleBaseWithFee is ModuleBase {\\n    // Wallet that is receiving the fees\\n    address public feeWallet;\\n    // Fee in basis points (1% = 10000)\\n    uint256 public feeInBasisPoints;\\n\\n    constructor(address _baseContract, string memory _moduleIdentifier)\\n        ModuleBase(_baseContract, _moduleIdentifier)\\n    {}\\n\\n    event FeeWalletChanged(address oldFeeWallet, address newFeeWallet);\\n\\n    event FeeChanged(uint256 oldFee, uint256 newFee);\\n\\n    /**\\n     * @dev                 Sets a new fee wallet\\n     * @param _feeWallet    Address of the new fee wallet\\n     */\\n    function setFeeWallet(address _feeWallet) external {\\n        require(msg.sender == baseContract.owner(), \\\"Fee: not authorized\\\");\\n        emit FeeWalletChanged(feeWallet, _feeWallet);\\n        feeWallet = _feeWallet;\\n    }\\n\\n    /**\\n     * @dev                         Sets a new fee\\n     * @param _feeInBasisPoints     Fee amount in basis points (1% = 10000)\\n     */\\n    function setFee(uint256 _feeInBasisPoints) external {\\n        require(msg.sender == baseContract.owner(), \\\"Fee: not authorized\\\");\\n        require(_feeInBasisPoints <= 10000, \\\"Fee: can't be more than 100%\\\");\\n        emit FeeChanged(feeInBasisPoints, _feeInBasisPoints);\\n        feeInBasisPoints = _feeInBasisPoints;\\n    }\\n\\n    /**\\n     * @dev             Pays the fee in a token and returns the remainder\\n     * @param _token    Token in which the transfer happens\\n     * @param _amount   Amount of the transfer\\n     * @return          Remaining amount after the fee payment\\n     */\\n    function _payFeeAndReturnRemainder(address _token, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (feeWallet != address(0) && feeInBasisPoints > 0) {\\n            uint256 fee = (_amount * feeInBasisPoints) / 10000;\\n            _transferToken(_token, feeWallet, fee);\\n\\n            return _amount - fee;\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @dev             Transfers a token amount with automated fee payment\\n     * @param _token    Token in which the transfer happens\\n     * @param _to       Target of the transfer\\n     * @param _amount   Amount of the transfer\\n     */\\n    function _transferTokenWithFee(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        _transferToken(_token, _to, _payFeeAndReturnRemainder(_token, _amount));\\n    }\\n\\n    /**\\n     * @dev             Transfers a token amount from someone with \\n                        automated fee payment\\n     * @param _token    Token in which the transfer happens\\n     * @param _from     Source of the transfer\\n     * @param _to       Target of the transfer\\n     * @param _amount   Amount of the transfer\\n     */\\n    function _transferFromTokenWithFee(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        _transferFromToken(\\n            _token,\\n            _from,\\n            _to,\\n            _payFeeAndReturnRemainder(_token, _amount)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb3460a9933dccef2d6e0cdab4c467a0f63be2a7dde6e76b4d0315db70559ddb1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/tokenswap/TokenSwapModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../ModuleBaseWithFee.sol\\\";\\n\\n/**\\n * @title PrimeDeals Token Swap Module\\n * @dev   Smart contract to handle token swap\\n *        interactions for PrimeDeals\\n */\\ncontract TokenSwapModule is ModuleBaseWithFee {\\n    TokenSwap[] public tokenSwaps;\\n\\n    struct TokenSwap {\\n        // the participating DAOs\\n        address[] daos;\\n        // the tokens involved in the swap\\n        address[] tokens;\\n        // the token flow from the DAOs to the module\\n        uint256[][] pathFrom;\\n        // the token flow from the module to the DAO\\n        uint256[][] pathTo;\\n        // unix timestamp of the deadline\\n        uint256 deadline;\\n        // unix timestamp of the execution\\n        uint256 executionDate;\\n        // status of the deal\\n        Status status;\\n    }\\n\\n    // pathFrom:\\n    // how much tokens does each dao send to the module\\n    // token -> dao -> amount\\n    // [[123, 0, 123], [0, 123, 0]]\\n    // token 1: dao 1 sends 123, dao 2 sends 0, dao 3 sends 123, etc.\\n\\n    // pathTo:\\n    // how much tokens does each dao receive from the module\\n    // includes vesting\\n    // token -> dao -> tuple(4)\\n    // for each DAO there is a tuple of four values:\\n    // instant amount, vested amount, vesting start, vesting end\\n    // which then makes this array look like:\\n    // [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1,\\n    // vestingEnd_dao1, instantAmount_dao2, ...], [...]]\\n\\n    event TokenSwapCreated(\\n        uint256 indexed id,\\n        address[] daos,\\n        address[] tokens,\\n        uint256[][] pathFrom,\\n        uint256[][] pathTo,\\n        uint256 deadline\\n    );\\n\\n    event TokenSwapCancelled(uint256 indexed id);\\n\\n    event TokenSwapDeadlineExtended(uint256 indexed id, uint256 newDeadline);\\n\\n    event TokenSwapExecuted(uint256 indexed id);\\n\\n    constructor(address _baseContract)\\n        ModuleBaseWithFee(_baseContract, \\\"TOKEN_SWAP_MODULE\\\")\\n    {}\\n\\n    /**\\n      * @dev                Create a new token swap action\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains absolute numbers of tokens\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains a tuple(4) consisting of instant amount, vested \\n                                amount, vesting start, vesting end which then makes this \\n                                array look like:\\n                                [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1,\\n                                vestingEnd_dao1, instantAmount_dao2, ...], [...]]\\n      * @param _deadline    Time until which this action can be executed (unix timestamp)\\n      * @return             The ID of the new action\\n    */\\n    function createSwap(\\n        address[] calldata _daos,\\n        address[] calldata _tokens,\\n        uint256[][] calldata _pathFrom,\\n        uint256[][] calldata _pathTo,\\n        uint256 _deadline\\n    ) public returns (uint256) {\\n        require(\\n            baseContract.isDAOorOwnerFromArray(msg.sender, _daos),\\n            \\\"Module: not authorized\\\"\\n        );\\n        require(_daos.length >= 2, \\\"Module: at least 2 daos required\\\");\\n        require(_tokens.length >= 1, \\\"Module: at least 1 token required\\\");\\n        require(\\n            _tokens.length == _pathFrom.length &&\\n                _pathFrom.length == _pathTo.length &&\\n                _pathFrom[0].length == _daos.length &&\\n                _pathTo[0].length / 4 == _daos.length,\\n            \\\"Module: invalid array lengths\\\"\\n        );\\n\\n        TokenSwap memory ts = TokenSwap(\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline,\\n            0,\\n            Status.ACTIVE\\n        );\\n        tokenSwaps.push(ts);\\n\\n        emit TokenSwapCreated(\\n            tokenSwaps.length - 1,\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline\\n        );\\n\\n        return tokenSwaps.length - 1;\\n    }\\n\\n    /**\\n      * @dev                Create a new token swap action and automatically\\n                            creates Deposit Contracts for each DAO that does not have one\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains absolute numbers of tokens\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains a tuple(4) consisting of instant amount, vested \\n                                amount, vesting start, vesting end which then makes this \\n                                array look like:\\n                                [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1,\\n                                vestingEnd_dao1, instantAmount_dao2, ...], [...]]\\n      * @param _deadline    Time until which this action can be executed (unix timestamp)\\n      * @return             The ID of the new action\\n    */\\n    function createDepositContractAndCreateSwap(\\n        address[] calldata _daos,\\n        address[] calldata _tokens,\\n        uint256[][] calldata _pathFrom,\\n        uint256[][] calldata _pathTo,\\n        uint256 _deadline\\n    ) external returns (uint256) {\\n        for (uint256 i = 0; i < _daos.length; i++) {\\n            if (!baseContract.hasDepositContract(_daos[i])) {\\n                baseContract.createDepositContract(_daos[i]);\\n            }\\n        }\\n\\n        return createSwap(_daos, _tokens, _pathFrom, _pathTo, _deadline);\\n    }\\n\\n    /**\\n     * @dev        Cancels a token swap action\\n     * @param _id  The ID of the action (position in the array)\\n     */\\n    function cancelSwap(uint256 _id)\\n        external\\n        validId(_id)\\n        authorized(_id)\\n        activeStatus(_id)\\n    {\\n        tokenSwaps[_id].status = Status.CANCELLED;\\n        emit TokenSwapCancelled(_id);\\n    }\\n\\n    /**\\n      * @dev            Cancels a token swap action\\n      * @param _id      The ID of the action (position in the array)\\n      * @param _amount  Amount of seconds that the current deadline will be pushed\\n                        back by\\n    */\\n    function extendDeadline(uint256 _id, uint256 _amount)\\n        external\\n        validId(_id)\\n        authorized(_id)\\n        activeStatus(_id)\\n    {\\n        uint256 newDeadline = tokenSwaps[_id].deadline + _amount;\\n        require(\\n            newDeadline > block.timestamp,\\n            \\\"Module: new deadline is in the past\\\"\\n        );\\n\\n        tokenSwaps[_id].deadline = newDeadline;\\n\\n        emit TokenSwapDeadlineExtended(_id, newDeadline);\\n    }\\n\\n    /**\\n      * @dev            Checks whether a token swap action can be executed\\n                        (which is the case if all DAOs have deposited)\\n      * @param _id      The ID of the action (position in the array)\\n      * @return         A bool flag indiciating whether the action can be executed\\n    */\\n    function checkExecutability(uint256 _id)\\n        external\\n        view\\n        validId(_id)\\n        returns (bool)\\n    {\\n        TokenSwap memory ts = tokenSwaps[_id];\\n        if (ts.status != Status.ACTIVE) {\\n            return false;\\n        }\\n        if (ts.deadline < block.timestamp) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < ts.tokens.length; i++) {\\n            for (uint256 j = 0; j < ts.pathFrom[i].length; j++) {\\n                // for each token and each pathFrom entry for this\\n                // token, check whether the corresponding DAO\\n                // has deposited the corresponding amount into their\\n                // deposit contract\\n                if (\\n                    IDepositContract(\\n                        baseContract.getDepositContract(ts.daos[j])\\n                    ).getAvailableProcessBalance(\\n                            keccak256(abi.encode(moduleIdentifierString, _id)),\\n                            ts.tokens[i]\\n                        ) < ts.pathFrom[i][j]\\n                ) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev            Executes a token swap action\\n     * @param _id      The ID of the action (position in the array)\\n     */\\n    function executeSwap(uint256 _id)\\n        external\\n        validId(_id)\\n        activeStatus(_id)\\n        authorized(_id)\\n    {\\n        TokenSwap memory ts = tokenSwaps[_id];\\n\\n        require(ts.deadline >= block.timestamp, \\\"Module: swap expired\\\");\\n\\n        // transfer the tokens from the deposit contract of the DAOs\\n        // into this module\\n        uint256[] memory amountsIn = _pullTokensIntoModule(\\n            _id,\\n            ts.daos,\\n            ts.tokens,\\n            ts.pathFrom\\n        );\\n\\n        // distribute the tokens from this module to the DAOs\\n        // and (if applicable) and their vesting contracts\\n        uint256[] memory amountsOut = _distributeTokens(ts);\\n\\n        // verify whether the amounts being pulled and pushed match\\n        for (uint256 i = 0; i < ts.tokens.length; i++) {\\n            require(amountsIn[i] == amountsOut[i], \\\"Module: amount mismatch\\\");\\n        }\\n\\n        ts.status = Status.DONE;\\n        ts.executionDate = block.timestamp;\\n        emit TokenSwapExecuted(_id);\\n    }\\n\\n    /**\\n      * @dev                Distributes the tokens based on the supplied\\n                            information to the DAOs or their vesting contracts\\n      * @param _ts          TokenSwap object containing all the information\\n                            of the action\\n      * @return amountsOut  The two min values for the token amounts _ts\\n    */\\n    function _distributeTokens(TokenSwap memory _ts)\\n        internal\\n        returns (uint256[] memory amountsOut)\\n    {\\n        amountsOut = new uint256[](_ts.tokens.length);\\n        // Distribute tokens from the module\\n        for (uint256 i = 0; i < _ts.tokens.length; i++) {\\n            for (uint256 k = 0; k < _ts.pathTo[i].length / 4; k++) {\\n                // every 4 values, the values for a new dao start\\n                // value 0 = instant amount\\n                // value 1 = vested amount\\n                // value 2 = vesting start\\n                // value 3 = vesting end\\n                if (_ts.pathTo[i][k * 4] > 0) {\\n                    amountsOut[i] += _ts.pathTo[i][k * 4];\\n                    _transferTokenWithFee(\\n                        _ts.tokens[i],\\n                        _ts.daos[k],\\n                        _ts.pathTo[i][k * 4]\\n                    );\\n                }\\n                if (_ts.pathTo[i][k * 4 + 1] > 0) {\\n                    amountsOut[i] += _ts.pathTo[i][k * 4 + 1];\\n                    uint256 amount = _payFeeAndReturnRemainder(\\n                        _ts.tokens[i],\\n                        _ts.pathTo[i][k * 4 + 1]\\n                    );\\n                    _approveDepositContract(_ts.tokens[i], _ts.daos[k], amount);\\n                    IDepositContract(\\n                        baseContract.getDepositContract(_ts.daos[k])\\n                    ).startVesting(\\n                            _ts.tokens[i],\\n                            amount, // amount\\n                            _ts.pathTo[i][k * 4 + 2], // start\\n                            _ts.pathTo[i][k * 4 + 3] // end\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier validId(uint256 _id) {\\n        require(_id <= tokenSwaps.length, \\\"Module: id doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier activeStatus(uint256 _id) {\\n        require(\\n            tokenSwaps[_id].status == Status.ACTIVE,\\n            \\\"Module: id not active\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier authorized(uint256 _id) {\\n        require(\\n            baseContract.isDAOorOwnerFromArray(\\n                msg.sender,\\n                tokenSwaps[_id].daos\\n            ),\\n            \\\"Module: not authorized\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x017e5bb9ac5eafcd9fc488b2fbbc6a43213aeb0d409e2c0a090a057faff80ff5\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620030fc380380620030fc833981016040819052620000349162000236565b604080518082019091526011815270544f4b454e5f535741505f4d4f44554c4560781b6020820152819081816001600160a01b038216620000ca5760405162461bcd60e51b815260206004820152602560248201527f4d6f64756c653a20696e76616c6964206261736520636f6e7472616374206164604482015264647265737360d81b60648201526084015b60405180910390fd5b600280546001600160a01b0319166001600160a01b03841617905580516200013f5760405162461bcd60e51b815260206004820152602160248201527f4d6f64756c653a206d6f64756c65206964656e74696669657220696e76616c696044820152601960fa1b6064820152608401620000c1565b80516200015490600090602084019062000190565b506000604051602001620001699190620002a5565b60405160208183030381529060405280519060200120600181905550505050505062000355565b8280546200019e9062000268565b90600052602060002090601f016020900481019282620001c257600085556200020d565b82601f10620001dd57805160ff19168380011785556200020d565b828001600101855582156200020d579182015b828111156200020d578251825591602001919060010190620001f0565b506200021b9291506200021f565b5090565b5b808211156200021b576000815560010162000220565b6000602082840312156200024957600080fd5b81516001600160a01b03811681146200026157600080fd5b9392505050565b600181811c908216806200027d57607f821691505b602082108114156200029f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208083526000845481600182811c915080831680620002c857607f831692505b858310811415620002e757634e487b7160e01b85526022600452602485fd5b878601838152602001818015620003075760018114620003195762000346565b60ff1986168252878201965062000346565b60008b81526020902060005b86811015620003405781548482015290850190890162000325565b83019750505b50949998505050505050505050565b612d9780620003656000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806390d49b9d1161008c578063a9ab232b11610066578063a9ab232b146101f3578063b45edf4714610206578063ea03570d1461020f578063f25f4b561461022457600080fd5b806390d49b9d146101ba57806396d918f6146101cd578063a8e57224146101e057600080fd5b806354d6a2b7116100c857806354d6a2b7146101525780635b32619c1461016557806369fe0e2d1461019057806379573cf9146101a357600080fd5b806312d335e2146100ef5780632d1fdef61461011a57806340bf679c1461012f575b600080fd5b6101026100fd36600461252b565b610237565b6040516101119392919061255a565b60405180910390f35b61012d610128366004612594565b610270565b005b61014261013d36600461252b565b6104a9565b6040519015158152602001610111565b61012d61016036600461252b565b610994565b600254610178906001600160a01b031681565b6040516001600160a01b039091168152602001610111565b61012d61019e36600461252b565b610b42565b6101ac60015481565b604051908152602001610111565b61012d6101c83660046125cb565b610ca2565b6101ac6101db36600461263b565b610dd8565b6101ac6101ee36600461263b565b610f4c565b61012d61020136600461252b565b61134d565b6101ac60045481565b610217611849565b6040516101119190612707565b600354610178906001600160a01b031681565b6005818154811061024757600080fd5b600091825260209091206007909102016004810154600582015460069092015490925060ff1683565b600554829081111561029d5760405162461bcd60e51b81526004016102949061275c565b60405180910390fd5b6002546005805485926001600160a01b031691638606c90391339190859081106102c9576102c9612793565b90600052602060002090600702016000016040518363ffffffff1660e01b81526004016102f79291906127a9565b602060405180830381865afa158015610314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103389190612808565b6103545760405162461bcd60e51b81526004016102949061282a565b8360016005828154811061036a5761036a612793565b600091825260209091206006600790920201015460ff16600381111561039257610392612544565b146103af5760405162461bcd60e51b81526004016102949061285a565b600084600587815481106103c5576103c5612793565b9060005260206000209060070201600401546103e1919061289f565b905042811161043e5760405162461bcd60e51b815260206004820152602360248201527f4d6f64756c653a206e657720646561646c696e6520697320696e207468652070604482015262185cdd60ea1b6064820152608401610294565b806005878154811061045257610452612793565b906000526020600020906007020160040181905550857f6eacbecaef4969c82f7123076b33fe68d90b1226acd6e0d5c0108b48955237f58260405161049991815260200190565b60405180910390a2505050505050565b60055460009082908111156104d05760405162461bcd60e51b81526004016102949061275c565b6000600584815481106104e5576104e5612793565b90600052602060002090600702016040518060e00160405290816000820180548060200260200160405190810160405280929190818152602001828054801561055757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610539575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156105b957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161059b575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156106535760008481526020908190208301805460408051828502810185019091528181529283018282801561063f57602002820191906000526020600020905b81548152602001906001019080831161062b575b5050505050815260200190600101906105e7565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156106ec576000848152602090819020830180546040805182850281018501909152818152928301828280156106d857602002820191906000526020600020905b8154815260200190600101908083116106c4575b505050505081526020019060010190610680565b505050908252506004820154602082015260058201546040820152600682015460609091019060ff16600381111561072657610726612544565b600381111561073757610737612544565b905250905060018160c00151600381111561075457610754612544565b1461076357600092505061098e565b428160800151101561077957600092505061098e565b60005b8160200151518110156109875760005b826040015182815181106107a2576107a2612793565b60200260200101515181101561097457826040015182815181106107c8576107c8612793565b602002602001015181815181106107e1576107e1612793565b6020908102919091010151600254845180516001600160a01b039092169163852f26a091908590811061081657610816612793565b60200260200101516040518263ffffffff1660e01b815260040161084991906001600160a01b0391909116815260200190565b602060405180830381865afa158015610866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088a91906128b7565b6001600160a01b03166332296e0b6000896040516020016108ac929190612909565b60405160208183030381529060405280519060200120866020015186815181106108d8576108d8612793565b60200260200101516040518363ffffffff1660e01b815260040161090f9291909182526001600160a01b0316602082015260400190565b602060405180830381865afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095091906129b9565b1015610962576000945050505061098e565b8061096c816129d2565b91505061078c565b508061097f816129d2565b91505061077c565b5060019250505b50919050565b60055481908111156109b85760405162461bcd60e51b81526004016102949061275c565b6002546005805484926001600160a01b031691638606c90391339190859081106109e4576109e4612793565b90600052602060002090600702016000016040518363ffffffff1660e01b8152600401610a129291906127a9565b602060405180830381865afa158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a539190612808565b610a6f5760405162461bcd60e51b81526004016102949061282a565b82600160058281548110610a8557610a85612793565b600091825260209091206006600790920201015460ff166003811115610aad57610aad612544565b14610aca5760405162461bcd60e51b81526004016102949061285a565b600260058581548110610adf57610adf612793565b60009182526020909120600660079092020101805460ff19166001836003811115610b0c57610b0c612544565b021790555060405184907f9d500234c75d2bb7d35355e62e593f985ee95a5fc03ac6bcfb38956e721e9dba90600090a250505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb991906128b7565b6001600160a01b0316336001600160a01b031614610c0f5760405162461bcd60e51b81526020600482015260136024820152721199594e881b9bdd08185d5d1a1bdc9a5e9959606a1b6044820152606401610294565b612710811115610c615760405162461bcd60e51b815260206004820152601c60248201527f4665653a2063616e2774206265206d6f7265207468616e2031303025000000006044820152606401610294565b60045460408051918252602082018390527f5fc463da23c1b063e66f9e352006a7fbe8db7223c455dc429e881a2dfe2f94f1910160405180910390a1600455565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1991906128b7565b6001600160a01b0316336001600160a01b031614610d6f5760405162461bcd60e51b81526020600482015260136024820152721199594e881b9bdd08185d5d1a1bdc9a5e9959606a1b6044820152606401610294565b600354604080516001600160a01b03928316815291831660208301527f9f4f5dce3c4d197b5d7496cb96e25f0a89809167195964b0daa3ef5fed63c00a910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000805b89811015610f2c576002546001600160a01b0316636bafdaac8c8c84818110610e0757610e07612793565b9050602002016020810190610e1c91906125cb565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e849190612808565b610f1a576002546001600160a01b031663aba9650e8c8c84818110610eab57610eab612793565b9050602002016020810190610ec091906125cb565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015610f0157600080fd5b505af1158015610f15573d6000803e3d6000fd5b505050505b80610f24816129d2565b915050610ddc565b50610f3e8a8a8a8a8a8a8a8a8a610f4c565b9a9950505050505050505050565b600254604051638606c90360e01b81526000916001600160a01b031690638606c90390610f819033908e908e90600401612a36565b602060405180830381865afa158015610f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc29190612808565b610fde5760405162461bcd60e51b81526004016102949061282a565b600289101561102f5760405162461bcd60e51b815260206004820181905260248201527f4d6f64756c653a206174206c6561737420322064616f732072657175697265646044820152606401610294565b600187101561108a5760405162461bcd60e51b815260206004820152602160248201527f4d6f64756c653a206174206c65617374203120746f6b656e20726571756972656044820152601960fa1b6064820152608401610294565b868514801561109857508483145b80156110c757508886866000816110b1576110b1612793565b90506020028101906110c39190612a64565b9050145b8015611101575088600485856000816110e2576110e2612793565b90506020028101906110f49190612a64565b6110ff929150612aae565b145b61114d5760405162461bcd60e51b815260206004820152601d60248201527f4d6f64756c653a20696e76616c6964206172726179206c656e677468730000006044820152606401610294565b6040805161010060208c02808301820190935260e082018c815260009383928f918f918291908601908490808284376000920191909152505050908252506040805160208c810282810182019093528c82529283019290918d918d9182918501908490808284376000920191909152505050908252506020016111d0888a612b3b565b81526020016111df8688612b3b565b81526020810185905260006040820152606001600190526005805460018101825560009190915281518051929350839260079092027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00191611249918391602091909101906123df565b50602082810151805161126292600185019201906123df565b506040820151805161127e916002840191602090910190612444565b506060820151805161129a916003840191602090910190612444565b506080820151600482015560a0820151600582015560c082015160068201805460ff191660018360038111156112d2576112d2612544565b0217905550506005546112e89150600190612c06565b7f139161db9338f6c32f76d84f206e44feae17d9e7465a25746db1ddb68fd36e8e8c8c8c8c8c8c8c8c8c60405161132799989796959493929190612cda565b60405180910390a260055461133e90600190612c06565b9b9a5050505050505050505050565b60055481908111156113715760405162461bcd60e51b81526004016102949061275c565b8160016005828154811061138757611387612793565b600091825260209091206006600790920201015460ff1660038111156113af576113af612544565b146113cc5760405162461bcd60e51b81526004016102949061285a565b6002546005805485926001600160a01b031691638606c90391339190859081106113f8576113f8612793565b90600052602060002090600702016000016040518363ffffffff1660e01b81526004016114269291906127a9565b602060405180830381865afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114679190612808565b6114835760405162461bcd60e51b81526004016102949061282a565b60006005858154811061149857611498612793565b90600052602060002090600702016040518060e00160405290816000820180548060200260200160405190810160405280929190818152602001828054801561150a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114ec575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561156c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161154e575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015611606576000848152602090819020830180546040805182850281018501909152818152928301828280156115f257602002820191906000526020600020905b8154815260200190600101908083116115de575b50505050508152602001906001019061159a565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561169f5760008481526020908190208301805460408051828502810185019091528181529283018282801561168b57602002820191906000526020600020905b815481526020019060010190808311611677575b505050505081526020019060010190611633565b505050908252506004820154602082015260058201546040820152600682015460609091019060ff1660038111156116d9576116d9612544565b60038111156116ea576116ea612544565b815250509050428160800151101561173b5760405162461bcd60e51b8152602060048201526014602482015273135bd91d5b194e881cddd85c08195e1c1a5c995960621b6044820152606401610294565b6000611755868360000151846020015185604001516118d7565b9050600061176283611c04565b905060005b8360200151518110156118075781818151811061178657611786612793565b60200260200101518382815181106117a0576117a0612793565b6020026020010151146117f55760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a20616d6f756e74206d69736d617463680000000000000000006044820152606401610294565b806117ff816129d2565b915050611767565b50600360c08401524260a084015260405187907f76f19c9edafbe983391d9eaad9c2d2630b4f9bc80de49978dc57f58d2216adc690600090a250505050505050565b60008054611856906128d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611882906128d4565b80156118cf5780601f106118a4576101008083540402835291602001916118cf565b820191906000526020600020905b8154815290600101906020018083116118b257829003601f168201915b505050505081565b6060825167ffffffffffffffff8111156118f3576118f3612ad0565b60405190808252806020026020018201604052801561191c578160200160208202803683370190505b50905060005b8351811015611bfb57845183828151811061193f5761193f612793565b6020026020010151511461197b5760405162461bcd60e51b8152602060048201526003602482015262185cd960ea1b6044820152606401610294565b60005b83828151811061199057611990612793565b602002602001015151811015611be85760008483815181106119b4576119b4612793565b602002602001015182815181106119cd576119cd612793565b60200260200101511115611bd6578382815181106119ed576119ed612793565b60200260200101518181518110611a0657611a06612793565b6020026020010151838381518110611a2057611a20612793565b60200260200101818151611a34919061289f565b90525060025486516001600160a01b039091169063852f26a090889084908110611a6057611a60612793565b60200260200101516040518263ffffffff1660e01b8152600401611a9391906001600160a01b0391909116815260200190565b602060405180830381865afa158015611ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad491906128b7565b6001600160a01b031663e1b32e6e600089604051602001611af6929190612909565b60405160208183030381529060405280519060200120878581518110611b1e57611b1e612793565b6020026020010151878681518110611b3857611b38612793565b60200260200101518581518110611b5157611b51612793565b60200260200101516040518463ffffffff1660e01b8152600401611b91939291909283526001600160a01b03919091166020830152604082015260600190565b6020604051808303816000875af1158015611bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd49190612808565b505b80611be0816129d2565b91505061197e565b5080611bf3816129d2565b915050611922565b50949350505050565b606081602001515167ffffffffffffffff811115611c2457611c24612ad0565b604051908082528060200260200182016040528015611c4d578160200160208202803683370190505b50905060005b82602001515181101561098e5760005b600484606001518381518110611c7b57611c7b612793565b602002602001015151611c8e9190612aae565b81101561214c57600084606001518381518110611cad57611cad612793565b6020026020010151826004611cc29190612d42565b81518110611cd257611cd2612793565b60200260200101511115611dd65783606001518281518110611cf657611cf6612793565b6020026020010151816004611d0b9190612d42565b81518110611d1b57611d1b612793565b6020026020010151838381518110611d3557611d35612793565b60200260200101818151611d49919061289f565b90525060208401518051611dd6919084908110611d6857611d68612793565b602002602001015185600001518381518110611d8657611d86612793565b602002602001015186606001518581518110611da457611da4612793565b6020026020010151846004611db99190612d42565b81518110611dc957611dc9612793565b602002602001015161215f565b600084606001518381518110611dee57611dee612793565b6020026020010151826004611e039190612d42565b611e0e90600161289f565b81518110611e1e57611e1e612793565b6020026020010151111561213a5783606001518281518110611e4257611e42612793565b6020026020010151816004611e579190612d42565b611e6290600161289f565b81518110611e7257611e72612793565b6020026020010151838381518110611e8c57611e8c612793565b60200260200101818151611ea0919061289f565b90525060208401518051600091611f1c9185908110611ec157611ec1612793565b602002602001015186606001518581518110611edf57611edf612793565b6020026020010151846004611ef49190612d42565b611eff90600161289f565b81518110611f0f57611f0f612793565b6020026020010151612178565b9050611f6385602001518481518110611f3757611f37612793565b602002602001015186600001518481518110611f5557611f55612793565b6020026020010151836121ef565b600254855180516001600160a01b039092169163852f26a0919085908110611f8d57611f8d612793565b60200260200101516040518263ffffffff1660e01b8152600401611fc091906001600160a01b0391909116815260200190565b602060405180830381865afa158015611fdd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200191906128b7565b6001600160a01b0316636e5c8d1a8660200151858151811061202557612025612793565b6020026020010151838860600151878151811061204457612044612793565b60200260200101518660046120599190612d42565b61206490600261289f565b8151811061207457612074612793565b60200260200101518960600151888151811061209257612092612793565b60200260200101518760046120a79190612d42565b6120b290600361289f565b815181106120c2576120c2612793565b60209081029190910101516040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b15801561212057600080fd5b505af1158015612134573d6000803e3d6000fd5b50505050505b80612144816129d2565b915050611c63565b5080612157816129d2565b915050611c53565b612173838361216e8685612178565b612268565b505050565b6003546000906001600160a01b03161580159061219757506000600454115b156121e6576000612710600454846121af9190612d42565b6121b99190612aae565b6003549091506121d49085906001600160a01b031683612268565b6121de8184612c06565b9150506121e9565b50805b92915050565b600254604051630429793560e51b81526001600160a01b03848116600483015261217392869291169063852f26a090602401602060405180830381865afa15801561223e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226291906128b7565b83612327565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156122b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122db9190612808565b6121735760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a207472616e73666572206661696c65640000000000000000006044820152606401610294565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015612376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239a9190612808565b6121735760405162461bcd60e51b8152602060048201526016602482015275135bd91d5b194e88185c1c1c9bdd994819985a5b195960521b6044820152606401610294565b828054828255906000526020600020908101928215612434579160200282015b8281111561243457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906123ff565b5061244092915061249d565b5090565b828054828255906000526020600020908101928215612491579160200282015b8281111561249157825180516124819184916020909101906124b2565b5091602001919060010190612464565b506124409291506124ed565b5b80821115612440576000815560010161249e565b828054828255906000526020600020908101928215612434579160200282015b828111156124345782518255916020019190600101906124d2565b80821115612440576000612501828261250a565b506001016124ed565b5080546000825590600052602060002090810190612528919061249d565b50565b60006020828403121561253d57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b83815260208101839052606081016004831061258657634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b600080604083850312156125a757600080fd5b50508035926020909101359150565b6001600160a01b038116811461252857600080fd5b6000602082840312156125dd57600080fd5b81356125e8816125b6565b9392505050565b60008083601f84011261260157600080fd5b50813567ffffffffffffffff81111561261957600080fd5b6020830191508360208260051b850101111561263457600080fd5b9250929050565b600080600080600080600080600060a08a8c03121561265957600080fd5b893567ffffffffffffffff8082111561267157600080fd5b61267d8d838e016125ef565b909b50995060208c013591508082111561269657600080fd5b6126a28d838e016125ef565b909950975060408c01359150808211156126bb57600080fd5b6126c78d838e016125ef565b909750955060608c01359150808211156126e057600080fd5b506126ed8c828d016125ef565b9a9d999c50979a9699959894979660800135949350505050565b600060208083528351808285015260005b8181101561273457858101830151858201604001528201612718565b81811115612746576000604083870101525b50601f01601f1916929092016040019392505050565b60208082526018908201527f4d6f64756c653a20696420646f65736e27742065786973740000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006040820160018060a01b03808616845260206040818601528286548085526060870191508760005282600020945060005b818110156127fa5785548516835260019586019592840192016127dc565b509098975050505050505050565b60006020828403121561281a57600080fd5b815180151581146125e857600080fd5b602080825260169082015275135bd91d5b194e881b9bdd08185d5d1a1bdc9a5e995960521b604082015260600190565b6020808252601590820152744d6f64756c653a206964206e6f742061637469766560581b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156128b2576128b2612889565b500190565b6000602082840312156128c957600080fd5b81516125e8816125b6565b600181811c908216806128e857607f821691505b6020821081141561098e57634e487b7160e01b600052602260045260246000fd5b60408152600080845481600182811c91508083168061292957607f831692505b602080841082141561294957634e487b7160e01b86526022600452602486fd5b60408801849052606088018280156129685760018114612979576129a4565b60ff198716825282820197506129a4565b60008c81526020902060005b8781101561299e57815484820152908601908401612985565b83019850505b50509690960196909652509095945050505050565b6000602082840312156129cb57600080fd5b5051919050565b60006000198214156129e6576129e6612889565b5060010190565b8183526000602080850194508260005b85811015612a2b578135612a10816125b6565b6001600160a01b0316875295820195908201906001016129fd565b509495945050505050565b6001600160a01b0384168152604060208201819052600090612a5b90830184866129ed565b95945050505050565b6000808335601e19843603018112612a7b57600080fd5b83018035915067ffffffffffffffff821115612a9657600080fd5b6020019150600581901b360382131561263457600080fd5b600082612acb57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612b0f57612b0f612ad0565b604052919050565b600067ffffffffffffffff821115612b3157612b31612ad0565b5060051b60200190565b6000612b4e612b4984612b17565b612ae6565b83815260208082019190600586811b860136811115612b6c57600080fd5b865b81811015612bf957803567ffffffffffffffff811115612b8e5760008081fd5b880136601f820112612ba05760008081fd5b8035612bae612b4982612b17565b81815290851b82018601908681019036831115612bcb5760008081fd5b928701925b82841015612be957833582529287019290870190612bd0565b8952505050948301948301612b6e565b5092979650505050505050565b600082821015612c1857612c18612889565b500390565b81835260006001600160fb1b03831115612c3657600080fd5b8260051b8083602087013760009401602001938452509192915050565b81835260006020808501808196506005915085821b81018560005b888110156127fa578383038a528135601e19893603018112612c8f57600080fd5b8801803567ffffffffffffffff811115612ca857600080fd5b80871b36038a1315612cb957600080fd5b612cc685828a8501612c1d565b9b88019b9450505090850190600101612c6e565b60a081526000612cee60a083018b8d6129ed565b8281036020840152612d01818a8c6129ed565b90508281036040840152612d1681888a612c53565b90508281036060840152612d2b818688612c53565b9150508260808301529a9950505050505050505050565b6000816000190483118215151615612d5c57612d5c612889565b50029056fea264697066735822122011fb37e04d81d81cb4ee4ed9652f1a9dcc6398a3bd33590e76519b8d61df56ca64736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Smart contract to handle token swap        interactions for PrimeDeals",
    "kind": "dev",
    "methods": {
      "cancelSwap(uint256)": {
        "details": "Cancels a token swap action",
        "params": {
          "_id": "The ID of the action (position in the array)"
        }
      },
      "checkExecutability(uint256)": {
        "details": "Checks whether a token swap action can be executed (which is the case if all DAOs have deposited)",
        "params": {
          "_id": "The ID of the action (position in the array)"
        },
        "returns": {
          "_0": "A bool flag indiciating whether the action can be executed"
        }
      },
      "createDepositContractAndCreateSwap(address[],address[],uint256[][],uint256[][],uint256)": {
        "details": "Create a new token swap action and automatically creates Deposit Contracts for each DAO that does not have one",
        "params": {
          "_daos": "Array containing the DAOs that are involed in this action",
          "_deadline": "Time until which this action can be executed (unix timestamp)",
          "_pathFrom": "Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens",
          "_pathTo": "Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]",
          "_tokens": "Array containing the tokens that are involed in this action"
        },
        "returns": {
          "_0": "The ID of the new action"
        }
      },
      "createSwap(address[],address[],uint256[][],uint256[][],uint256)": {
        "details": "Create a new token swap action",
        "params": {
          "_daos": "Array containing the DAOs that are involed in this action",
          "_deadline": "Time until which this action can be executed (unix timestamp)",
          "_pathFrom": "Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens",
          "_pathTo": "Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]",
          "_tokens": "Array containing the tokens that are involed in this action"
        },
        "returns": {
          "_0": "The ID of the new action"
        }
      },
      "executeSwap(uint256)": {
        "details": "Executes a token swap action",
        "params": {
          "_id": "The ID of the action (position in the array)"
        }
      },
      "extendDeadline(uint256,uint256)": {
        "details": "Cancels a token swap action",
        "params": {
          "_amount": "Amount of seconds that the current deadline will be pushed back by",
          "_id": "The ID of the action (position in the array)"
        }
      },
      "setFee(uint256)": {
        "details": "Sets a new fee",
        "params": {
          "_feeInBasisPoints": "Fee amount in basis points (1% = 10000)"
        }
      },
      "setFeeWallet(address)": {
        "details": "Sets a new fee wallet",
        "params": {
          "_feeWallet": "Address of the new fee wallet"
        }
      }
    },
    "title": "PrimeDeals Token Swap Module",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4003,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "moduleIdentifierString",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 4005,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "moduleIdentifier",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 4008,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "baseContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IBaseContract)2910"
      },
      {
        "astId": 4272,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeWallet",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4274,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeInBasisPoints",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7344,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "tokenSwaps",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(TokenSwap)7366_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenSwap)7366_storage)dyn_storage": {
        "base": "t_struct(TokenSwap)7366_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenSwapModule.TokenSwap[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBaseContract)2910": {
        "encoding": "inplace",
        "label": "contract IBaseContract",
        "numberOfBytes": "20"
      },
      "t_enum(Status)4013": {
        "encoding": "inplace",
        "label": "enum ModuleBase.Status",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenSwap)7366_storage": {
        "encoding": "inplace",
        "label": "struct TokenSwapModule.TokenSwap",
        "members": [
          {
            "astId": 7347,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "daos",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7350,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7354,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathFrom",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7358,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathTo",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7360,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7362,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "executionDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7365,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(Status)4013"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}