{
  "address": "0x160bF98E6eDBd2CB54BBDF694831063C03c4846B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dealmanager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldFee",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldFeeWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeWallet",
          "type": "address"
        }
      ],
      "name": "FeeWalletChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "daos",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathFrom",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathTo",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        }
      ],
      "name": "TokenSwapCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        }
      ],
      "name": "TokenSwapExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "checkExecutability",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_daos",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathFrom",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathTo",
          "type": "uint256[][]"
        },
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        }
      ],
      "name": "createSwap",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dealManager",
      "outputs": [
        {
          "internalType": "contract IDealManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "executeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeInBasisPoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        }
      ],
      "name": "getTokenswapFromMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "daos",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathFrom",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathTo",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "executionDate",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "internalType": "enum ModuleBase.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct TokenSwapModule.TokenSwap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "hasDealExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "metadataToDealId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_feeInBasisPoints",
          "type": "uint32"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeWallet",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSwaps",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "executionDate",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        },
        {
          "internalType": "enum ModuleBase.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b1ae13fa2e943df4ce456c68bd8149d07123614d37431c4b9d7cf47e289ceb6",
  "receipt": {
    "to": null,
    "from": "0xc039897eE5A0d14A3d1F212922FaF7e159Ab619F",
    "contractAddress": "0x160bF98E6eDBd2CB54BBDF694831063C03c4846B",
    "transactionIndex": 92,
    "gasUsed": "2958329",
    "logsBloom": "0x
    "blockHash": "0xac2888c867947deb498f58f73606a15f48292fc35907db0de82fd7b156b76e6c",
    "transactionHash": "0x5b1ae13fa2e943df4ce456c68bd8149d07123614d37431c4b9d7cf47e289ceb6",
    "logs": [],
    "blockNumber": 10367758,
    "cumulativeGasUsed": "26682776",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b500dB17E4D9e8167253956546A9A2b3412a432"
  ],
  "solcInputHash": "cd75873b169443eace4faca2bc5a1b52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dealmanager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldFee\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"}],\"name\":\"TokenSwapCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"}],\"name\":\"TokenSwapExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"checkExecutability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"}],\"name\":\"createSwap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealManager\",\"outputs\":[{\"internalType\":\"contract IDealManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"executeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInBasisPoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"getTokenswapFromMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"executionDate\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"enum ModuleBase.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenSwapModule.TokenSwap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"hasDealExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"metadataToDealId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feeInBasisPoints\",\"type\":\"uint32\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSwaps\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"executionDate\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"enum ModuleBase.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract to handle token swap        interactions for PrimeDeals\",\"kind\":\"dev\",\"methods\":{\"checkExecutability(uint32)\":{\"details\":\"Checks whether a token swap action can be executed (which is the case if all DAOs have deposited)\",\"params\":{\"_dealId\":\"The dealId of the action (position in the array)\"},\"returns\":{\"_0\":\"A bool flag indiciating whether the action can be executed\"}},\"createSwap(address[],address[],uint256[][],uint256[][],bytes,uint32)\":{\"details\":\"Create a new token swap action and automatically creates Dao Deposit Manager for each DAO that does not have one\",\"params\":{\"_daos\":\"Array containing the DAOs that are involed in this action\",\"_deadline\":\"Time until which this action can be executed (unix timestamp)\",\"_pathFrom\":\"Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens\",\"_pathTo\":\"Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]\",\"_tokens\":\"Array containing the tokens that are involed in this action\"}},\"executeSwap(uint32)\":{\"details\":\"Executes a token swap action\",\"params\":{\"_dealId\":\"The dealId of the action (position in the array)\"}},\"setFee(uint32)\":{\"details\":\"Sets a new fee\",\"params\":{\"_feeInBasisPoints\":\"Fee amount in basis points (1% = 10000)\"}},\"setFeeWallet(address)\":{\"details\":\"Sets a new fee wallet\",\"params\":{\"_feeWallet\":\"Address of the new fee wallet\"}}},\"title\":\"PrimeDeals Token Swap Module\",\"version\":1},\"userdoc\":{\"events\":{\"FeeChanged(uint32,uint32)\":{\"notice\":\"This event is emitted when the fee is updated\"},\"FeeWalletChanged(address,address)\":{\"notice\":\"This event is emitted when the fee wallet address is updated\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/tokenswap/TokenSwapModule.sol\":\"TokenSwapModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/interfaces/IDaoDepositManager.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDaoDepositManager {\\n    function initialize(address _dao) external;\\n\\n    function migrateBaseContract(address _newDaoDepositManager) external;\\n\\n    function deposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function multipleDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable;\\n\\n    function registerDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external;\\n\\n    function registerDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens\\n    ) external;\\n\\n    function withdraw(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId,\\n        address _sender\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function sendToModule(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function startVesting(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount,\\n        uint32 _vestingCliff,\\n        uint32 _vestingDuration\\n    ) external;\\n\\n    function claimVestings() external;\\n\\n    function verifyBalance(address _token) external view;\\n\\n    function getDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId\\n    )\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAvailableDealBalance(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getTotalDepositCount(address _dealModule, uint32 _dealId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableAmountOfUser(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getBalance(address _token) external view returns (uint256);\\n\\n    function getVestedBalance(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4a8f73a4946b475dff5781bc3f85e36f7e06e5c3bf20c3c4bd7b49631b1b348a\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDealManager.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDealManager {\\n    function createDaoDepositManager(address _dao) external;\\n\\n    function hasDaoDepositManager(address _dao) external view returns (bool);\\n\\n    function getDaoDepositManager(address _dao) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function addressIsModule(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa31274c64c7a0b019b71ee0839fdbf5871a178275fbf483ee201e4743b5440d9\",\"license\":\"Unlicense\"},\"contracts/modules/ModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IDaoDepositManager.sol\\\";\\nimport \\\"../interfaces/IDealManager.sol\\\";\\n\\n/**\\n * @title PrimeDeals Module Base\\n * @dev   Smart contract to serve as the\\n          basis for each module\\n */\\ncontract ModuleBase {\\n    // Address of the DealManager implementation\\n    IDealManager public dealManager;\\n\\n    // @notics      Status of a deal\\n    // NULL         Uninitialized deal\\n    // ACTIVE       Deal has been created and is ready to be funded\\n    // CANCELLED    Deal has been canceld and is no longer valid\\n    // DONE         Deal has been executed\\n    enum Status {\\n        NULL,\\n        ACTIVE,\\n        CANCELLED,\\n        DONE\\n    }\\n\\n    /**\\n     * @dev                            Constructor\\n     * @param _dealManager             The address of DealManager implementation\\n     */\\n    constructor(address _dealManager) {\\n        require(\\n            _dealManager != address(0),\\n            \\\"Module: invalid base contract address\\\"\\n        );\\n        dealManager = IDealManager(_dealManager);\\n    }\\n\\n    /**\\n      * @dev                Sends tokens from a DAO deposit manager to the module\\n      * @param _dealId      ID of the action this is related to\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _path        Double nested array containing the amounts of tokens for each\\n                            token for each dao to be send\\n      * @return amountsIn   Array containing the total amounts sent per token\\n    */\\n    function _pullTokensIntoModule(\\n        uint32 _dealId,\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _path\\n    ) internal returns (uint256[] memory amountsIn) {\\n        amountsIn = new uint256[](_tokens.length);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(_path[i].length == _daos.length, \\\"Module: length mismatch\\\");\\n            for (uint256 j = 0; j < _path[i].length; j++) {\\n                if (_path[i][j] > 0) {\\n                    amountsIn[i] += _path[i][j];\\n                    IDaoDepositManager(\\n                        dealManager.getDaoDepositManager(_daos[j])\\n                    ).sendToModule(_dealId, _tokens[i], _path[i][j]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev            Calls the approval function of a token\\n     * @param _token   Address of the token\\n     * @param _to      Target of the approval\\n     * @param _amount  Amount to be approved\\n     */\\n    function _approveToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(IERC20(_token).approve(_to, _amount), \\\"Module: approve failed\\\");\\n    }\\n\\n    /**\\n     * @dev            Calls the approval function of a token\\n                       for the deposit manager of a DAO\\n     * @param _token   Address of the token\\n     * @param _dao     DAO whose deposit manager is the target\\n     * @param _amount  Amount to be approved\\n     */\\n    function _approveDaoDepositManager(\\n        address _token,\\n        address _dao,\\n        uint256 _amount\\n    ) internal {\\n        _approveToken(_token, dealManager.getDaoDepositManager(_dao), _amount);\\n    }\\n\\n    /**\\n     * @dev            Transfers an amount of tokens\\n     * @param _token   Address of the token\\n     * @param _to      Target of the transfer\\n     * @param _amount  Amount to be sent\\n     */\\n    function _transferToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            IERC20(_token).transfer(_to, _amount),\\n            \\\"Module: transfer failed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev            Transfers an amount of tokens from an address\\n     * @param _token   Address of the token\\n     * @param _from    Source of the transfer\\n     * @param _to      Target of the transfer\\n     * @param _amount  Amount to be sent\\n     */\\n    function _transferFromToken(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            IERC20(_token).transferFrom(_from, _to, _amount),\\n            \\\"Module: transfer from failed\\\"\\n        );\\n    }\\n\\n    function hasDealExpired(uint32 _dealId)\\n        external\\n        view\\n        virtual\\n        returns (bool)\\n    {}\\n}\\n\",\"keccak256\":\"0x418949d2ace794c7b27c6f2050f6e15efa48d059ab591f9046e387b42d340e6a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/ModuleBaseWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ModuleBase.sol\\\";\\n\\n/**\\n * @title PrimeDeals Module Base Fee Extension\\n * @dev   Smart contract to extend the module\\n          base with a fee mechanim\\n */\\ncontract ModuleBaseWithFee is ModuleBase {\\n    // Wallet that is receiving the fees\\n    address public feeWallet;\\n\\n    // Fee in basis points (1% = 10000)\\n    uint32 public feeInBasisPoints;\\n\\n    /**\\n     * @dev                        Constructor\\n     * @param _dealManager         The address of Dealmanager implementation\\n     */\\n    constructor(address _dealManager) ModuleBase(_dealManager) {}\\n\\n    /**\\n     * @notice                  This event is emitted when the fee wallet address is updated\\n     * @param oldFeeWallet      Address of the old fee wallet\\n     * @param newFeeWallet      Address of the new fee wallet\\n     */\\n    event FeeWalletChanged(\\n        address indexed oldFeeWallet,\\n        address indexed newFeeWallet\\n    );\\n\\n    /**\\n     * @notice                  This event is emitted when the fee is updated\\n     * @param oldFee            Old fee amount in basis points (1% = 1000)\\n     * @param newFee            New fee in basis points (1% = 1000) that is updated\\n     */\\n    event FeeChanged(uint32 indexed oldFee, uint32 indexed newFee);\\n\\n    /**\\n     * @dev                 Sets a new fee wallet\\n     * @param _feeWallet    Address of the new fee wallet\\n     */\\n    function setFeeWallet(address _feeWallet) external {\\n        require(msg.sender == dealManager.owner(), \\\"Fee: not authorized\\\");\\n        emit FeeWalletChanged(feeWallet, _feeWallet);\\n        feeWallet = _feeWallet;\\n    }\\n\\n    /**\\n     * @dev                         Sets a new fee\\n     * @param _feeInBasisPoints     Fee amount in basis points (1% = 10000)\\n     */\\n    function setFee(uint32 _feeInBasisPoints) external {\\n        require(msg.sender == dealManager.owner(), \\\"Fee: not authorized\\\");\\n        require(_feeInBasisPoints <= 10000, \\\"Fee: can't be more than 100%\\\");\\n        emit FeeChanged(feeInBasisPoints, _feeInBasisPoints);\\n        feeInBasisPoints = _feeInBasisPoints;\\n    }\\n\\n    /**\\n     * @dev             Pays the fee in a token and returns the remainder\\n     * @param _token    Token in which the transfer happens\\n     * @param _amount   Amount of the transfer\\n     * @return          Remaining amount after the fee payment\\n     */\\n    function _payFeeAndReturnRemainder(address _token, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (feeWallet != address(0) && feeInBasisPoints > 0) {\\n            uint256 fee = (_amount * feeInBasisPoints) / 10000;\\n            _transferToken(_token, feeWallet, fee);\\n\\n            return _amount - fee;\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @dev             Transfers a token amount with automated fee payment\\n     * @param _token    Token in which the transfer happens\\n     * @param _to       Target of the transfer\\n     * @param _amount   Amount of the transfer\\n     */\\n    function _transferTokenWithFee(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        _transferToken(_token, _to, _payFeeAndReturnRemainder(_token, _amount));\\n    }\\n\\n    /**\\n     * @dev             Transfers a token amount from someone with \\n                        automated fee payment\\n     * @param _token    Token in which the transfer happens\\n     * @param _from     Source of the transfer\\n     * @param _to       Target of the transfer\\n     * @param _amount   Amount of the transfer\\n     */\\n    function _transferFromTokenWithFee(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        _transferFromToken(\\n            _token,\\n            _from,\\n            _to,\\n            _payFeeAndReturnRemainder(_token, _amount)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf7e76efde58038d164dfc18ff41702fb6345f5b9f7a3e8d3bc6d712923b12430\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/tokenswap/TokenSwapModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../ModuleBaseWithFee.sol\\\";\\n\\n/**\\n * @title PrimeDeals Token Swap Module\\n * @dev   Smart contract to handle token swap\\n *        interactions for PrimeDeals\\n */\\ncontract TokenSwapModule is ModuleBaseWithFee {\\n    TokenSwap[] public tokenSwaps;\\n    mapping(bytes => uint32) public metadataToDealId;\\n\\n    /**\\n     * @dev\\n     * pathFrom Description:\\n     * Used to storing how many tokens does each DAO send to the module\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> amount\\n     * [[123, 0, 123], [0, 123, 0]]\\n     * token 1: DAO 1 sends 123, DAO 2 sends 0, DAO 3 sends 123, etc.\\n     */\\n\\n    /**\\n     * @dev\\n     * pathTo:\\n     * Used for storing how many tokens does each DAO receive from the module\\n     * includes vesting. For each DAO there is a tuple of four values:\\n     * instant amount, vested amount, vesting cliff, vesting duration.\\n     * The start time will be the block.timestamp when executing the deal.\\n     * This timestamp + vestingDuration can be used to calculate the vesting end.\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> tuple(4)\\n     * [[instantAmount_dao1, vestedAmount_dao1, vestingCliff_dao1,\\n     * vestingDuration_dao1, instantAmount_dao2, ...], [...]]\\n     */\\n\\n    struct TokenSwap {\\n        // The participating DAOs\\n        address[] daos;\\n        // The tokens involved in the swap\\n        address[] tokens;\\n        // the token flow from the DAOs to the module\\n        uint256[][] pathFrom;\\n        // the token flow from the module to the DAO\\n        uint256[][] pathTo;\\n        // unix timestamp of the deadline\\n        uint32 deadline;\\n        // unix timestamp of the execution\\n        uint32 executionDate;\\n        // hash of the deal information.\\n        bytes metadata;\\n        // status of the deal\\n        Status status;\\n    }\\n\\n    event TokenSwapCreated(\\n        address indexed module,\\n        uint32 indexed dealId,\\n        bytes indexed metadata,\\n        address[] daos,\\n        address[] tokens,\\n        uint256[][] pathFrom,\\n        uint256[][] pathTo,\\n        uint32 deadline\\n    );\\n\\n    event TokenSwapExecuted(address indexed module, uint32 indexed dealId);\\n\\n    constructor(address _dealmanager) ModuleBaseWithFee(_dealmanager) {}\\n\\n    /**\\n      * @dev                Create a new token swap action\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains absolute numbers of tokens\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains a tuple(4) consisting of instant amount, vested \\n                                amount, vesting start, vesting end which then makes this \\n                                array look like:\\n                                [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1,\\n                                vestingEnd_dao1, instantAmount_dao2, ...], [...]]\\n      * @param _deadline    Time until which this action can be executed (unix timestamp)\\n      * @return             The dealId of the new action\\n    */\\n    function _createSwap(\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _pathFrom,\\n        uint256[][] memory _pathTo,\\n        bytes memory _metadata,\\n        uint32 _deadline\\n    ) internal returns (uint32) {\\n        if (tokenSwaps.length >= 1) {\\n            require(\\n                _metadataDoesNotExist(_metadata),\\n                \\\"Module: metadata already exists\\\"\\n            );\\n        }\\n        require(_daos.length >= 2, \\\"Module: at least 2 daos required\\\");\\n        require(_tokens.length >= 1, \\\"Module: at least 1 token required\\\");\\n        require(\\n            _tokens.length == _pathFrom.length &&\\n                _pathFrom.length == _pathTo.length &&\\n                _pathFrom[0].length == _daos.length &&\\n                _pathTo[0].length / 4 == _daos.length,\\n            \\\"Module: invalid array lengths\\\"\\n        );\\n\\n        TokenSwap memory ts = TokenSwap(\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline,\\n            0,\\n            _metadata,\\n            Status.ACTIVE\\n        );\\n        tokenSwaps.push(ts);\\n\\n        uint32 dealId = uint32(tokenSwaps.length - 1);\\n\\n        metadataToDealId[_metadata] = dealId;\\n\\n        emit TokenSwapCreated(\\n            address(this),\\n            dealId,\\n            _metadata,\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline\\n        );\\n        return dealId;\\n    }\\n\\n    /**\\n      * @dev                Create a new token swap action and automatically\\n                            creates Dao Deposit Manager for each DAO that does not have one\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains absolute numbers of tokens\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Contains a tuple(4) consisting of instant amount, vested \\n                                amount, vesting start, vesting end which then makes this \\n                                array look like:\\n                                [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1,\\n                                vestingEnd_dao1, instantAmount_dao2, ...], [...]]\\n      * @param _deadline    Time until which this action can be executed (unix timestamp)\\n    */\\n    function createSwap(\\n        address[] calldata _daos,\\n        address[] calldata _tokens,\\n        uint256[][] calldata _pathFrom,\\n        uint256[][] calldata _pathTo,\\n        bytes calldata _metadata,\\n        uint32 _deadline\\n    ) external returns (uint32) {\\n        for (uint256 i = 0; i < _daos.length; i++) {\\n            if (!dealManager.hasDaoDepositManager(_daos[i])) {\\n                dealManager.createDaoDepositManager(_daos[i]);\\n            }\\n        }\\n        return (\\n            _createSwap(\\n                _daos,\\n                _tokens,\\n                _pathFrom,\\n                _pathTo,\\n                _metadata,\\n                _deadline\\n            )\\n        );\\n    }\\n\\n    /**\\n      * @dev            Checks whether a token swap action can be executed\\n                        (which is the case if all DAOs have deposited)\\n      * @param _dealId  The dealId of the action (position in the array)\\n      * @return         A bool flag indiciating whether the action can be executed\\n    */\\n    function checkExecutability(uint32 _dealId)\\n        public\\n        view\\n        validDealId(_dealId)\\n        returns (bool)\\n    {\\n        TokenSwap memory ts = tokenSwaps[_dealId];\\n        if (ts.status != Status.ACTIVE) {\\n            return false;\\n        }\\n        if (ts.deadline < uint32(block.timestamp)) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < ts.tokens.length; i++) {\\n            for (uint256 j = 0; j < ts.pathFrom[i].length; j++) {\\n                // for each token and each pathFrom entry for this\\n                // token, check whether the corresponding DAO\\n                // has deposited the corresponding amount into their\\n                // deposit contract\\n                uint256 bal = IDaoDepositManager(\\n                    dealManager.getDaoDepositManager(ts.daos[j])\\n                ).getAvailableDealBalance(address(this), _dealId, ts.tokens[i]);\\n                if (bal < ts.pathFrom[i][j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev            Executes a token swap action\\n     * @param _dealId  The dealId of the action (position in the array)\\n     */\\n    function executeSwap(uint32 _dealId)\\n        external\\n        validDealId(_dealId)\\n        activeStatus(_dealId)\\n    {\\n        TokenSwap storage ts = tokenSwaps[_dealId];\\n\\n        require(ts.deadline >= uint32(block.timestamp), \\\"Module: swap expired\\\");\\n        require(checkExecutability(_dealId), \\\"Module: swap not executable\\\");\\n\\n        // transfer the tokens from the deposit manager of the DAOs\\n        // into this module\\n        uint256[] memory amountsIn = _pullTokensIntoModule(\\n            _dealId,\\n            ts.daos,\\n            ts.tokens,\\n            ts.pathFrom\\n        );\\n\\n        // distribute the tokens from this module to the DAOs\\n        // and (if applicable) and their vesting contracts\\n        uint256[] memory amountsOut = _distributeTokens(ts, _dealId);\\n\\n        // verify whether the amounts being pulled and pushed match\\n        for (uint256 i = 0; i < ts.tokens.length; i++) {\\n            require(amountsIn[i] == amountsOut[i], \\\"Module: amount mismatch\\\");\\n        }\\n\\n        ts.status = Status.DONE;\\n        ts.executionDate = uint32(block.timestamp);\\n        emit TokenSwapExecuted(address(this), _dealId);\\n    }\\n\\n    /**\\n      * @dev                Distributes the tokens based on the supplied\\n                            information to the DAOs or their vesting contracts\\n      * @param _ts          TokenSwap object containing all the information\\n                            of the action\\n      * @param _dealId      The dealId of the action (position in the array)\\n      * @return amountsOut  The two min values for the token amounts _ts\\n    */\\n    function _distributeTokens(TokenSwap memory _ts, uint32 _dealId)\\n        internal\\n        returns (uint256[] memory amountsOut)\\n    {\\n        amountsOut = new uint256[](_ts.tokens.length);\\n        // Distribute tokens from the module\\n        for (uint256 i = 0; i < _ts.tokens.length; i++) {\\n            for (uint256 k = 0; k < _ts.pathTo[i].length / 4; k++) {\\n                // every 4 values, the values for a new dao start\\n                // value 0 = instant amount\\n                // value 1 = vested amount\\n                // value 2 = vesting cliff\\n                // value 3 = vesting duration\\n                if (_ts.pathTo[i][k * 4] > 0) {\\n                    amountsOut[i] += _ts.pathTo[i][k * 4];\\n                    _transferTokenWithFee(\\n                        _ts.tokens[i],\\n                        _ts.daos[k],\\n                        _ts.pathTo[i][k * 4]\\n                    );\\n                }\\n                if (_ts.pathTo[i][k * 4 + 1] > 0) {\\n                    amountsOut[i] += _ts.pathTo[i][k * 4 + 1];\\n                    uint256 amount = _payFeeAndReturnRemainder(\\n                        _ts.tokens[i],\\n                        _ts.pathTo[i][k * 4 + 1]\\n                    );\\n                    _approveDaoDepositManager(\\n                        _ts.tokens[i],\\n                        _ts.daos[k],\\n                        amount\\n                    );\\n                    IDaoDepositManager(\\n                        dealManager.getDaoDepositManager(_ts.daos[k])\\n                    ).startVesting(\\n                            _dealId,\\n                            _ts.tokens[i],\\n                            amount, // amount\\n                            uint32(_ts.pathTo[i][k * 4 + 2]), // start\\n                            uint32(_ts.pathTo[i][k * 4 + 3]) // end\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    function getTokenswapFromMetadata(bytes memory _metadata)\\n        public\\n        view\\n        validMetadata(_metadata)\\n        returns (TokenSwap memory swap)\\n    {\\n        return tokenSwaps[metadataToDealId[_metadata]];\\n    }\\n\\n    function hasDealExpired(uint32 _dealId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            tokenSwaps[_dealId].status != Status.ACTIVE ||\\n            tokenSwaps[_dealId].deadline < uint32(block.timestamp);\\n    }\\n\\n    function _metadataDoesNotExist(bytes memory _metadata)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 dealId = metadataToDealId[_metadata];\\n        return (dealId == 0 &&\\n            keccak256(tokenSwaps[dealId].metadata) != keccak256(_metadata) &&\\n            _metadata.length > 0);\\n    }\\n\\n    modifier validMetadata(bytes memory _metadata) {\\n        uint256 dealId = metadataToDealId[_metadata];\\n        require(\\n            dealId != 0 ||\\n                keccak256(tokenSwaps[dealId].metadata) == keccak256(_metadata),\\n            \\\"Module: metadata does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validDealId(uint32 _dealId) {\\n        require(_dealId < tokenSwaps.length, \\\"Module: dealId doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier activeStatus(uint32 _dealId) {\\n        require(\\n            tokenSwaps[_dealId].status == Status.ACTIVE,\\n            \\\"Module: dealId not active\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4faf9527b895cf0a7b115da8b7268787f6eb7eb9e93d074b0c27e3e95f83387f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003520380380620035208339810160408190526200003491620000c8565b80806001600160a01b0381166200009f5760405162461bcd60e51b815260206004820152602560248201527f4d6f64756c653a20696e76616c6964206261736520636f6e7472616374206164604482015264647265737360d81b606482015260840160405180910390fd5b600080546001600160a01b0319166001600160a01b039290921691909117905550620000fa9050565b600060208284031215620000db57600080fd5b81516001600160a01b0381168114620000f357600080fd5b9392505050565b613416806200010a6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806390d49b9d1161007157806390d49b9d1461019d578063b45edf47146101b0578063cfccd4bc146101c7578063f25f4b56146101da578063fe442f5d146101ed578063feec02841461020057600080fd5b806301df538d146100b957806312d335e2146100e95780631ab971ab1461010c578063251f02b414610121578063493fdf3e14610144578063676e85041461016c575b600080fd5b6000546100cc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fc6100f7366004612b34565b610220565b6040516100e09493929190612be1565b61011f61011a366004612c3b565b6102f8565b005b61013461012f366004612c3b565b610484565b60405190151581526020016100e0565b610157610152366004612ce4565b610a48565b60405163ffffffff90911681526020016100e0565b61015761017a366004612e2c565b805160208183018101805160038252928201919093012091525463ffffffff1681565b61011f6101ab366004612ed6565b610c7a565b60015461015790600160a01b900463ffffffff1681565b6101346101d5366004612c3b565b610da1565b6001546100cc906001600160a01b031681565b61011f6101fb366004612c3b565b610e30565b61021361020e366004612e2c565b611554565b6040516100e09190612fb0565b6002818154811061023057600080fd5b60009182526020909120600790910201600481015460058201805463ffffffff8084169550640100000000909304909216929161026c9061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546102989061308f565b80156102e55780601f106102ba576101008083540402835291602001916102e5565b820191906000526020600020905b8154815290600101906020018083116102c857829003601f168201915b5050506006909301549192505060ff1684565b60008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d91906130c4565b6001600160a01b0316336001600160a01b0316146103c85760405162461bcd60e51b81526020600482015260136024820152721199594e881b9bdd08185d5d1a1bdc9a5e9959606a1b60448201526064015b60405180910390fd5b6127108163ffffffff1611156104205760405162461bcd60e51b815260206004820152601c60248201527f4665653a2063616e2774206265206d6f7265207468616e20313030250000000060448201526064016103bf565b60015460405163ffffffff80841692600160a01b900416907fdeab7ddf530f3309d7f88438b7fbb714e557a5a30d0c2d1cfc3c0da1dde4096890600090a36001805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b600254600090829063ffffffff8216106104e05760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c653a206465616c496420646f65736e27742065786973740000000060448201526064016103bf565b600060028463ffffffff16815481106104fb576104fb6130e1565b9060005260206000209060070201604051806101000160405290816000820180548060200260200160405190810160405280929190818152602001828054801561056e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610550575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156105d057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105b2575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561066a5760008481526020908190208301805460408051828502810185019091528181529283018282801561065657602002820191906000526020600020905b815481526020019060010190808311610642575b5050505050815260200190600101906105fe565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610703576000848152602090819020830180546040805182850281018501909152818152928301828280156106ef57602002820191906000526020600020905b8154815260200190600101908083116106db575b505050505081526020019060010190610697565b50505090825250600482015463ffffffff80821660208401526401000000009091041660408201526005820180546060909201916107409061308f565b80601f016020809104026020016040519081016040528092919081815260200182805461076c9061308f565b80156107b95780601f1061078e576101008083540402835291602001916107b9565b820191906000526020600020905b81548152906001019060200180831161079c57829003601f168201915b5050509183525050600682015460209091019060ff1660038111156107e0576107e0612ba9565b60038111156107f1576107f1612ba9565b905250905060018160e00151600381111561080e5761080e612ba9565b1461081d576000925050610a42565b4263ffffffff16816080015163ffffffff16101561083f576000925050610a42565b60005b816020015151811015610a3b5760005b82604001518281518110610868576108686130e1565b602002602001015151811015610a285760008054845180516001600160a01b03909216916371cfe4989190859081106108a3576108a36130e1565b60200260200101516040518263ffffffff1660e01b81526004016108d691906001600160a01b0391909116815260200190565b602060405180830381865afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091791906130c4565b6001600160a01b031663246cd57430898760200151878151811061093d5761093d6130e1565b60200260200101516040518463ffffffff1660e01b8152600401610987939291906001600160a01b03938416815263ffffffff929092166020830152909116604082015260600190565b602060405180830381865afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906130f7565b9050836040015183815181106109e0576109e06130e1565b602002602001015182815181106109f9576109f96130e1565b6020026020010151811015610a15576000955050505050610a42565b5080610a2081613126565b915050610852565b5080610a3381613126565b915050610842565b5060019250505b50919050565b6000805b8b811015610b9c576000546001600160a01b031663c221e44b8e8e84818110610a7757610a776130e1565b9050602002016020810190610a8c9190612ed6565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190613141565b610b8a576000546001600160a01b03166394ffad748e8e84818110610b1b57610b1b6130e1565b9050602002016020810190610b309190612ed6565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015610b7157600080fd5b505af1158015610b85573d6000803e3d6000fd5b505050505b80610b9481613126565b915050610a4c565b50610c6a8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610c2292508c91508d9050613187565b610c2c898b613187565b88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061195b915050565b9c9b505050505050505050505050565b60008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cef91906130c4565b6001600160a01b0316336001600160a01b031614610d455760405162461bcd60e51b81526020600482015260136024820152721199594e881b9bdd08185d5d1a1bdc9a5e9959606a1b60448201526064016103bf565b6001546040516001600160a01b038084169216907f9f4f5dce3c4d197b5d7496cb96e25f0a89809167195964b0daa3ef5fed63c00a90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000600160028363ffffffff1681548110610dbe57610dbe6130e1565b600091825260209091206006600790920201015460ff166003811115610de657610de6612ba9565b141580610e2a57504263ffffffff1660028363ffffffff1681548110610e0e57610e0e6130e1565b600091825260209091206004600790920201015463ffffffff16105b92915050565b600254819063ffffffff821610610e895760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c653a206465616c496420646f65736e27742065786973740000000060448201526064016103bf565b81600160028263ffffffff1681548110610ea557610ea56130e1565b600091825260209091206006600790920201015460ff166003811115610ecd57610ecd612ba9565b14610f1a5760405162461bcd60e51b815260206004820152601960248201527f4d6f64756c653a206465616c4964206e6f74206163746976650000000000000060448201526064016103bf565b600060028463ffffffff1681548110610f3557610f356130e1565b6000918252602090912060046007909202019081015490915063ffffffff42811691161015610f9d5760405162461bcd60e51b8152602060048201526014602482015273135bd91d5b194e881cddd85c08195e1c1a5c995960621b60448201526064016103bf565b610fa684610484565b610ff25760405162461bcd60e51b815260206004820152601b60248201527f4d6f64756c653a2073776170206e6f742065786563757461626c65000000000060448201526064016103bf565b600061114b858360000180548060200260200160405190810160405280929190818152602001828054801561105057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611032575b5050505050846001018054806020026020016040519081016040528092919081815260200182805480156110ad57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161108f575b505050505085600201805480602002602001604051908101604052809291908181526020016000905b828210156111425760008481526020908190208301805460408051828502810185019091528181529283018282801561112e57602002820191906000526020600020905b81548152602001906001019080831161111a575b5050505050815260200190600101906110d6565b50505050611d5e565b6040805184546101206020820283018101909352610100820181815293945060009361143e9387928492918491908401828280156111b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611194575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561121457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111f6575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156112ae5760008481526020908190208301805460408051828502810185019091528181529283018282801561129a57602002820191906000526020600020905b815481526020019060010190808311611286575b505050505081526020019060010190611242565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156113475760008481526020908190208301805460408051828502810185019091528181529283018282801561133357602002820191906000526020600020905b81548152602001906001019080831161131f575b5050505050815260200190600101906112db565b50505090825250600482015463ffffffff80821660208401526401000000009091041660408201526005820180546060909201916113849061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546113b09061308f565b80156113fd5780601f106113d2576101008083540402835291602001916113fd565b820191906000526020600020905b8154815290600101906020018083116113e057829003601f168201915b5050509183525050600682015460209091019060ff16600381111561142457611424612ba9565b600381111561143557611435612ba9565b90525087612081565b905060005b60018401548110156114e257818181518110611461576114616130e1565b602002602001015183828151811061147b5761147b6130e1565b6020026020010151146114d05760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a20616d6f756e74206d69736d6174636800000000000000000060448201526064016103bf565b806114da81613126565b915050611443565b5060068301805460ff1916600317905560048301805467ffffffff0000000019166401000000004263ffffffff90811691909102919091179091556040519087169030907f0ac5c9ea9d419361b19812863ad8027a4f03c5936ac9955b67e9a60230ed94c890600090a3505050505050565b61155c612914565b81600060038260405161156f9190613252565b9081526040519081900360200190205463ffffffff169050801515806115d357508180519060200120600282815481106115ab576115ab6130e1565b90600052602060002090600702016005016040516115c9919061326e565b6040518091039020145b61161f5760405162461bcd60e51b815260206004820152601f60248201527f4d6f64756c653a206d6574616461746120646f6573206e6f742065786973740060448201526064016103bf565b60026003856040516116319190613252565b90815260405190819003602001902054815463ffffffff90911690811061165a5761165a6130e1565b906000526020600020906007020160405180610100016040529081600082018054806020026020016040519081016040528092919081815260200182805480156116cd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116af575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561172f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611711575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156117c9576000848152602090819020830180546040805182850281018501909152818152928301828280156117b557602002820191906000526020600020905b8154815260200190600101908083116117a1575b50505050508152602001906001019061175d565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156118625760008481526020908190208301805460408051828502810185019091528181529283018282801561184e57602002820191906000526020600020905b81548152602001906001019080831161183a575b5050505050815260200190600101906117f6565b50505090825250600482015463ffffffff808216602084015264010000000090910416604082015260058201805460609092019161189f9061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546118cb9061308f565b80156119185780601f106118ed57610100808354040283529160200191611918565b820191906000526020600020905b8154815290600101906020018083116118fb57829003601f168201915b5050509183525050600682015460209091019060ff16600381111561193f5761193f612ba9565b600381111561195057611950612ba9565b905250949350505050565b6002546000906001116119bd57611971836125f7565b6119bd5760405162461bcd60e51b815260206004820152601f60248201527f4d6f64756c653a206d6574616461746120616c7265616479206578697374730060448201526064016103bf565b600287511015611a0f5760405162461bcd60e51b815260206004820181905260248201527f4d6f64756c653a206174206c6561737420322064616f7320726571756972656460448201526064016103bf565b600186511015611a6b5760405162461bcd60e51b815260206004820152602160248201527f4d6f64756c653a206174206c65617374203120746f6b656e20726571756972656044820152601960fa1b60648201526084016103bf565b84518651148015611a7d575083518551145b8015611aa45750865185600081518110611a9957611a996130e1565b602002602001015151145b8015611ad757508651600485600081518110611ac257611ac26130e1565b602002602001015151611ad5919061330a565b145b611b235760405162461bcd60e51b815260206004820152601d60248201527f4d6f64756c653a20696e76616c6964206172726179206c656e6774687300000060448201526064016103bf565b60006040518061010001604052808981526020018881526020018781526020018681526020018463ffffffff168152602001600063ffffffff16815260200185815260200160016003811115611b7b57611b7b612ba9565b90526002805460018101825560009190915281518051929350839260079092027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0191611bd091839160209190910190612975565b506020828101518051611be99260018501920190612975565b5060408201518051611c059160028401916020909101906129da565b5060608201518051611c219160038401916020909101906129da565b50608082015160048201805460a085015163ffffffff9081166401000000000267ffffffffffffffff1990921693169290921791909117905560c08201518051611c75916005840191602090910190612a33565b5060e082015160068201805460ff19166001836003811115611c9957611c99612ba9565b02179055505060025460009150611cb29060019061332c565b905080600386604051611cc59190613252565b908152604051908190036020018120805463ffffffff9390931663ffffffff1990931692909217909155611cfa908690613252565b60405180910390208163ffffffff16306001600160a01b03167f44ff8d6e881c497a576c10db2665edb6ea7943ee9d305054b209bdaf863dd7648c8c8c8c8b604051611d4a959493929190613343565b60405180910390a498975050505050505050565b6060825167ffffffffffffffff811115611d7a57611d7a612de5565b604051908082528060200260200182016040528015611da3578160200160208202803683370190505b50905060005b8351811015612078578451838281518110611dc657611dc66130e1565b60200260200101515114611e1c5760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a206c656e677468206d69736d6174636800000000000000000060448201526064016103bf565b60005b838281518110611e3157611e316130e1565b602002602001015151811015612065576000848381518110611e5557611e556130e1565b60200260200101518281518110611e6e57611e6e6130e1565b6020026020010151111561205357838281518110611e8e57611e8e6130e1565b60200260200101518181518110611ea757611ea76130e1565b6020026020010151838381518110611ec157611ec16130e1565b60200260200101818151611ed591906133a9565b90525060005486516001600160a01b03909116906371cfe49890889084908110611f0157611f016130e1565b60200260200101516040518263ffffffff1660e01b8152600401611f3491906001600160a01b0391909116815260200190565b602060405180830381865afa158015611f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7591906130c4565b6001600160a01b0316632162a70c88878581518110611f9657611f966130e1565b6020026020010151878681518110611fb057611fb06130e1565b60200260200101518581518110611fc957611fc96130e1565b60209081029190910101516040516001600160e01b031960e086901b16815263ffffffff9390931660048401526001600160a01b03909116602483015260448201526064016020604051808303816000875af115801561202d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120519190613141565b505b8061205d81613126565b915050611e1f565b508061207081613126565b915050611da9565b50949350505050565b606082602001515167ffffffffffffffff8111156120a1576120a1612de5565b6040519080825280602002602001820160405280156120ca578160200160208202803683370190505b50905060005b8360200151518110156125f05760005b6004856060015183815181106120f8576120f86130e1565b60200260200101515161210b919061330a565b8110156125dd5760008560600151838151811061212a5761212a6130e1565b602002602001015182600461213f91906133c1565b8151811061214f5761214f6130e1565b602002602001015111156122535784606001518281518110612173576121736130e1565b602002602001015181600461218891906133c1565b81518110612198576121986130e1565b60200260200101518383815181106121b2576121b26130e1565b602002602001018181516121c691906133a9565b905250602085015180516122539190849081106121e5576121e56130e1565b602002602001015186600001518381518110612203576122036130e1565b602002602001015187606001518581518110612221576122216130e1565b602002602001015184600461223691906133c1565b81518110612246576122466130e1565b6020026020010151612683565b60008560600151838151811061226b5761226b6130e1565b602002602001015182600461228091906133c1565b61228b9060016133a9565b8151811061229b5761229b6130e1565b602002602001015111156125cb57846060015182815181106122bf576122bf6130e1565b60200260200101518160046122d491906133c1565b6122df9060016133a9565b815181106122ef576122ef6130e1565b6020026020010151838381518110612309576123096130e1565b6020026020010181815161231d91906133a9565b90525060208501518051600091612399918590811061233e5761233e6130e1565b60200260200101518760600151858151811061235c5761235c6130e1565b602002602001015184600461237191906133c1565b61237c9060016133a9565b8151811061238c5761238c6130e1565b602002602001015161269c565b90506123e0866020015184815181106123b4576123b46130e1565b6020026020010151876000015184815181106123d2576123d26130e1565b602002602001015183612724565b600054865180516001600160a01b03909216916371cfe49891908590811061240a5761240a6130e1565b60200260200101516040518263ffffffff1660e01b815260040161243d91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561245a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247e91906130c4565b6001600160a01b031663d405929286886020015186815181106124a3576124a36130e1565b6020026020010151848a6060015188815181106124c2576124c26130e1565b60200260200101518760046124d791906133c1565b6124e29060026133a9565b815181106124f2576124f26130e1565b60200260200101518b606001518981518110612510576125106130e1565b602002602001015188600461252591906133c1565b6125309060036133a9565b81518110612540576125406130e1565b60209081029190910101516040516001600160e01b031960e088901b16815263ffffffff95861660048201526001600160a01b03909416602485015260448401929092528316606483015291909116608482015260a401600060405180830381600087803b1580156125b157600080fd5b505af11580156125c5573d6000803e3d6000fd5b50505050505b806125d581613126565b9150506120e0565b50806125e881613126565b9150506120d0565b5092915050565b60008060038360405161260a9190613252565b9081526040519081900360200190205463ffffffff1690508015801561266f5750828051906020012060028281548110612646576126466130e1565b9060005260206000209060070201600501604051612664919061326e565b604051809103902014155b801561267c575060008351115b9392505050565b6126978383612692868561269c565b61279d565b505050565b6001546000906001600160a01b0316158015906126c75750600154600160a01b900463ffffffff1615155b15610a4257600154600090612710906126ed90600160a01b900463ffffffff16856133c1565b6126f7919061330a565b6001549091506127129085906001600160a01b03168361279d565b61271c818461332c565b915050610e2a565b600054604051630e39fc9360e31b81526001600160a01b0384811660048301526126979286929116906371cfe49890602401602060405180830381865afa158015612773573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279791906130c4565b8361285c565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156127ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128109190613141565b6126975760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a207472616e73666572206661696c656400000000000000000060448201526064016103bf565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af11580156128ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cf9190613141565b6126975760405162461bcd60e51b8152602060048201526016602482015275135bd91d5b194e88185c1c1c9bdd994819985a5b195960521b60448201526064016103bf565b60405180610100016040528060608152602001606081526020016060815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001606081526020016000600381111561297057612970612ba9565b905290565b8280548282559060005260206000209081019282156129ca579160200282015b828111156129ca57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612995565b506129d6929150612aa7565b5090565b828054828255906000526020600020908101928215612a27579160200282015b82811115612a275782518051612a17918491602090910190612abc565b50916020019190600101906129fa565b506129d6929150612af6565b828054612a3f9061308f565b90600052602060002090601f016020900481019282612a6157600085556129ca565b82601f10612a7a57805160ff19168380011785556129ca565b828001600101855582156129ca579182015b828111156129ca578251825591602001919060010190612a8c565b5b808211156129d65760008155600101612aa8565b8280548282559060005260206000209081019282156129ca57916020028201828111156129ca578251825591602001919060010190612a8c565b808211156129d6576000612b0a8282612b13565b50600101612af6565b5080546000825590600052602060002090810190612b319190612aa7565b50565b600060208284031215612b4657600080fd5b5035919050565b60005b83811015612b68578181015183820152602001612b50565b83811115612b77576000848401525b50505050565b60008151808452612b95816020860160208601612b4d565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60048110612bdd57634e487b7160e01b600052602160045260246000fd5b9052565b600063ffffffff808716835280861660208401525060806040830152612c0a6080830185612b7d565b9050612c196060830184612bbf565b95945050505050565b803563ffffffff81168114612c3657600080fd5b919050565b600060208284031215612c4d57600080fd5b61267c82612c22565b60008083601f840112612c6857600080fd5b50813567ffffffffffffffff811115612c8057600080fd5b6020830191508360208260051b8501011115612c9b57600080fd5b9250929050565b60008083601f840112612cb457600080fd5b50813567ffffffffffffffff811115612ccc57600080fd5b602083019150836020828501011115612c9b57600080fd5b600080600080600080600080600080600060c08c8e031215612d0557600080fd5b67ffffffffffffffff808d351115612d1c57600080fd5b612d298e8e358f01612c56565b909c509a5060208d0135811015612d3f57600080fd5b612d4f8e60208f01358f01612c56565b909a50985060408d0135811015612d6557600080fd5b612d758e60408f01358f01612c56565b909850965060608d0135811015612d8b57600080fd5b612d9b8e60608f01358f01612c56565b909650945060808d0135811015612db157600080fd5b50612dc28d60808e01358e01612ca2565b9093509150612dd360a08d01612c22565b90509295989b509295989b9093969950565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612e2457612e24612de5565b604052919050565b60006020808385031215612e3f57600080fd5b823567ffffffffffffffff80821115612e5757600080fd5b818501915085601f830112612e6b57600080fd5b813581811115612e7d57612e7d612de5565b612e8f601f8201601f19168501612dfb565b91508082528684828501011115612ea557600080fd5b8084840185840137600090820190930192909252509392505050565b6001600160a01b0381168114612b3157600080fd5b600060208284031215612ee857600080fd5b813561267c81612ec1565b600081518084526020808501945080840160005b83811015612f2c5781516001600160a01b031687529582019590820190600101612f07565b509495945050505050565b6000815180845260208085019450848260051b86018286016000805b86811015612fa2578484038a52825180518086529087019087860190845b81811015612f8d57835183529289019291890191600101612f71565b50509a87019a94505091850191600101612f53565b509198975050505050505050565b6020815260008251610100806020850152612fcf610120850183612ef3565b91506020850151601f1980868503016040870152612fed8483612ef3565b9350604087015191508086850301606087015261300a8483612f37565b935060608701519150808685030160808701526130278483612f37565b93506080870151915061304260a087018363ffffffff169052565b60a087015163ffffffff811660c0880152915060c08701519150808685030160e0870152506130718382612b7d565b92505060e085015161308582860182612bbf565b5090949350505050565b600181811c908216806130a357607f821691505b60208210811415610a4257634e487b7160e01b600052602260045260246000fd5b6000602082840312156130d657600080fd5b815161267c81612ec1565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561310957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561313a5761313a613110565b5060010190565b60006020828403121561315357600080fd5b8151801515811461267c57600080fd5b600067ffffffffffffffff82111561317d5761317d612de5565b5060051b60200190565b600061319a61319584613163565b612dfb565b83815260208082019190600586811b8601368111156131b857600080fd5b865b8181101561324557803567ffffffffffffffff8111156131da5760008081fd5b880136601f8201126131ec5760008081fd5b80356131fa61319582613163565b81815290851b820186019086810190368311156132175760008081fd5b928701925b828410156132355783358252928701929087019061321c565b89525050509483019483016131ba565b5092979650505050505050565b60008251613264818460208701612b4d565b9190910192915050565b600080835481600182811c91508083168061328a57607f831692505b60208084108214156132aa57634e487b7160e01b86526022600452602486fd5b8180156132be57600181146132cf576132fc565b60ff198616895284890196506132fc565b60008a81526020902060005b868110156132f45781548b8201529085019083016132db565b505084890196505b509498975050505050505050565b60008261332757634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561333e5761333e613110565b500390565b60a08152600061335660a0830188612ef3565b82810360208401526133688188612ef3565b9050828103604084015261337c8187612f37565b905082810360608401526133908186612f37565b91505063ffffffff831660808301529695505050505050565b600082198211156133bc576133bc613110565b500190565b60008160001904831182151516156133db576133db613110565b50029056fea264697066735822122042efed3dbde7f004fc0b7e2c23d3d88c34ce0807fd57cc3eefd2b75cb778fef164736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806390d49b9d1161007157806390d49b9d1461019d578063b45edf47146101b0578063cfccd4bc146101c7578063f25f4b56146101da578063fe442f5d146101ed578063feec02841461020057600080fd5b806301df538d146100b957806312d335e2146100e95780631ab971ab1461010c578063251f02b414610121578063493fdf3e14610144578063676e85041461016c575b600080fd5b6000546100cc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fc6100f7366004612b34565b610220565b6040516100e09493929190612be1565b61011f61011a366004612c3b565b6102f8565b005b61013461012f366004612c3b565b610484565b60405190151581526020016100e0565b610157610152366004612ce4565b610a48565b60405163ffffffff90911681526020016100e0565b61015761017a366004612e2c565b805160208183018101805160038252928201919093012091525463ffffffff1681565b61011f6101ab366004612ed6565b610c7a565b60015461015790600160a01b900463ffffffff1681565b6101346101d5366004612c3b565b610da1565b6001546100cc906001600160a01b031681565b61011f6101fb366004612c3b565b610e30565b61021361020e366004612e2c565b611554565b6040516100e09190612fb0565b6002818154811061023057600080fd5b60009182526020909120600790910201600481015460058201805463ffffffff8084169550640100000000909304909216929161026c9061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546102989061308f565b80156102e55780601f106102ba576101008083540402835291602001916102e5565b820191906000526020600020905b8154815290600101906020018083116102c857829003601f168201915b5050506006909301549192505060ff1684565b60008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d91906130c4565b6001600160a01b0316336001600160a01b0316146103c85760405162461bcd60e51b81526020600482015260136024820152721199594e881b9bdd08185d5d1a1bdc9a5e9959606a1b60448201526064015b60405180910390fd5b6127108163ffffffff1611156104205760405162461bcd60e51b815260206004820152601c60248201527f4665653a2063616e2774206265206d6f7265207468616e20313030250000000060448201526064016103bf565b60015460405163ffffffff80841692600160a01b900416907fdeab7ddf530f3309d7f88438b7fbb714e557a5a30d0c2d1cfc3c0da1dde4096890600090a36001805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b600254600090829063ffffffff8216106104e05760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c653a206465616c496420646f65736e27742065786973740000000060448201526064016103bf565b600060028463ffffffff16815481106104fb576104fb6130e1565b9060005260206000209060070201604051806101000160405290816000820180548060200260200160405190810160405280929190818152602001828054801561056e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610550575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156105d057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105b2575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561066a5760008481526020908190208301805460408051828502810185019091528181529283018282801561065657602002820191906000526020600020905b815481526020019060010190808311610642575b5050505050815260200190600101906105fe565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610703576000848152602090819020830180546040805182850281018501909152818152928301828280156106ef57602002820191906000526020600020905b8154815260200190600101908083116106db575b505050505081526020019060010190610697565b50505090825250600482015463ffffffff80821660208401526401000000009091041660408201526005820180546060909201916107409061308f565b80601f016020809104026020016040519081016040528092919081815260200182805461076c9061308f565b80156107b95780601f1061078e576101008083540402835291602001916107b9565b820191906000526020600020905b81548152906001019060200180831161079c57829003601f168201915b5050509183525050600682015460209091019060ff1660038111156107e0576107e0612ba9565b60038111156107f1576107f1612ba9565b905250905060018160e00151600381111561080e5761080e612ba9565b1461081d576000925050610a42565b4263ffffffff16816080015163ffffffff16101561083f576000925050610a42565b60005b816020015151811015610a3b5760005b82604001518281518110610868576108686130e1565b602002602001015151811015610a285760008054845180516001600160a01b03909216916371cfe4989190859081106108a3576108a36130e1565b60200260200101516040518263ffffffff1660e01b81526004016108d691906001600160a01b0391909116815260200190565b602060405180830381865afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091791906130c4565b6001600160a01b031663246cd57430898760200151878151811061093d5761093d6130e1565b60200260200101516040518463ffffffff1660e01b8152600401610987939291906001600160a01b03938416815263ffffffff929092166020830152909116604082015260600190565b602060405180830381865afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906130f7565b9050836040015183815181106109e0576109e06130e1565b602002602001015182815181106109f9576109f96130e1565b6020026020010151811015610a15576000955050505050610a42565b5080610a2081613126565b915050610852565b5080610a3381613126565b915050610842565b5060019250505b50919050565b6000805b8b811015610b9c576000546001600160a01b031663c221e44b8e8e84818110610a7757610a776130e1565b9050602002016020810190610a8c9190612ed6565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190613141565b610b8a576000546001600160a01b03166394ffad748e8e84818110610b1b57610b1b6130e1565b9050602002016020810190610b309190612ed6565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015610b7157600080fd5b505af1158015610b85573d6000803e3d6000fd5b505050505b80610b9481613126565b915050610a4c565b50610c6a8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610c2292508c91508d9050613187565b610c2c898b613187565b88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061195b915050565b9c9b505050505050505050505050565b60008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cef91906130c4565b6001600160a01b0316336001600160a01b031614610d455760405162461bcd60e51b81526020600482015260136024820152721199594e881b9bdd08185d5d1a1bdc9a5e9959606a1b60448201526064016103bf565b6001546040516001600160a01b038084169216907f9f4f5dce3c4d197b5d7496cb96e25f0a89809167195964b0daa3ef5fed63c00a90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000600160028363ffffffff1681548110610dbe57610dbe6130e1565b600091825260209091206006600790920201015460ff166003811115610de657610de6612ba9565b141580610e2a57504263ffffffff1660028363ffffffff1681548110610e0e57610e0e6130e1565b600091825260209091206004600790920201015463ffffffff16105b92915050565b600254819063ffffffff821610610e895760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c653a206465616c496420646f65736e27742065786973740000000060448201526064016103bf565b81600160028263ffffffff1681548110610ea557610ea56130e1565b600091825260209091206006600790920201015460ff166003811115610ecd57610ecd612ba9565b14610f1a5760405162461bcd60e51b815260206004820152601960248201527f4d6f64756c653a206465616c4964206e6f74206163746976650000000000000060448201526064016103bf565b600060028463ffffffff1681548110610f3557610f356130e1565b6000918252602090912060046007909202019081015490915063ffffffff42811691161015610f9d5760405162461bcd60e51b8152602060048201526014602482015273135bd91d5b194e881cddd85c08195e1c1a5c995960621b60448201526064016103bf565b610fa684610484565b610ff25760405162461bcd60e51b815260206004820152601b60248201527f4d6f64756c653a2073776170206e6f742065786563757461626c65000000000060448201526064016103bf565b600061114b858360000180548060200260200160405190810160405280929190818152602001828054801561105057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611032575b5050505050846001018054806020026020016040519081016040528092919081815260200182805480156110ad57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161108f575b505050505085600201805480602002602001604051908101604052809291908181526020016000905b828210156111425760008481526020908190208301805460408051828502810185019091528181529283018282801561112e57602002820191906000526020600020905b81548152602001906001019080831161111a575b5050505050815260200190600101906110d6565b50505050611d5e565b6040805184546101206020820283018101909352610100820181815293945060009361143e9387928492918491908401828280156111b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611194575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561121457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111f6575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156112ae5760008481526020908190208301805460408051828502810185019091528181529283018282801561129a57602002820191906000526020600020905b815481526020019060010190808311611286575b505050505081526020019060010190611242565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156113475760008481526020908190208301805460408051828502810185019091528181529283018282801561133357602002820191906000526020600020905b81548152602001906001019080831161131f575b5050505050815260200190600101906112db565b50505090825250600482015463ffffffff80821660208401526401000000009091041660408201526005820180546060909201916113849061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546113b09061308f565b80156113fd5780601f106113d2576101008083540402835291602001916113fd565b820191906000526020600020905b8154815290600101906020018083116113e057829003601f168201915b5050509183525050600682015460209091019060ff16600381111561142457611424612ba9565b600381111561143557611435612ba9565b90525087612081565b905060005b60018401548110156114e257818181518110611461576114616130e1565b602002602001015183828151811061147b5761147b6130e1565b6020026020010151146114d05760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a20616d6f756e74206d69736d6174636800000000000000000060448201526064016103bf565b806114da81613126565b915050611443565b5060068301805460ff1916600317905560048301805467ffffffff0000000019166401000000004263ffffffff90811691909102919091179091556040519087169030907f0ac5c9ea9d419361b19812863ad8027a4f03c5936ac9955b67e9a60230ed94c890600090a3505050505050565b61155c612914565b81600060038260405161156f9190613252565b9081526040519081900360200190205463ffffffff169050801515806115d357508180519060200120600282815481106115ab576115ab6130e1565b90600052602060002090600702016005016040516115c9919061326e565b6040518091039020145b61161f5760405162461bcd60e51b815260206004820152601f60248201527f4d6f64756c653a206d6574616461746120646f6573206e6f742065786973740060448201526064016103bf565b60026003856040516116319190613252565b90815260405190819003602001902054815463ffffffff90911690811061165a5761165a6130e1565b906000526020600020906007020160405180610100016040529081600082018054806020026020016040519081016040528092919081815260200182805480156116cd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116af575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561172f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611711575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156117c9576000848152602090819020830180546040805182850281018501909152818152928301828280156117b557602002820191906000526020600020905b8154815260200190600101908083116117a1575b50505050508152602001906001019061175d565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156118625760008481526020908190208301805460408051828502810185019091528181529283018282801561184e57602002820191906000526020600020905b81548152602001906001019080831161183a575b5050505050815260200190600101906117f6565b50505090825250600482015463ffffffff808216602084015264010000000090910416604082015260058201805460609092019161189f9061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546118cb9061308f565b80156119185780601f106118ed57610100808354040283529160200191611918565b820191906000526020600020905b8154815290600101906020018083116118fb57829003601f168201915b5050509183525050600682015460209091019060ff16600381111561193f5761193f612ba9565b600381111561195057611950612ba9565b905250949350505050565b6002546000906001116119bd57611971836125f7565b6119bd5760405162461bcd60e51b815260206004820152601f60248201527f4d6f64756c653a206d6574616461746120616c7265616479206578697374730060448201526064016103bf565b600287511015611a0f5760405162461bcd60e51b815260206004820181905260248201527f4d6f64756c653a206174206c6561737420322064616f7320726571756972656460448201526064016103bf565b600186511015611a6b5760405162461bcd60e51b815260206004820152602160248201527f4d6f64756c653a206174206c65617374203120746f6b656e20726571756972656044820152601960fa1b60648201526084016103bf565b84518651148015611a7d575083518551145b8015611aa45750865185600081518110611a9957611a996130e1565b602002602001015151145b8015611ad757508651600485600081518110611ac257611ac26130e1565b602002602001015151611ad5919061330a565b145b611b235760405162461bcd60e51b815260206004820152601d60248201527f4d6f64756c653a20696e76616c6964206172726179206c656e6774687300000060448201526064016103bf565b60006040518061010001604052808981526020018881526020018781526020018681526020018463ffffffff168152602001600063ffffffff16815260200185815260200160016003811115611b7b57611b7b612ba9565b90526002805460018101825560009190915281518051929350839260079092027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0191611bd091839160209190910190612975565b506020828101518051611be99260018501920190612975565b5060408201518051611c059160028401916020909101906129da565b5060608201518051611c219160038401916020909101906129da565b50608082015160048201805460a085015163ffffffff9081166401000000000267ffffffffffffffff1990921693169290921791909117905560c08201518051611c75916005840191602090910190612a33565b5060e082015160068201805460ff19166001836003811115611c9957611c99612ba9565b02179055505060025460009150611cb29060019061332c565b905080600386604051611cc59190613252565b908152604051908190036020018120805463ffffffff9390931663ffffffff1990931692909217909155611cfa908690613252565b60405180910390208163ffffffff16306001600160a01b03167f44ff8d6e881c497a576c10db2665edb6ea7943ee9d305054b209bdaf863dd7648c8c8c8c8b604051611d4a959493929190613343565b60405180910390a498975050505050505050565b6060825167ffffffffffffffff811115611d7a57611d7a612de5565b604051908082528060200260200182016040528015611da3578160200160208202803683370190505b50905060005b8351811015612078578451838281518110611dc657611dc66130e1565b60200260200101515114611e1c5760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a206c656e677468206d69736d6174636800000000000000000060448201526064016103bf565b60005b838281518110611e3157611e316130e1565b602002602001015151811015612065576000848381518110611e5557611e556130e1565b60200260200101518281518110611e6e57611e6e6130e1565b6020026020010151111561205357838281518110611e8e57611e8e6130e1565b60200260200101518181518110611ea757611ea76130e1565b6020026020010151838381518110611ec157611ec16130e1565b60200260200101818151611ed591906133a9565b90525060005486516001600160a01b03909116906371cfe49890889084908110611f0157611f016130e1565b60200260200101516040518263ffffffff1660e01b8152600401611f3491906001600160a01b0391909116815260200190565b602060405180830381865afa158015611f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7591906130c4565b6001600160a01b0316632162a70c88878581518110611f9657611f966130e1565b6020026020010151878681518110611fb057611fb06130e1565b60200260200101518581518110611fc957611fc96130e1565b60209081029190910101516040516001600160e01b031960e086901b16815263ffffffff9390931660048401526001600160a01b03909116602483015260448201526064016020604051808303816000875af115801561202d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120519190613141565b505b8061205d81613126565b915050611e1f565b508061207081613126565b915050611da9565b50949350505050565b606082602001515167ffffffffffffffff8111156120a1576120a1612de5565b6040519080825280602002602001820160405280156120ca578160200160208202803683370190505b50905060005b8360200151518110156125f05760005b6004856060015183815181106120f8576120f86130e1565b60200260200101515161210b919061330a565b8110156125dd5760008560600151838151811061212a5761212a6130e1565b602002602001015182600461213f91906133c1565b8151811061214f5761214f6130e1565b602002602001015111156122535784606001518281518110612173576121736130e1565b602002602001015181600461218891906133c1565b81518110612198576121986130e1565b60200260200101518383815181106121b2576121b26130e1565b602002602001018181516121c691906133a9565b905250602085015180516122539190849081106121e5576121e56130e1565b602002602001015186600001518381518110612203576122036130e1565b602002602001015187606001518581518110612221576122216130e1565b602002602001015184600461223691906133c1565b81518110612246576122466130e1565b6020026020010151612683565b60008560600151838151811061226b5761226b6130e1565b602002602001015182600461228091906133c1565b61228b9060016133a9565b8151811061229b5761229b6130e1565b602002602001015111156125cb57846060015182815181106122bf576122bf6130e1565b60200260200101518160046122d491906133c1565b6122df9060016133a9565b815181106122ef576122ef6130e1565b6020026020010151838381518110612309576123096130e1565b6020026020010181815161231d91906133a9565b90525060208501518051600091612399918590811061233e5761233e6130e1565b60200260200101518760600151858151811061235c5761235c6130e1565b602002602001015184600461237191906133c1565b61237c9060016133a9565b8151811061238c5761238c6130e1565b602002602001015161269c565b90506123e0866020015184815181106123b4576123b46130e1565b6020026020010151876000015184815181106123d2576123d26130e1565b602002602001015183612724565b600054865180516001600160a01b03909216916371cfe49891908590811061240a5761240a6130e1565b60200260200101516040518263ffffffff1660e01b815260040161243d91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561245a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247e91906130c4565b6001600160a01b031663d405929286886020015186815181106124a3576124a36130e1565b6020026020010151848a6060015188815181106124c2576124c26130e1565b60200260200101518760046124d791906133c1565b6124e29060026133a9565b815181106124f2576124f26130e1565b60200260200101518b606001518981518110612510576125106130e1565b602002602001015188600461252591906133c1565b6125309060036133a9565b81518110612540576125406130e1565b60209081029190910101516040516001600160e01b031960e088901b16815263ffffffff95861660048201526001600160a01b03909416602485015260448401929092528316606483015291909116608482015260a401600060405180830381600087803b1580156125b157600080fd5b505af11580156125c5573d6000803e3d6000fd5b50505050505b806125d581613126565b9150506120e0565b50806125e881613126565b9150506120d0565b5092915050565b60008060038360405161260a9190613252565b9081526040519081900360200190205463ffffffff1690508015801561266f5750828051906020012060028281548110612646576126466130e1565b9060005260206000209060070201600501604051612664919061326e565b604051809103902014155b801561267c575060008351115b9392505050565b6126978383612692868561269c565b61279d565b505050565b6001546000906001600160a01b0316158015906126c75750600154600160a01b900463ffffffff1615155b15610a4257600154600090612710906126ed90600160a01b900463ffffffff16856133c1565b6126f7919061330a565b6001549091506127129085906001600160a01b03168361279d565b61271c818461332c565b915050610e2a565b600054604051630e39fc9360e31b81526001600160a01b0384811660048301526126979286929116906371cfe49890602401602060405180830381865afa158015612773573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279791906130c4565b8361285c565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156127ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128109190613141565b6126975760405162461bcd60e51b815260206004820152601760248201527f4d6f64756c653a207472616e73666572206661696c656400000000000000000060448201526064016103bf565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af11580156128ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cf9190613141565b6126975760405162461bcd60e51b8152602060048201526016602482015275135bd91d5b194e88185c1c1c9bdd994819985a5b195960521b60448201526064016103bf565b60405180610100016040528060608152602001606081526020016060815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001606081526020016000600381111561297057612970612ba9565b905290565b8280548282559060005260206000209081019282156129ca579160200282015b828111156129ca57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612995565b506129d6929150612aa7565b5090565b828054828255906000526020600020908101928215612a27579160200282015b82811115612a275782518051612a17918491602090910190612abc565b50916020019190600101906129fa565b506129d6929150612af6565b828054612a3f9061308f565b90600052602060002090601f016020900481019282612a6157600085556129ca565b82601f10612a7a57805160ff19168380011785556129ca565b828001600101855582156129ca579182015b828111156129ca578251825591602001919060010190612a8c565b5b808211156129d65760008155600101612aa8565b8280548282559060005260206000209081019282156129ca57916020028201828111156129ca578251825591602001919060010190612a8c565b808211156129d6576000612b0a8282612b13565b50600101612af6565b5080546000825590600052602060002090810190612b319190612aa7565b50565b600060208284031215612b4657600080fd5b5035919050565b60005b83811015612b68578181015183820152602001612b50565b83811115612b77576000848401525b50505050565b60008151808452612b95816020860160208601612b4d565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60048110612bdd57634e487b7160e01b600052602160045260246000fd5b9052565b600063ffffffff808716835280861660208401525060806040830152612c0a6080830185612b7d565b9050612c196060830184612bbf565b95945050505050565b803563ffffffff81168114612c3657600080fd5b919050565b600060208284031215612c4d57600080fd5b61267c82612c22565b60008083601f840112612c6857600080fd5b50813567ffffffffffffffff811115612c8057600080fd5b6020830191508360208260051b8501011115612c9b57600080fd5b9250929050565b60008083601f840112612cb457600080fd5b50813567ffffffffffffffff811115612ccc57600080fd5b602083019150836020828501011115612c9b57600080fd5b600080600080600080600080600080600060c08c8e031215612d0557600080fd5b67ffffffffffffffff808d351115612d1c57600080fd5b612d298e8e358f01612c56565b909c509a5060208d0135811015612d3f57600080fd5b612d4f8e60208f01358f01612c56565b909a50985060408d0135811015612d6557600080fd5b612d758e60408f01358f01612c56565b909850965060608d0135811015612d8b57600080fd5b612d9b8e60608f01358f01612c56565b909650945060808d0135811015612db157600080fd5b50612dc28d60808e01358e01612ca2565b9093509150612dd360a08d01612c22565b90509295989b509295989b9093969950565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612e2457612e24612de5565b604052919050565b60006020808385031215612e3f57600080fd5b823567ffffffffffffffff80821115612e5757600080fd5b818501915085601f830112612e6b57600080fd5b813581811115612e7d57612e7d612de5565b612e8f601f8201601f19168501612dfb565b91508082528684828501011115612ea557600080fd5b8084840185840137600090820190930192909252509392505050565b6001600160a01b0381168114612b3157600080fd5b600060208284031215612ee857600080fd5b813561267c81612ec1565b600081518084526020808501945080840160005b83811015612f2c5781516001600160a01b031687529582019590820190600101612f07565b509495945050505050565b6000815180845260208085019450848260051b86018286016000805b86811015612fa2578484038a52825180518086529087019087860190845b81811015612f8d57835183529289019291890191600101612f71565b50509a87019a94505091850191600101612f53565b509198975050505050505050565b6020815260008251610100806020850152612fcf610120850183612ef3565b91506020850151601f1980868503016040870152612fed8483612ef3565b9350604087015191508086850301606087015261300a8483612f37565b935060608701519150808685030160808701526130278483612f37565b93506080870151915061304260a087018363ffffffff169052565b60a087015163ffffffff811660c0880152915060c08701519150808685030160e0870152506130718382612b7d565b92505060e085015161308582860182612bbf565b5090949350505050565b600181811c908216806130a357607f821691505b60208210811415610a4257634e487b7160e01b600052602260045260246000fd5b6000602082840312156130d657600080fd5b815161267c81612ec1565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561310957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561313a5761313a613110565b5060010190565b60006020828403121561315357600080fd5b8151801515811461267c57600080fd5b600067ffffffffffffffff82111561317d5761317d612de5565b5060051b60200190565b600061319a61319584613163565b612dfb565b83815260208082019190600586811b8601368111156131b857600080fd5b865b8181101561324557803567ffffffffffffffff8111156131da5760008081fd5b880136601f8201126131ec5760008081fd5b80356131fa61319582613163565b81815290851b820186019086810190368311156132175760008081fd5b928701925b828410156132355783358252928701929087019061321c565b89525050509483019483016131ba565b5092979650505050505050565b60008251613264818460208701612b4d565b9190910192915050565b600080835481600182811c91508083168061328a57607f831692505b60208084108214156132aa57634e487b7160e01b86526022600452602486fd5b8180156132be57600181146132cf576132fc565b60ff198616895284890196506132fc565b60008a81526020902060005b868110156132f45781548b8201529085019083016132db565b505084890196505b509498975050505050505050565b60008261332757634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561333e5761333e613110565b500390565b60a08152600061335660a0830188612ef3565b82810360208401526133688188612ef3565b9050828103604084015261337c8187612f37565b905082810360608401526133908186612f37565b91505063ffffffff831660808301529695505050505050565b600082198211156133bc576133bc613110565b500190565b60008160001904831182151516156133db576133db613110565b50029056fea264697066735822122042efed3dbde7f004fc0b7e2c23d3d88c34ce0807fd57cc3eefd2b75cb778fef164736f6c634300080a0033",
  "devdoc": {
    "details": "Smart contract to handle token swap        interactions for PrimeDeals",
    "kind": "dev",
    "methods": {
      "checkExecutability(uint32)": {
        "details": "Checks whether a token swap action can be executed (which is the case if all DAOs have deposited)",
        "params": {
          "_dealId": "The dealId of the action (position in the array)"
        },
        "returns": {
          "_0": "A bool flag indiciating whether the action can be executed"
        }
      },
      "createSwap(address[],address[],uint256[][],uint256[][],bytes,uint32)": {
        "details": "Create a new token swap action and automatically creates Dao Deposit Manager for each DAO that does not have one",
        "params": {
          "_daos": "Array containing the DAOs that are involed in this action",
          "_deadline": "Time until which this action can be executed (unix timestamp)",
          "_pathFrom": "Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Contains absolute numbers of tokens",
          "_pathTo": "Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Contains a tuple(4) consisting of instant amount, vested  amount, vesting start, vesting end which then makes this  array look like: [[instantAmount_dao1, vestedAmount_dao1, vestingStart_dao1, vestingEnd_dao1, instantAmount_dao2, ...], [...]]",
          "_tokens": "Array containing the tokens that are involed in this action"
        }
      },
      "executeSwap(uint32)": {
        "details": "Executes a token swap action",
        "params": {
          "_dealId": "The dealId of the action (position in the array)"
        }
      },
      "setFee(uint32)": {
        "details": "Sets a new fee",
        "params": {
          "_feeInBasisPoints": "Fee amount in basis points (1% = 10000)"
        }
      },
      "setFeeWallet(address)": {
        "details": "Sets a new fee wallet",
        "params": {
          "_feeWallet": "Address of the new fee wallet"
        }
      }
    },
    "title": "PrimeDeals Token Swap Module",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeeChanged(uint32,uint32)": {
        "notice": "This event is emitted when the fee is updated"
      },
      "FeeWalletChanged(address,address)": {
        "notice": "This event is emitted when the fee wallet address is updated"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4145,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "dealManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IDealManager)3264"
      },
      {
        "astId": 4386,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeWallet",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4388,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeInBasisPoints",
        "offset": 20,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 7238,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "tokenSwaps",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(TokenSwap)7266_storage)dyn_storage"
      },
      {
        "astId": 7242,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "metadataToDealId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenSwap)7266_storage)dyn_storage": {
        "base": "t_struct(TokenSwap)7266_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenSwapModule.TokenSwap[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IDealManager)3264": {
        "encoding": "inplace",
        "label": "contract IDealManager",
        "numberOfBytes": "20"
      },
      "t_enum(Status)4150": {
        "encoding": "inplace",
        "label": "enum ModuleBase.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint32)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(TokenSwap)7266_storage": {
        "encoding": "inplace",
        "label": "struct TokenSwapModule.TokenSwap",
        "members": [
          {
            "astId": 7245,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "daos",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7248,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7252,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathFrom",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7256,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathTo",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7258,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 7260,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "executionDate",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 7262,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "metadata",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes_storage"
          },
          {
            "astId": 7265,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(Status)4150"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}