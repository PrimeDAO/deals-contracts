{
  "address": "0xE2786eD5aD271740529E05F43B37a69Faa6716D1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dealManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldFee",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldFeeWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeWallet",
          "type": "address"
        }
      ],
      "name": "FeeWalletChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadata",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "daos",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathFrom",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "pathTo",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        }
      ],
      "name": "TokenSwapCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadata",
          "type": "bytes32"
        }
      ],
      "name": "TokenSwapExecuted",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "checkExecutability",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_daos",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathFrom",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_pathTo",
          "type": "uint256[][]"
        },
        {
          "internalType": "bytes32",
          "name": "_metadata",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        }
      ],
      "name": "createSwap",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dealManager",
      "outputs": [
        {
          "internalType": "contract IDealManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "executeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeInBasisPoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_metadata",
          "type": "bytes32"
        }
      ],
      "name": "getTokenswapFromMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "daos",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathFrom",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint256[][]",
              "name": "pathTo",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "executionDate",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "metadata",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "isExecuted",
              "type": "bool"
            }
          ],
          "internalType": "struct TokenSwapModule.TokenSwap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "hasDealExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "metadataToDealId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_feeInBasisPoints",
          "type": "uint32"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeWallet",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSwaps",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "executionDate",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "metadata",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isExecuted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd81eaf954cdcc4357081c8c8003da6294d97bd056a933fdc5b987fab24e6929b",
  "receipt": {
    "to": null,
    "from": "0xc039897eE5A0d14A3d1F212922FaF7e159Ab619F",
    "contractAddress": "0xE2786eD5aD271740529E05F43B37a69Faa6716D1",
    "transactionIndex": 15,
    "gasUsed": "2645305",
    "logsBloom": "0x
    "blockHash": "0x1495e288d5ce9f16a17c329de9aba8e34e7bf5504466ba1d2009887e86507396",
    "transactionHash": "0xd81eaf954cdcc4357081c8c8003da6294d97bd056a933fdc5b987fab24e6929b",
    "logs": [],
    "blockNumber": 10532359,
    "cumulativeGasUsed": "8089796",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDe91db9E5e654591D671B4117C00d8b2a78909D4"
  ],
  "solcInputHash": "902f1c488355a157ff487fc7e74bb476",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dealManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldFee\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"}],\"name\":\"TokenSwapCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"TokenSwapExecuted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"checkExecutability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes32\",\"name\":\"_metadata\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"}],\"name\":\"createSwap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealManager\",\"outputs\":[{\"internalType\":\"contract IDealManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"executeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInBasisPoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_metadata\",\"type\":\"bytes32\"}],\"name\":\"getTokenswapFromMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"daos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathFrom\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"pathTo\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"executionDate\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"}],\"internalType\":\"struct TokenSwapModule.TokenSwap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"hasDealExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"metadataToDealId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feeInBasisPoints\",\"type\":\"uint32\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSwaps\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"executionDate\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"TokenSwapCreated(address,uint32,bytes32,address[],address[],uint256[][],uint256[][],uint32)\":{\"params\":{\"daos\":\"Array containing the DAOs that are involed in creating the token swap\",\"deadline\":\"The amount of time between the creation of the swap and the time when it can no longer be executed, in seconds\",\"dealId\":\"Deal id for the created token swap\",\"metadata\":\"Unique ID that is generated throught the Prime Deals frontend\",\"module\":\"Address of this module\",\"pathFrom\":\"Two-dimensional array containing the tokens flowing from the DAOs into the module\",\"pathTo\":\"Two-dimensional array containing the tokens flowing from the module to the DAOs\",\"tokens\":\"Array containing the tokens that are involed in creating the token swap\"}},\"TokenSwapExecuted(address,uint32,bytes32)\":{\"params\":{\"dealId\":\"Deal id for the executed token swap\",\"metadata\":\"Unique ID that is generated throught the Prime Deals frontend\",\"module\":\"Address of this module\"}}},\"kind\":\"dev\",\"methods\":{\"checkExecutability(uint32)\":{\"params\":{\"_dealId\":\"The dealId of the action (position in the array)\"},\"returns\":{\"_0\":\"bool        A bool flag indiciating whether the action can be executed\"}},\"createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)\":{\"params\":{\"_daos\":\"Array containing the DAOs that are involed in this action\",\"_deadline\":\"The amount of time between the creation of the swap and the time when it can no longer be executed, in seconds\",\"_metadata\":\"Unique ID that is generated throught the Prime Deals frontend\",\"_pathFrom\":\"Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Detailed overview on how to configure the array can be found at the TokenSwap struct description\",\"_pathTo\":\"Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Detailed overview on how to configure the array can be found at the TokenSwap struct description\",\"_tokens\":\"Array containing the tokens that are involed in this action\"},\"returns\":{\"_0\":\"uin32       The dealId of the new token swap\"}},\"executeSwap(uint32)\":{\"params\":{\"_dealId\":\"The dealId of the action (position in the array)\"}},\"getTokenswapFromMetadata(bytes32)\":{\"params\":{\"_metadata\":\"Unique ID that is generated throught the Prime Deals frontend\"},\"returns\":{\"swap\":\"        Token swap struct associated with the metadata\"}},\"hasDealExpired(uint32)\":{\"params\":{\"_dealId\":\"The dealId of the action (position in the array)\"},\"returns\":{\"_0\":\"bool         A bool flag indiciating whether token swap has expired\"}},\"setFee(uint32)\":{\"params\":{\"_feeInBasisPoints\":\"Fee amount in basis points (1% = 100)\"}},\"setFeeWallet(address)\":{\"details\":\"The fee system will be inactive if the feeWallet is set to a zero-address\",\"params\":{\"_feeWallet\":\"Address of the new fee wallet\"}}},\"title\":\"PrimeDeals Token Swap Module\",\"version\":1},\"userdoc\":{\"events\":{\"FeeChanged(uint32,uint32)\":{\"notice\":\"This event is emitted when the fee is updated\"},\"FeeWalletChanged(address,address)\":{\"notice\":\"This event is emitted when the fee wallet address is updated\"},\"TokenSwapCreated(address,uint32,bytes32,address[],address[],uint256[][],uint256[][],uint32)\":{\"notice\":\"This event is emitted when a token swap is created\"},\"TokenSwapExecuted(address,uint32,bytes32)\":{\"notice\":\"This event is emitted when a token swap is executed\"}},\"kind\":\"user\",\"methods\":{\"checkExecutability(uint32)\":{\"notice\":\"Checks whether a token swap action can be executed, which is the case if all DAOs have deposited\"},\"createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)\":{\"notice\":\"Create a new token swap action and automatically creates Dao Deposit Manager for each DAO that does not have one\"},\"dealManager()\":{\"notice\":\"Address of the DealManager implementation\"},\"executeSwap(uint32)\":{\"notice\":\"Executes a token swap action\"},\"feeInBasisPoints()\":{\"notice\":\"Fee in basis points (100% = 10000)\"},\"feeWallet()\":{\"notice\":\"Wallet that is receiving the fees\"},\"getTokenswapFromMetadata(bytes32)\":{\"notice\":\"Returns the TokenSwap struct associated with the metadata\"},\"hasDealExpired(uint32)\":{\"notice\":\"Checks if the deal has been expired\"},\"metadataToDealId(bytes32)\":{\"notice\":\"Metadata => deal ID\"},\"setFee(uint32)\":{\"notice\":\"Sets a new fee\"},\"setFeeWallet(address)\":{\"notice\":\"Sets a new fee wallet\"},\"tokenSwaps(uint256)\":{\"notice\":\"Array of token swaps where the index == dealId\"}},\"notice\":\"Smart contract to handle token swap interactions for PrimeDeals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/tokenswap/TokenSwapModule.sol\":\"TokenSwapModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/interfaces/IDaoDepositManager.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDaoDepositManager {\\n    function dealManager() external returns (address);\\n\\n    function initialize(address _dao) external;\\n\\n    function migrateBaseContract(address _newDaoDepositManager) external;\\n\\n    function deposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function multipleDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable;\\n\\n    function registerDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external;\\n\\n    function registerDeposits(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address[] calldata _tokens\\n    ) external;\\n\\n    function withdraw(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId,\\n        address _sender\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function sendToModule(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function startVesting(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount,\\n        uint32 _vestingCliff,\\n        uint32 _vestingDuration\\n    ) external payable;\\n\\n    function claimVestings() external;\\n\\n    function verifyBalance(address _token) external view;\\n\\n    function getDeposit(\\n        address _dealModule,\\n        uint32 _dealId,\\n        uint32 _depositId\\n    )\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAvailableDealBalance(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getTotalDepositCount(address _dealModule, uint32 _dealId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableAmountOfDepositor(\\n        address _dealModule,\\n        uint32 _dealId,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function getBalance(address _token) external view returns (uint256);\\n\\n    function getVestedBalance(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x29c9f50be2915121839e0888cf251ac13eb3890240498987811f34e1b69fc939\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDealManager.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDealManager {\\n    function createDaoDepositManager(address _dao) external;\\n\\n    function hasDaoDepositManager(address _dao) external view returns (bool);\\n\\n    function getDaoDepositManager(address _dao) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function addressIsModule(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa31274c64c7a0b019b71ee0839fdbf5871a178275fbf483ee201e4743b5440d9\",\"license\":\"Unlicense\"},\"contracts/modules/ModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IDaoDepositManager.sol\\\";\\nimport \\\"../interfaces/IDealManager.sol\\\";\\n\\n/**\\n * @title                   PrimeDeals Module Base\\n * @notice                  Smart contract to serve as the\\n                            basis for each module\\n */\\ncontract ModuleBase {\\n    /// Address of the DealManager implementation\\n    IDealManager public immutable dealManager;\\n\\n    /**\\n     * @notice              Constructor\\n     * @param _dealManager  The address of DealManager implementation\\n     */\\n    constructor(address _dealManager) {\\n        require(_dealManager != address(0), \\\"ModuleBase: Error 100\\\");\\n        dealManager = IDealManager(_dealManager);\\n    }\\n\\n    /**\\n      * @notice             Sends tokens from a DAO deposit manager to the module\\n      * @param _dealId      ID of the action this is related to\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _path        Double nested array containing the amounts of tokens for each\\n                            token for each dao to be send\\n      * @return amountsIn   Array containing the total amounts sent per token\\n    */\\n    function _pullTokensIntoModule(\\n        uint32 _dealId,\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _path\\n    ) internal returns (uint256[] memory amountsIn) {\\n        amountsIn = new uint256[](_tokens.length);\\n        require(_path.length == _tokens.length, \\\"ModuleBase: Error 102\\\");\\n        for (uint256 i; i < _tokens.length; ++i) {\\n            uint256[] memory tokenPath = _path[i];\\n            require(tokenPath.length == _daos.length, \\\"ModuleBase: Error 102\\\");\\n            for (uint256 j; j < tokenPath.length; ++j) {\\n                uint256 daoAmount = tokenPath[j];\\n                if (daoAmount > 0) {\\n                    amountsIn[i] += daoAmount;\\n                    IDaoDepositManager(\\n                        dealManager.getDaoDepositManager(_daos[j])\\n                    ).sendToModule(_dealId, _tokens[i], daoAmount);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice              Calls the approval function of a token\\n     * @param _token        Address of the token\\n     * @param _to           Target of the approval\\n     * @param _amount       Amount to be approved\\n     */\\n    function _approveToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(IERC20(_token).approve(_to, _amount), \\\"ModuleBase: Error 243\\\");\\n    }\\n\\n    /**\\n     * @notice              Calls the approval function of a token\\n                            for the deposit manager of a DAO\\n     * @param _token        Address of the token\\n     * @param _dao          DAO whose deposit manager is the target\\n     * @param _amount       Amount to be approved\\n     */\\n    function _approveDaoDepositManager(\\n        address _token,\\n        address _dao,\\n        uint256 _amount\\n    ) internal {\\n        _approveToken(_token, dealManager.getDaoDepositManager(_dao), _amount);\\n    }\\n\\n    /**\\n     * @notice              Transfers an amount of tokens\\n     * @param _token        Address of the token\\n     * @param _to           Target of the transfer\\n     * @param _amount       Amount to be sent\\n     */\\n    function _transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_token != address(0)) {\\n            try IERC20(_token).transfer(_to, _amount) returns (bool success) {\\n                require(success, \\\"ModuleBase: Error 241\\\");\\n            } catch {\\n                revert(\\\"ModuleBase: Error 241\\\");\\n            }\\n        } else {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool sent, ) = _to.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"ModuleBase: Error 242\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice              Transfers an amount of tokens from an address\\n     * @param _token        Address of the token\\n     * @param _from         Source of the transfer\\n     * @param _to           Target of the transfer\\n     * @param _amount       Amount to be sent\\n     */\\n    function _transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_token != address(0), \\\"ModuleBase: Error 263\\\");\\n\\n        try IERC20(_token).transferFrom(_from, _to, _amount) returns (\\n            bool success\\n        ) {\\n            require(success, \\\"ModuleBase: Error 241\\\");\\n        } catch {\\n            revert(\\\"ModuleBase: Error 241\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice              Checks if the deal has been expired\\n     * @param _dealId       The dealId of the action (position in the array)\\n     * @return bool         A bool flag indiciating whether deal has expired\\n     */\\n    function hasDealExpired(uint32 _dealId)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    // solhint-disable-next-line no-empty-blocks\\n    {\\n\\n    }\\n}\\n\",\"keccak256\":\"0xb03e009e8964bd549edf413a6fccba6d20e463f71f92f732562a6eab4aec4597\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/ModuleBaseWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ModuleBase.sol\\\";\\n\\n/**\\n * @title                   PrimeDeals Module Base Fee Extension\\n * @notice                  Smart contract to extend the module\\n                            base with a fee mechanim\\n */\\ncontract ModuleBaseWithFee is ModuleBase {\\n    /// Wallet that is receiving the fees\\n    address public feeWallet;\\n    /// Fee in basis points (100% = 10000)\\n    uint32 public feeInBasisPoints;\\n    // Max fee 20%\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint32 public immutable MAX_FEE = 2000;\\n\\n    // Percentage precision to calculate the fee\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 public immutable BPS = 10000;\\n\\n    /**\\n     * @notice              Constructor\\n     * @param _dealManager  The address of Dealmanager implementation\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address _dealManager) ModuleBase(_dealManager) {}\\n\\n    /**\\n     * @notice              This event is emitted when the fee wallet address is updated\\n     * @param oldFeeWallet  Address of the old fee wallet\\n     * @param newFeeWallet  Address of the new fee wallet\\n     */\\n    event FeeWalletChanged(\\n        address indexed oldFeeWallet,\\n        address indexed newFeeWallet\\n    );\\n\\n    /**\\n     * @notice              This event is emitted when the fee is updated\\n     * @param oldFee        Old fee amount in basis points (1% = 100)\\n     * @param newFee        New fee in basis points (1% = 100) that is updated\\n     */\\n    event FeeChanged(uint32 indexed oldFee, uint32 indexed newFee);\\n\\n    /**\\n     * @notice              Sets a new fee wallet\\n     * @param _feeWallet    Address of the new fee wallet\\n     * @dev                 The fee system will be inactive if the feeWallet\\n                            is set to a zero-address\\n     */\\n    function setFeeWallet(address _feeWallet)\\n        external\\n        onlyDealManagerOwner(msg.sender)\\n    {\\n        require(\\n            _feeWallet != address(0) && _feeWallet != address(this),\\n            \\\"ModuleBaseWithFee: Error 100\\\"\\n        );\\n        if (feeWallet != _feeWallet) {\\n            feeWallet = _feeWallet;\\n            emit FeeWalletChanged(feeWallet, _feeWallet);\\n        }\\n    }\\n\\n    /**\\n     * @notice                      Sets a new fee\\n     * @param _feeInBasisPoints     Fee amount in basis points (1% = 100)\\n     */\\n    function setFee(uint32 _feeInBasisPoints)\\n        external\\n        onlyDealManagerOwner(msg.sender)\\n    {\\n        require(_feeInBasisPoints <= MAX_FEE, \\\"ModuleBaseWithFee: Error 264\\\");\\n        if (feeInBasisPoints != _feeInBasisPoints) {\\n            feeInBasisPoints = _feeInBasisPoints;\\n            emit FeeChanged(feeInBasisPoints, _feeInBasisPoints);\\n        }\\n    }\\n\\n    /**\\n     * @notice              Pays the fee in a token and returns the remainder\\n     * @param _token        Token in which the transfer happens\\n     * @param _amount       Amount of the transfer\\n     * @return uint256      Remaining amount after the fee payment\\n     */\\n    function _payFeeAndReturnRemainder(address _token, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (feeWallet != address(0) && feeInBasisPoints > 0) {\\n            uint256 fee = (_amount * feeInBasisPoints) / BPS;\\n            _transfer(_token, feeWallet, fee);\\n\\n            return _amount - fee;\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice                  Transfers a token amount with automated fee payment\\n     * @param _token            Token in which the transfer happens\\n     * @param _to               Target of the transfer\\n     * @param _amount           Amount of the transfer\\n     * @return amountAfterFee   The amount minus the fee\\n     */\\n    function _transferWithFee(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256 amountAfterFee) {\\n        amountAfterFee = _payFeeAndReturnRemainder(_token, _amount);\\n        _transfer(_token, _to, amountAfterFee);\\n    }\\n\\n    /**\\n     * @notice                  Transfers a token amount from someone with automated fee payment\\n     * @param _token            Token in which the transfer happens\\n     * @param _from             Source of the transfer\\n     * @param _to               Target of the transfer\\n     * @param _amount           Amount of the transfer\\n     * @return amountAfterFee   The amount minus the fee\\n     */\\n    function _transferFromWithFee(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256 amountAfterFee) {\\n        // if the transfer from does not touch this contract, we first\\n        // need to transfer it here, pay the fee, and then pass it on\\n        // if that is not the case, we can do the regular transferFrom\\n        if (_to != address(this)) {\\n            _transferFrom(_token, _from, address(this), _amount);\\n            amountAfterFee = _transferWithFee(_token, _to, _amount);\\n        } else {\\n            _transferFrom(_token, _from, _to, _amount);\\n            amountAfterFee = _payFeeAndReturnRemainder(_token, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice              Modifier that validates that the msg.sender\\n                            is the DealManager contract\\n     * @param _sender       Msg.sender of the function that is called\\n     */\\n    modifier onlyDealManagerOwner(address _sender) {\\n        require(_sender == dealManager.owner(), \\\"ModuleBaseWithFee: Error 221\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x88aac8a97c2e1f0dde0288c6aaba183ac259c8eff16dd74e897f6823288c9e77\",\"license\":\"GPL-3.0-or-later\"},\"contracts/modules/tokenswap/TokenSwapModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../ModuleBaseWithFee.sol\\\";\\n\\n/**\\n * @title                   PrimeDeals Token Swap Module\\n * @notice                  Smart contract to handle token swap\\n                            interactions for PrimeDeals\\n */\\ncontract TokenSwapModule is ModuleBaseWithFee {\\n    /// Array of token swaps where the index == dealId\\n    TokenSwap[] public tokenSwaps;\\n    /// Metadata => deal ID\\n    mapping(bytes32 => uint32) public metadataToDealId;\\n\\n    /**\\n     * @dev\\n     * pathFrom Description:\\n     * Used to storing how many tokens does each DAO send to the module\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> amount\\n     * [[123, 0, 123], [0, 123, 0]]\\n     * token 1: DAO 1 sends 123, DAO 2 sends 0, DAO 3 sends 123, etc.\\n     *\\n     * pathTo Description:\\n     * Used for storing how many tokens does each DAO receive from the module\\n     * includes vesting. For each DAO there is a tuple of four values:\\n     * instant amount, vested amount, vesting cliff, vesting duration.\\n     * The start time will be the block.timestamp when executing the deal.\\n     * This timestamp + vestingDuration can be used to calculate the vesting end.\\n     *\\n     * Example on how the values are stored:\\n     * token -> DAO -> tuple(4)\\n     * [[instantAmount_dao1, vestedAmount_dao1, vestingCliff_dao1,\\n     * vestingDuration_dao1, instantAmount_dao2, ...], [...]]\\n     */\\n    struct TokenSwap {\\n        /// The participating DAOs\\n        address[] daos;\\n        /// The tokens involved in the swap\\n        address[] tokens;\\n        /// The token flow from the DAOs to the module, see above\\n        uint256[][] pathFrom;\\n        /// The token flow from the module to the DAO, see above\\n        uint256[][] pathTo;\\n        /// Amount of time in seconds the token swap can be executed\\n        uint32 deadline;\\n        /// Unix timestamp of the execution\\n        uint32 executionDate;\\n        /// Hash of the deal information.\\n        bytes32 metadata;\\n        // boolean to check if the deal has been executed\\n        bool isExecuted;\\n    }\\n\\n    /**\\n     * @notice              This event is emitted when a token swap is created\\n     * @param module        Address of this module\\n     * @param dealId        Deal id for the created token swap\\n     * @param metadata      Unique ID that is generated throught the Prime Deals frontend\\n     * @param daos          Array containing the DAOs that are involed in creating the token swap\\n     * @param tokens        Array containing the tokens that are involed in creating the token swap\\n     * @param pathFrom      Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module\\n     * @param pathTo        Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs\\n     * @param deadline      The amount of time between the creation of the swap and the time when\\n                            it can no longer be executed, in seconds\\n     */\\n    event TokenSwapCreated(\\n        address indexed module,\\n        uint32 indexed dealId,\\n        bytes32 indexed metadata,\\n        address[] daos,\\n        address[] tokens,\\n        uint256[][] pathFrom,\\n        uint256[][] pathTo,\\n        uint32 deadline\\n    );\\n\\n    /**\\n     * @notice              This event is emitted when a token swap is executed\\n     * @param module        Address of this module\\n     * @param dealId        Deal id for the executed token swap\\n     * @param metadata      Unique ID that is generated throught the Prime Deals frontend\\n     */\\n    event TokenSwapExecuted(\\n        address indexed module,\\n        uint32 indexed dealId,\\n        bytes32 indexed metadata\\n    );\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address _dealManager) ModuleBaseWithFee(_dealManager) {}\\n\\n    /**\\n      * @notice             Creates a new token swap action\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Detailed overview on how to configure the array can be found at the\\n                                TokenSwap struct description\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Detailed overview on how to configure the array can be found at the\\n                                TokenSwap struct description\\n      * @param _metadata    Unique ID that is generated throught the Prime Deals frontend\\n      * @param _deadline    The amount of time between the creation of the swap and the time when\\n                            it can no longer be executed, in seconds\\n      * @return uint32      The dealId of the new token swap\\n    */\\n    function _createSwap(\\n        address[] memory _daos,\\n        address[] memory _tokens,\\n        uint256[][] memory _pathFrom,\\n        uint256[][] memory _pathTo,\\n        bytes32 _metadata,\\n        uint32 _deadline\\n    ) internal returns (uint32) {\\n        require(_metadata != \\\"\\\", \\\"TokenSwapModule: Error 101\\\");\\n        require(\\n            tokenSwaps.length == 0 || _metadataDoesNotExist(_metadata),\\n            \\\"TokenSwapModule: Error 203\\\"\\n        );\\n        require(_daos.length >= 2, \\\"TokenSwapModule: Error 204\\\");\\n        require(_tokens.length != 0, \\\"TokenSwapModule: Error 205\\\");\\n        require(_deadline > 0, \\\"TokenSwapModule: Error 101\\\");\\n\\n        // Check outer arrays\\n        uint256 pathFromLen = _pathFrom.length;\\n        require(\\n            _tokens.length == pathFromLen && pathFromLen == _pathTo.length,\\n            \\\"TokenSwapModule: Error 102\\\"\\n        );\\n\\n        // Check inner arrays\\n        uint256 daosLen = _daos.length;\\n        for (uint256 i; i < pathFromLen; ++i) {\\n            require(\\n                _pathFrom[i].length == daosLen &&\\n                    _pathTo[i].length == daosLen << 2,\\n                \\\"TokenSwapModule: Error 102\\\"\\n            );\\n        }\\n\\n        TokenSwap memory ts = TokenSwap(\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            // solhint-disable-next-line not-rely-on-time\\n            uint32(block.timestamp) + _deadline,\\n            0,\\n            _metadata,\\n            false\\n        );\\n        tokenSwaps.push(ts);\\n\\n        uint32 dealId = uint32(tokenSwaps.length - 1);\\n\\n        metadataToDealId[_metadata] = dealId;\\n\\n        emit TokenSwapCreated(\\n            address(this),\\n            dealId,\\n            _metadata,\\n            _daos,\\n            _tokens,\\n            _pathFrom,\\n            _pathTo,\\n            _deadline\\n        );\\n        return dealId;\\n    }\\n\\n    /**\\n      * @notice             Create a new token swap action and automatically\\n                            creates Dao Deposit Manager for each DAO that does not have one\\n      * @param _daos        Array containing the DAOs that are involed in this action\\n      * @param _tokens      Array containing the tokens that are involed in this action\\n      * @param _pathFrom    Two-dimensional array containing the tokens flowing from the\\n                            DAOs into the module:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Detailed overview on how to configure the array can be found at the\\n                                TokenSwap struct description\\n      * @param _pathTo      Two-dimensional array containing the tokens flowing from the\\n                            module to the DAOs:\\n                              - First array level is for each token\\n                              - Second array level is for each dao\\n                              - Detailed overview on how to configure the array can be found at the\\n                                TokenSwap struct description\\n      * @param _metadata    Unique ID that is generated throught the Prime Deals frontend\\n      * @param _deadline    The amount of time between the creation of the swap and the time when\\n                            it can no longer be executed, in seconds\\n      * @return uin32       The dealId of the new token swap\\n    */\\n    function createSwap(\\n        address[] calldata _daos,\\n        address[] calldata _tokens,\\n        uint256[][] calldata _pathFrom,\\n        uint256[][] calldata _pathTo,\\n        bytes32 _metadata,\\n        uint32 _deadline\\n    ) external returns (uint32) {\\n        for (uint256 i; i < _daos.length; ++i) {\\n            address dao = _daos[i];\\n            if (!dealManager.hasDaoDepositManager(dao)) {\\n                dealManager.createDaoDepositManager(dao);\\n            }\\n        }\\n        return (\\n            _createSwap(\\n                _daos,\\n                _tokens,\\n                _pathFrom,\\n                _pathTo,\\n                _metadata,\\n                _deadline\\n            )\\n        );\\n    }\\n\\n    /**\\n      * @notice             Checks whether a token swap action can be executed, which is the case\\n                            if all DAOs have deposited\\n      * @param _dealId      The dealId of the action (position in the array)\\n      * @return bool        A bool flag indiciating whether the action can be executed\\n    */\\n    function checkExecutability(uint32 _dealId)\\n        public\\n        view\\n        validDealId(_dealId)\\n        returns (bool)\\n    {\\n        TokenSwap memory ts = tokenSwaps[_dealId];\\n        if (hasDealExpired(_dealId)) {\\n            return false;\\n        }\\n\\n        address[] memory t = ts.tokens;\\n        for (uint256 i; i < t.length; ++i) {\\n            uint256[] memory p = ts.pathFrom[i];\\n            for (uint256 j; j < p.length; ++j) {\\n                if (p[j] == 0) {\\n                    continue;\\n                }\\n                // for each token and each pathFrom entry for this\\n                // token, check whether the corresponding DAO\\n                // has deposited the corresponding amount into their\\n                // deposit contract\\n                uint256 bal = IDaoDepositManager(\\n                    dealManager.getDaoDepositManager(ts.daos[j])\\n                ).getAvailableDealBalance(address(this), _dealId, t[i]);\\n                if (bal < p[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice              Executes a token swap action\\n     * @param _dealId       The dealId of the action (position in the array)\\n     */\\n    function executeSwap(uint32 _dealId)\\n        external\\n        validDealId(_dealId)\\n        isNotExecuted(_dealId)\\n    {\\n        TokenSwap storage ts = tokenSwaps[_dealId];\\n\\n        require(checkExecutability(_dealId), \\\"TokenSwapModule: Error 265\\\");\\n\\n        // transfer the tokens from the deposit manager of the DAOs\\n        // into this module\\n        uint256[] memory amountsIn = _pullTokensIntoModule(\\n            _dealId,\\n            ts.daos,\\n            ts.tokens,\\n            ts.pathFrom\\n        );\\n\\n        // distribute the tokens from this module to the DAOs\\n        // and (if applicable) and their vesting contracts\\n        uint256[] memory amountsOut = _distributeTokens(ts, _dealId);\\n\\n        // verify whether the amounts being pulled and pushed match\\n        for (uint256 i; i < ts.tokens.length; ++i) {\\n            require(\\n                amountsIn[i] == amountsOut[i],\\n                \\\"TokenSwapModule: Error 103\\\"\\n            );\\n        }\\n\\n        ts.isExecuted = true;\\n        // solhint-disable-next-line not-rely-on-time\\n        ts.executionDate = uint32(block.timestamp);\\n        emit TokenSwapExecuted(address(this), _dealId, ts.metadata);\\n    }\\n\\n    /**\\n      * @notice             Distributes the tokens based on the supplied information to the DAOs\\n                            or their vesting contracts\\n      * @param _ts          TokenSwap object containing all the information of the action\\n      * @param _dealId      The dealId of the action (position in the array)\\n      * @return amountsOut  The two min values for the token amounts _ts\\n    */\\n    function _distributeTokens(TokenSwap memory _ts, uint32 _dealId)\\n        internal\\n        returns (uint256[] memory amountsOut)\\n    {\\n        amountsOut = new uint256[](_ts.tokens.length);\\n        // Distribute tokens from the module\\n        for (uint256 i; i < _ts.tokens.length; ++i) {\\n            uint256[] memory pt = _ts.pathTo[i];\\n            address token = _ts.tokens[i];\\n            for (uint256 k; k < pt.length >> 2; ++k) {\\n                // every 4 values, the values for a new dao start\\n                // value 0 = instant amount\\n                // value 1 = vested amount\\n                // value 2 = vesting cliff\\n                // value 3 = vesting duration\\n                uint256 instant = pt[k << 2];\\n                uint256 vested = pt[(k << 2) + 1];\\n\\n                if (instant > 0) {\\n                    amountsOut[i] += instant;\\n                    _transferWithFee(token, _ts.daos[k], instant);\\n                }\\n\\n                if (vested > 0) {\\n                    amountsOut[i] += vested;\\n                    uint256 amount = _payFeeAndReturnRemainder(token, vested);\\n                    address daoDepositManager = dealManager\\n                        .getDaoDepositManager(_ts.daos[k]);\\n                    if (token != address(0)) {\\n                        _approveDaoDepositManager(token, _ts.daos[k], amount);\\n                    }\\n\\n                    IDaoDepositManager(daoDepositManager).startVesting{\\n                        value: token == address(0) ? amount : 0\\n                    }(\\n                        _dealId,\\n                        token,\\n                        amount, // amount\\n                        uint32(pt[(k << 2) + 2]), // start\\n                        uint32(pt[(k << 2) + 3]) // end\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice              Returns the TokenSwap struct associated with the metadata\\n     * @param _metadata     Unique ID that is generated throught the Prime Deals frontend\\n     * @return swap         Token swap struct associated with the metadata\\n     */\\n    function getTokenswapFromMetadata(bytes32 _metadata)\\n        public\\n        view\\n        returns (TokenSwap memory swap)\\n    {\\n        uint256 dealId = metadataToDealId[_metadata];\\n        require(\\n            dealId != 0 ||\\n                (tokenSwaps[dealId].metadata == _metadata && _metadata != \\\"\\\"),\\n            \\\"TokenSwapModule: Error 206\\\"\\n        );\\n        return tokenSwaps[metadataToDealId[_metadata]];\\n    }\\n\\n    /**\\n     * @notice              Checks if the deal has been expired\\n     * @param _dealId       The dealId of the action (position in the array)\\n     * @return bool         A bool flag indiciating whether token swap has expired\\n     */\\n    function hasDealExpired(uint32 _dealId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            tokenSwaps[_dealId].isExecuted ||\\n            // solhint-disable-next-line not-rely-on-time\\n            tokenSwaps[_dealId].deadline < uint32(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice              Checks if the given metadata is Unique, and not already used\\n     * @param _metadata     Unique ID that is generated throught the Prime Deals frontend\\n     * @return bool         A bool flag indiciating whether the metadata is unique\\n     */\\n    function _metadataDoesNotExist(bytes32 _metadata)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 dealId = metadataToDealId[_metadata];\\n        return (dealId == 0 && tokenSwaps[dealId].metadata != _metadata);\\n    }\\n\\n    /**\\n     * @notice              Modifier that validates if the given deal ID is valid\\n     * @param _dealId       The dealId of the action (position in the array)\\n     */\\n    modifier validDealId(uint32 _dealId) {\\n        require(_dealId < tokenSwaps.length, \\\"TokenSwapModule: Error 207\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice              Modifier that validates if token swap has not been executed\\n     * @param _dealId       The dealId of the action (position in the array)\\n     */\\n    modifier isNotExecuted(uint32 _dealId) {\\n        require(!tokenSwaps[_dealId].isExecuted, \\\"TokenSwapModule: Error 266\\\");\\n        _;\\n    }\\n\\n    fallback() external payable {}\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x5278d8f074c608dbd06eed3417d1574907704f7e268103539e0af6a45a076869\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040526107d060a05261271060c0523480156200001d57600080fd5b5060405162003040380380620030408339810160408190526200004091620000b2565b80806001600160a01b0381166200009d5760405162461bcd60e51b815260206004820152601560248201527f4d6f64756c65426173653a204572726f72203130300000000000000000000000604482015260640160405180910390fd5b6001600160a01b031660805250620000e49050565b600060208284031215620000c557600080fd5b81516001600160a01b0381168114620000dd57600080fd5b9392505050565b60805160a05160c051612ee762000159600039600081816101ab01526123f80152600081816102d601526104b001526000818160f0015281816103c9015281816108e101528181610aad015281816110840152818161111401528181611e2e01528181612145015261248b0152612ee76000f3fe6080604052600436106100d55760003560e01c8063b42132cd11610079578063cfccd4bc11610056578063cfccd4bc146102f8578063d24fdb7a14610318578063f25f4b5614610338578063fe442f5d1461035857005b8063b42132cd14610273578063b45edf47146102a0578063bc063e1a146102c457005b8063249d39e9116100b2578063249d39e914610199578063251f02b4146101db5780638730f3441461020b57806390d49b9d1461025357005b806301df538d146100de57806312d335e21461012f5780631ab971ab1461017957005b366100dc57005b005b3480156100ea57600080fd5b506101127f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013b57600080fd5b5061014f61014a3660046128a8565b610378565b6040805163ffffffff95861681529490931660208501529183015215156060820152608001610126565b34801561018557600080fd5b506100dc6101943660046128da565b6103c6565b3480156101a557600080fd5b506101cd7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610126565b3480156101e757600080fd5b506101fb6101f63660046128da565b61059b565b6040519015158152602001610126565b34801561021757600080fd5b5061023e6102263660046128a8565b60026020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610126565b34801561025f57600080fd5b506100dc61026e36600461290a565b610aaa565b34801561027f57600080fd5b5061029361028e3660046128a8565b610c5b565b60405161012691906129ea565b3480156102ac57600080fd5b5060005461023e90600160a01b900463ffffffff1681565b3480156102d057600080fd5b5061023e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561030457600080fd5b506101fb6103133660046128da565b610fb3565b34801561032457600080fd5b5061023e610333366004612b01565b61102d565b34801561034457600080fd5b50600054610112906001600160a01b031681565b34801561036457600080fd5b506100dc6103733660046128da565b611217565b6001818154811061038857600080fd5b600091825260209091206007909102016004810154600582015460069092015463ffffffff8083169450640100000000909204909116919060ff1684565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104499190612bde565b6001600160a01b0316816001600160a01b0316146104ae5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f72203232310000000060448201526064015b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff16111561052a5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f72203236340000000060448201526064016104a5565b60005463ffffffff838116600160a01b9092041614610597576000805463ffffffff60a01b1916600160a01b63ffffffff85811682810293909317808555604051939492900416917fdeab7ddf530f3309d7f88438b7fbb714e557a5a30d0c2d1cfc3c0da1dde409689190a35b5050565b600154600090829063ffffffff8216106105f75760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303700000000000060448201526064016104a5565b600060018463ffffffff168154811061061257610612612bfb565b9060005260206000209060070201604051806101000160405290816000820180548060200260200160405190810160405280929190818152602001828054801561068557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610667575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106e757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106c9575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156107815760008481526020908190208301805460408051828502810185019091528181529283018282801561076d57602002820191906000526020600020905b815481526020019060010190808311610759575b505050505081526020019060010190610715565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561081a5760008481526020908190208301805460408051828502810185019091528181529283018282801561080657602002820191906000526020600020905b8154815260200190600101908083116107f2575b5050505050815260200190600101906107ae565b50505090825250600482015463ffffffff80821660208401526401000000009091041660408201526005820154606082015260069091015460ff161515608090910152905061086884610fb3565b15610877576000925050610aa4565b602081015160005b8151811015610a9c576000836040015182815181106108a0576108a0612bfb565b6020026020010151905060005b8151811015610a89578181815181106108c8576108c8612bfb565b6020026020010151600014156108dd57610a79565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe4988760000151848151811061092457610924612bfb565b60200260200101516040518263ffffffff1660e01b815260040161095791906001600160a01b0391909116815260200190565b602060405180830381865afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109989190612bde565b6001600160a01b031663246cd574308b8888815181106109ba576109ba612bfb565b60200260200101516040518463ffffffff1660e01b8152600401610a04939291906001600160a01b03938416815263ffffffff929092166020830152909116604082015260600190565b602060405180830381865afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612c11565b9050828281518110610a5957610a59612bfb565b6020026020010151811015610a775760009750505050505050610aa4565b505b610a8281612c40565b90506108ad565b505080610a9590612c40565b905061087f565b506001935050505b50919050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d9190612bde565b6001600160a01b0316816001600160a01b031614610b8d5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f72203232310000000060448201526064016104a5565b6001600160a01b03821615801590610bae57506001600160a01b0382163014155b610bfa5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f72203130300000000060448201526064016104a5565b6000546001600160a01b0383811691161461059757600080546001600160a01b0319166001600160a01b0384169081178255604051909182917f9f4f5dce3c4d197b5d7496cb96e25f0a89809167195964b0daa3ef5fed63c00a9190a35050565b60408051610100810182526060808252602082018190529181018290528181019190915260006080820181905260a0820181905260c0820181905260e082015260008281526002602052604090205463ffffffff1680151580610ceb57508260018281548110610ccd57610ccd612bfb565b906000526020600020906007020160050154148015610ceb57508215155b610d375760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303600000000000060448201526064016104a5565b60008381526002602052604090205460018054909163ffffffff16908110610d6157610d61612bfb565b90600052602060002090600702016040518061010001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610dd457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610db6575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610e3657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e18575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610ed057600084815260209081902083018054604080518285028101850190915281815292830182828015610ebc57602002820191906000526020600020905b815481526020019060010190808311610ea8575b505050505081526020019060010190610e64565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610f6957600084815260209081902083018054604080518285028101850190915281815292830182828015610f5557602002820191906000526020600020905b815481526020019060010190808311610f41575b505050505081526020019060010190610efd565b50505090825250600482015463ffffffff80821660208401526401000000009091041660408201526005820154606082015260069091015460ff1615156080909101529392505050565b600060018263ffffffff1681548110610fce57610fce612bfb565b600091825260209091206006600790920201015460ff168061102757504263ffffffff1660018363ffffffff168154811061100b5761100b612bfb565b600091825260209091206004600790920201015463ffffffff16105b92915050565b6000805b8a8110156111825760008c8c8381811061104d5761104d612bfb565b9050602002016020810190611062919061290a565b60405163c221e44b60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063c221e44b90602401602060405180830381865afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f19190612c5b565b6111715760405163253feb5d60e21b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906394ffad7490602401600060405180830381600087803b15801561115857600080fd5b505af115801561116c573d6000803e3d6000fd5b505050505b5061117b81612c40565b9050611031565b506112088b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d9182918501908490808284376000920191909152506111f792508b91508c9050612ce8565b611201888a612ce8565b8787611824565b9b9a5050505050505050505050565b600154819063ffffffff8216106112705760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303700000000000060448201526064016104a5565b8160018163ffffffff168154811061128a5761128a612bfb565b600091825260209091206006600790920201015460ff16156112ee5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032363600000000000060448201526064016104a5565b600060018463ffffffff168154811061130957611309612bfb565b906000526020600020906007020190506113228461059b565b61136e5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032363500000000000060448201526064016104a5565b60006114c785836000018054806020026020016040519081016040528092919081815260200182805480156113cc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113ae575b50505050508460010180548060200260200160405190810160405280929190818152602001828054801561142957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161140b575b505050505085600201805480602002602001604051908101604052809291908181526020016000905b828210156114be576000848152602090819020830180546040805182850281018501909152818152928301828280156114aa57602002820191906000526020600020905b815481526020019060010190808311611496575b505050505081526020019060010190611452565b50505050611cc7565b6040805184546101206020820283018101909352610100820181815293945060009361170c93879284929184919084018282801561152e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611510575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561159057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611572575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561162a5760008481526020908190208301805460408051828502810185019091528181529283018282801561161657602002820191906000526020600020905b815481526020019060010190808311611602575b5050505050815260200190600101906115be565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156116c3576000848152602090819020830180546040805182850281018501909152818152928301828280156116af57602002820191906000526020600020905b81548152602001906001019080831161169b575b505050505081526020019060010190611657565b50505090825250600482015463ffffffff80821660208401526401000000009091041660408201526005820154606082015260069091015460ff16151560809091015287611fa7565b905060005b60018401548110156117ae5781818151811061172f5761172f612bfb565b602002602001015183828151811061174957611749612bfb565b60200260200101511461179e5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722031303300000000000060448201526064016104a5565b6117a781612c40565b9050611711565b5060068301805460ff1916600117905560048301805463ffffffff4281166401000000000267ffffffff0000000019909216919091179091556005840154604051909188169030907fec8c89d1275fdc3512da61ea020e4d570bb3bf0fba7163f506a1ef7b5e55179a90600090a4505050505050565b6000826118735760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722031303100000000000060448201526064016104a5565b600154158061188657506118868361235d565b6118d25760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303300000000000060448201526064016104a5565b6002875110156119245760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303400000000000060448201526064016104a5565b85516119725760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303500000000000060448201526064016104a5565b60008263ffffffff16116119c85760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722031303100000000000060448201526064016104a5565b84518651811480156119da5750845181145b611a265760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722031303200000000000060448201526064016104a5565b875160005b82811015611ad55781888281518110611a4657611a46612bfb565b602002602001015151148015611a795750600282901b878281518110611a6e57611a6e612bfb565b602002602001015151145b611ac55760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722031303200000000000060448201526064016104a5565b611ace81612c40565b9050611a2b565b5060006040518061010001604052808b81526020018a81526020018981526020018881526020018642611b089190612db3565b63ffffffff16815260006020808301829052604083018a90526060909201819052600180548082018255915282518051939450849360079092027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60192611b749284929091019061275c565b506020828101518051611b8d926001850192019061275c565b5060408201518051611ba99160028401916020909101906127c1565b5060608201518051611bc59160038401916020909101906127c1565b50608082015160048201805460a085015163ffffffff9081166401000000000267ffffffffffffffff1990921693169290921791909117905560c0820151600582015560e0909101516006909101805491151560ff1990921691909117905560018054600091611c3491612ddb565b9050806002600089815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550868163ffffffff16306001600160a01b03167f93ec9825c63237a731b7205f8e661ee12357e9993bda8c3d47fb709482e769a98e8e8e8e8d604051611cb1959493929190612df2565b60405180910390a49a9950505050505050505050565b6060825167ffffffffffffffff811115611ce357611ce3612c7d565b604051908082528060200260200182016040528015611d0c578160200160208202803683370190505b5090508251825114611d585760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b91018981960591b60448201526064016104a5565b60005b8351811015611f9e576000838281518110611d7857611d78612bfb565b602002602001015190508551815114611dcb5760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b91018981960591b60448201526064016104a5565b60005b8151811015611f8b576000828281518110611deb57611deb612bfb565b602002602001015190506000811115611f7a5780858581518110611e1157611e11612bfb565b60200260200101818151611e259190612e58565b915081815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe498898481518110611e6d57611e6d612bfb565b60200260200101516040518263ffffffff1660e01b8152600401611ea091906001600160a01b0391909116815260200190565b602060405180830381865afa158015611ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee19190612bde565b6001600160a01b0316632162a70c8a898781518110611f0257611f02612bfb565b60209081029190910101516040516001600160e01b031960e085901b16815263ffffffff9290921660048301526001600160a01b0316602482015260448101849052606401600060405180830381600087803b158015611f6157600080fd5b505af1158015611f75573d6000803e3d6000fd5b505050505b50611f8481612c40565b9050611dce565b505080611f9790612c40565b9050611d5b565b50949350505050565b606082602001515167ffffffffffffffff811115611fc757611fc7612c7d565b604051908082528060200260200182016040528015611ff0578160200160208202803683370190505b50905060005b8360200151518110156123565760008460600151828151811061201b5761201b612bfb565b6020026020010151905060008560200151838151811061203d5761203d612bfb565b6020026020010151905060005b825160021c81101561234257600083600283901b8151811061206e5761206e612bfb565b60200260200101519050600084600284901b600161208c9190612e58565b8151811061209c5761209c612bfb565b60200260200101519050600082111561210357818787815181106120c2576120c2612bfb565b602002602001018181516120d69190612e58565b90525088518051612101918691869081106120f3576120f3612bfb565b6020026020010151846123ab565b505b801561232f578087878151811061211c5761211c612bfb565b602002602001018181516121309190612e58565b905250600061213f85836123c4565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe4988c60000151878151811061218857612188612bfb565b60200260200101516040518263ffffffff1660e01b81526004016121bb91906001600160a01b0391909116815260200190565b602060405180830381865afa1580156121d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fc9190612bde565b90506001600160a01b0386161561223557612235868c60000151878151811061222757612227612bfb565b602002602001015184612466565b6001600160a01b038082169063d405929290881615612255576000612257565b835b8c89868c61226960028d811b90612e58565b8151811061227957612279612bfb565b60200260200101518d60028d901b60036122939190612e58565b815181106122a3576122a3612bfb565b60209081029190910101516040516001600160e01b031960e089901b16815263ffffffff95861660048201526001600160a01b03909416602485015260448401929092528316606483015291909116608482015260a4016000604051808303818588803b15801561231357600080fd5b505af1158015612327573d6000803e3d6000fd5b505050505050505b50508061233b90612c40565b905061204a565b5050508061234f90612c40565b9050611ff6565b5092915050565b60008181526002602052604081205463ffffffff16801580156123a45750826001828154811061238f5761238f612bfb565b90600052602060002090600702016005015414155b9392505050565b60006123b784836123c4565b90506123a4848483612501565b600080546001600160a01b0316158015906123ed5750600054600160a01b900463ffffffff1615155b15610aa457600080547f00000000000000000000000000000000000000000000000000000000000000009061242f90600160a01b900463ffffffff1685612e70565b6124399190612e8f565b6000549091506124549085906001600160a01b031683612501565b61245e8184612ddb565b915050611027565b604051630e39fc9360e31b81526001600160a01b0383811660048301526124fc9185917f000000000000000000000000000000000000000000000000000000000000000016906371cfe49890602401602060405180830381865afa1580156124d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f69190612bde565b836126a5565b505050565b6001600160a01b0383161561260a5760405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af192505050801561257b575060408051601f3d908101601f1916820190925261257891810190612c5b565b60015b6125bf5760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343160581b60448201526064016104a5565b806126045760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343160581b60448201526064016104a5565b50505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612657576040519150601f19603f3d011682016040523d82523d6000602084013e61265c565b606091505b50509050806126045760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b910191a1960591b60448201526064016104a5565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af11580156126f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127189190612c5b565b6124fc5760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343360581b60448201526064016104a5565b8280548282559060005260206000209081019282156127b1579160200282015b828111156127b157825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061277c565b506127bd92915061281a565b5090565b82805482825590600052602060002090810192821561280e579160200282015b8281111561280e57825180516127fe91849160209091019061282f565b50916020019190600101906127e1565b506127bd92915061286a565b5b808211156127bd576000815560010161281b565b8280548282559060005260206000209081019282156127b1579160200282015b828111156127b157825182559160200191906001019061284f565b808211156127bd57600061287e8282612887565b5060010161286a565b50805460008255906000526020600020908101906128a5919061281a565b50565b6000602082840312156128ba57600080fd5b5035919050565b803563ffffffff811681146128d557600080fd5b919050565b6000602082840312156128ec57600080fd5b6123a4826128c1565b6001600160a01b03811681146128a557600080fd5b60006020828403121561291c57600080fd5b81356123a4816128f5565b600081518084526020808501945080840160005b838110156129605781516001600160a01b03168752958201959082019060010161293b565b509495945050505050565b600082825180855260208086019550808260051b8401018186016000805b858110156129dc57868403601f19018a52825180518086529086019086860190845b818110156129c7578351835292880192918801916001016129ab565b50509a86019a94505091840191600101612989565b509198975050505050505050565b6020815260008251610100806020850152612a09610120850183612927565b91506020850151601f1980868503016040870152612a278483612927565b93506040870151915080868503016060870152612a44848361296b565b9350606087015191508086850301608087015250612a62838261296b565b9250506080850151612a7c60a086018263ffffffff169052565b5060a085015163ffffffff811660c08601525060c085015160e085015260e0850151612aab8286018215159052565b5090949350505050565b60008083601f840112612ac757600080fd5b50813567ffffffffffffffff811115612adf57600080fd5b6020830191508360208260051b8501011115612afa57600080fd5b9250929050565b60008060008060008060008060008060c08b8d031215612b2057600080fd5b8a3567ffffffffffffffff80821115612b3857600080fd5b612b448e838f01612ab5565b909c509a5060208d0135915080821115612b5d57600080fd5b612b698e838f01612ab5565b909a50985060408d0135915080821115612b8257600080fd5b612b8e8e838f01612ab5565b909850965060608d0135915080821115612ba757600080fd5b50612bb48d828e01612ab5565b90955093505060808b01359150612bcd60a08c016128c1565b90509295989b9194979a5092959850565b600060208284031215612bf057600080fd5b81516123a4816128f5565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612c2357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612c5457612c54612c2a565b5060010190565b600060208284031215612c6d57600080fd5b815180151581146123a457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612cbc57612cbc612c7d565b604052919050565b600067ffffffffffffffff821115612cde57612cde612c7d565b5060051b60200190565b6000612cfb612cf684612cc4565b612c93565b83815260208082019190600586811b860136811115612d1957600080fd5b865b81811015612da657803567ffffffffffffffff811115612d3b5760008081fd5b880136601f820112612d4d5760008081fd5b8035612d5b612cf682612cc4565b81815290851b82018601908681019036831115612d785760008081fd5b928701925b82841015612d9657833582529287019290870190612d7d565b8952505050948301948301612d1b565b5092979650505050505050565b600063ffffffff808316818516808303821115612dd257612dd2612c2a565b01949350505050565b600082821015612ded57612ded612c2a565b500390565b60a081526000612e0560a0830188612927565b8281036020840152612e178188612927565b90508281036040840152612e2b818761296b565b90508281036060840152612e3f818661296b565b91505063ffffffff831660808301529695505050505050565b60008219821115612e6b57612e6b612c2a565b500190565b6000816000190483118215151615612e8a57612e8a612c2a565b500290565b600082612eac57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ec9f73cb6b6bd239ffd2077573a00242f467289e5cff9440b8271a3d8c99f08464736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100d55760003560e01c8063b42132cd11610079578063cfccd4bc11610056578063cfccd4bc146102f8578063d24fdb7a14610318578063f25f4b5614610338578063fe442f5d1461035857005b8063b42132cd14610273578063b45edf47146102a0578063bc063e1a146102c457005b8063249d39e9116100b2578063249d39e914610199578063251f02b4146101db5780638730f3441461020b57806390d49b9d1461025357005b806301df538d146100de57806312d335e21461012f5780631ab971ab1461017957005b366100dc57005b005b3480156100ea57600080fd5b506101127f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013b57600080fd5b5061014f61014a3660046128a8565b610378565b6040805163ffffffff95861681529490931660208501529183015215156060820152608001610126565b34801561018557600080fd5b506100dc6101943660046128da565b6103c6565b3480156101a557600080fd5b506101cd7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610126565b3480156101e757600080fd5b506101fb6101f63660046128da565b61059b565b6040519015158152602001610126565b34801561021757600080fd5b5061023e6102263660046128a8565b60026020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610126565b34801561025f57600080fd5b506100dc61026e36600461290a565b610aaa565b34801561027f57600080fd5b5061029361028e3660046128a8565b610c5b565b60405161012691906129ea565b3480156102ac57600080fd5b5060005461023e90600160a01b900463ffffffff1681565b3480156102d057600080fd5b5061023e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561030457600080fd5b506101fb6103133660046128da565b610fb3565b34801561032457600080fd5b5061023e610333366004612b01565b61102d565b34801561034457600080fd5b50600054610112906001600160a01b031681565b34801561036457600080fd5b506100dc6103733660046128da565b611217565b6001818154811061038857600080fd5b600091825260209091206007909102016004810154600582015460069092015463ffffffff8083169450640100000000909204909116919060ff1684565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104499190612bde565b6001600160a01b0316816001600160a01b0316146104ae5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f72203232310000000060448201526064015b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff16111561052a5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f72203236340000000060448201526064016104a5565b60005463ffffffff838116600160a01b9092041614610597576000805463ffffffff60a01b1916600160a01b63ffffffff85811682810293909317808555604051939492900416917fdeab7ddf530f3309d7f88438b7fbb714e557a5a30d0c2d1cfc3c0da1dde409689190a35b5050565b600154600090829063ffffffff8216106105f75760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303700000000000060448201526064016104a5565b600060018463ffffffff168154811061061257610612612bfb565b9060005260206000209060070201604051806101000160405290816000820180548060200260200160405190810160405280929190818152602001828054801561068557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610667575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106e757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106c9575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156107815760008481526020908190208301805460408051828502810185019091528181529283018282801561076d57602002820191906000526020600020905b815481526020019060010190808311610759575b505050505081526020019060010190610715565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561081a5760008481526020908190208301805460408051828502810185019091528181529283018282801561080657602002820191906000526020600020905b8154815260200190600101908083116107f2575b5050505050815260200190600101906107ae565b50505090825250600482015463ffffffff80821660208401526401000000009091041660408201526005820154606082015260069091015460ff161515608090910152905061086884610fb3565b15610877576000925050610aa4565b602081015160005b8151811015610a9c576000836040015182815181106108a0576108a0612bfb565b6020026020010151905060005b8151811015610a89578181815181106108c8576108c8612bfb565b6020026020010151600014156108dd57610a79565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe4988760000151848151811061092457610924612bfb565b60200260200101516040518263ffffffff1660e01b815260040161095791906001600160a01b0391909116815260200190565b602060405180830381865afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109989190612bde565b6001600160a01b031663246cd574308b8888815181106109ba576109ba612bfb565b60200260200101516040518463ffffffff1660e01b8152600401610a04939291906001600160a01b03938416815263ffffffff929092166020830152909116604082015260600190565b602060405180830381865afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612c11565b9050828281518110610a5957610a59612bfb565b6020026020010151811015610a775760009750505050505050610aa4565b505b610a8281612c40565b90506108ad565b505080610a9590612c40565b905061087f565b506001935050505b50919050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d9190612bde565b6001600160a01b0316816001600160a01b031614610b8d5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f72203232310000000060448201526064016104a5565b6001600160a01b03821615801590610bae57506001600160a01b0382163014155b610bfa5760405162461bcd60e51b815260206004820152601c60248201527f4d6f64756c6542617365576974684665653a204572726f72203130300000000060448201526064016104a5565b6000546001600160a01b0383811691161461059757600080546001600160a01b0319166001600160a01b0384169081178255604051909182917f9f4f5dce3c4d197b5d7496cb96e25f0a89809167195964b0daa3ef5fed63c00a9190a35050565b60408051610100810182526060808252602082018190529181018290528181019190915260006080820181905260a0820181905260c0820181905260e082015260008281526002602052604090205463ffffffff1680151580610ceb57508260018281548110610ccd57610ccd612bfb565b906000526020600020906007020160050154148015610ceb57508215155b610d375760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303600000000000060448201526064016104a5565b60008381526002602052604090205460018054909163ffffffff16908110610d6157610d61612bfb565b90600052602060002090600702016040518061010001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610dd457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610db6575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610e3657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e18575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610ed057600084815260209081902083018054604080518285028101850190915281815292830182828015610ebc57602002820191906000526020600020905b815481526020019060010190808311610ea8575b505050505081526020019060010190610e64565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610f6957600084815260209081902083018054604080518285028101850190915281815292830182828015610f5557602002820191906000526020600020905b815481526020019060010190808311610f41575b505050505081526020019060010190610efd565b50505090825250600482015463ffffffff80821660208401526401000000009091041660408201526005820154606082015260069091015460ff1615156080909101529392505050565b600060018263ffffffff1681548110610fce57610fce612bfb565b600091825260209091206006600790920201015460ff168061102757504263ffffffff1660018363ffffffff168154811061100b5761100b612bfb565b600091825260209091206004600790920201015463ffffffff16105b92915050565b6000805b8a8110156111825760008c8c8381811061104d5761104d612bfb565b9050602002016020810190611062919061290a565b60405163c221e44b60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063c221e44b90602401602060405180830381865afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f19190612c5b565b6111715760405163253feb5d60e21b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906394ffad7490602401600060405180830381600087803b15801561115857600080fd5b505af115801561116c573d6000803e3d6000fd5b505050505b5061117b81612c40565b9050611031565b506112088b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d9182918501908490808284376000920191909152506111f792508b91508c9050612ce8565b611201888a612ce8565b8787611824565b9b9a5050505050505050505050565b600154819063ffffffff8216106112705760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303700000000000060448201526064016104a5565b8160018163ffffffff168154811061128a5761128a612bfb565b600091825260209091206006600790920201015460ff16156112ee5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032363600000000000060448201526064016104a5565b600060018463ffffffff168154811061130957611309612bfb565b906000526020600020906007020190506113228461059b565b61136e5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032363500000000000060448201526064016104a5565b60006114c785836000018054806020026020016040519081016040528092919081815260200182805480156113cc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113ae575b50505050508460010180548060200260200160405190810160405280929190818152602001828054801561142957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161140b575b505050505085600201805480602002602001604051908101604052809291908181526020016000905b828210156114be576000848152602090819020830180546040805182850281018501909152818152928301828280156114aa57602002820191906000526020600020905b815481526020019060010190808311611496575b505050505081526020019060010190611452565b50505050611cc7565b6040805184546101206020820283018101909352610100820181815293945060009361170c93879284929184919084018282801561152e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611510575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561159057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611572575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561162a5760008481526020908190208301805460408051828502810185019091528181529283018282801561161657602002820191906000526020600020905b815481526020019060010190808311611602575b5050505050815260200190600101906115be565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156116c3576000848152602090819020830180546040805182850281018501909152818152928301828280156116af57602002820191906000526020600020905b81548152602001906001019080831161169b575b505050505081526020019060010190611657565b50505090825250600482015463ffffffff80821660208401526401000000009091041660408201526005820154606082015260069091015460ff16151560809091015287611fa7565b905060005b60018401548110156117ae5781818151811061172f5761172f612bfb565b602002602001015183828151811061174957611749612bfb565b60200260200101511461179e5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722031303300000000000060448201526064016104a5565b6117a781612c40565b9050611711565b5060068301805460ff1916600117905560048301805463ffffffff4281166401000000000267ffffffff0000000019909216919091179091556005840154604051909188169030907fec8c89d1275fdc3512da61ea020e4d570bb3bf0fba7163f506a1ef7b5e55179a90600090a4505050505050565b6000826118735760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722031303100000000000060448201526064016104a5565b600154158061188657506118868361235d565b6118d25760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303300000000000060448201526064016104a5565b6002875110156119245760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303400000000000060448201526064016104a5565b85516119725760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722032303500000000000060448201526064016104a5565b60008263ffffffff16116119c85760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722031303100000000000060448201526064016104a5565b84518651811480156119da5750845181145b611a265760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722031303200000000000060448201526064016104a5565b875160005b82811015611ad55781888281518110611a4657611a46612bfb565b602002602001015151148015611a795750600282901b878281518110611a6e57611a6e612bfb565b602002602001015151145b611ac55760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e537761704d6f64756c653a204572726f722031303200000000000060448201526064016104a5565b611ace81612c40565b9050611a2b565b5060006040518061010001604052808b81526020018a81526020018981526020018881526020018642611b089190612db3565b63ffffffff16815260006020808301829052604083018a90526060909201819052600180548082018255915282518051939450849360079092027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60192611b749284929091019061275c565b506020828101518051611b8d926001850192019061275c565b5060408201518051611ba99160028401916020909101906127c1565b5060608201518051611bc59160038401916020909101906127c1565b50608082015160048201805460a085015163ffffffff9081166401000000000267ffffffffffffffff1990921693169290921791909117905560c0820151600582015560e0909101516006909101805491151560ff1990921691909117905560018054600091611c3491612ddb565b9050806002600089815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550868163ffffffff16306001600160a01b03167f93ec9825c63237a731b7205f8e661ee12357e9993bda8c3d47fb709482e769a98e8e8e8e8d604051611cb1959493929190612df2565b60405180910390a49a9950505050505050505050565b6060825167ffffffffffffffff811115611ce357611ce3612c7d565b604051908082528060200260200182016040528015611d0c578160200160208202803683370190505b5090508251825114611d585760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b91018981960591b60448201526064016104a5565b60005b8351811015611f9e576000838281518110611d7857611d78612bfb565b602002602001015190508551815114611dcb5760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b91018981960591b60448201526064016104a5565b60005b8151811015611f8b576000828281518110611deb57611deb612bfb565b602002602001015190506000811115611f7a5780858581518110611e1157611e11612bfb565b60200260200101818151611e259190612e58565b915081815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe498898481518110611e6d57611e6d612bfb565b60200260200101516040518263ffffffff1660e01b8152600401611ea091906001600160a01b0391909116815260200190565b602060405180830381865afa158015611ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee19190612bde565b6001600160a01b0316632162a70c8a898781518110611f0257611f02612bfb565b60209081029190910101516040516001600160e01b031960e085901b16815263ffffffff9290921660048301526001600160a01b0316602482015260448101849052606401600060405180830381600087803b158015611f6157600080fd5b505af1158015611f75573d6000803e3d6000fd5b505050505b50611f8481612c40565b9050611dce565b505080611f9790612c40565b9050611d5b565b50949350505050565b606082602001515167ffffffffffffffff811115611fc757611fc7612c7d565b604051908082528060200260200182016040528015611ff0578160200160208202803683370190505b50905060005b8360200151518110156123565760008460600151828151811061201b5761201b612bfb565b6020026020010151905060008560200151838151811061203d5761203d612bfb565b6020026020010151905060005b825160021c81101561234257600083600283901b8151811061206e5761206e612bfb565b60200260200101519050600084600284901b600161208c9190612e58565b8151811061209c5761209c612bfb565b60200260200101519050600082111561210357818787815181106120c2576120c2612bfb565b602002602001018181516120d69190612e58565b90525088518051612101918691869081106120f3576120f3612bfb565b6020026020010151846123ab565b505b801561232f578087878151811061211c5761211c612bfb565b602002602001018181516121309190612e58565b905250600061213f85836123c4565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371cfe4988c60000151878151811061218857612188612bfb565b60200260200101516040518263ffffffff1660e01b81526004016121bb91906001600160a01b0391909116815260200190565b602060405180830381865afa1580156121d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fc9190612bde565b90506001600160a01b0386161561223557612235868c60000151878151811061222757612227612bfb565b602002602001015184612466565b6001600160a01b038082169063d405929290881615612255576000612257565b835b8c89868c61226960028d811b90612e58565b8151811061227957612279612bfb565b60200260200101518d60028d901b60036122939190612e58565b815181106122a3576122a3612bfb565b60209081029190910101516040516001600160e01b031960e089901b16815263ffffffff95861660048201526001600160a01b03909416602485015260448401929092528316606483015291909116608482015260a4016000604051808303818588803b15801561231357600080fd5b505af1158015612327573d6000803e3d6000fd5b505050505050505b50508061233b90612c40565b905061204a565b5050508061234f90612c40565b9050611ff6565b5092915050565b60008181526002602052604081205463ffffffff16801580156123a45750826001828154811061238f5761238f612bfb565b90600052602060002090600702016005015414155b9392505050565b60006123b784836123c4565b90506123a4848483612501565b600080546001600160a01b0316158015906123ed5750600054600160a01b900463ffffffff1615155b15610aa457600080547f00000000000000000000000000000000000000000000000000000000000000009061242f90600160a01b900463ffffffff1685612e70565b6124399190612e8f565b6000549091506124549085906001600160a01b031683612501565b61245e8184612ddb565b915050611027565b604051630e39fc9360e31b81526001600160a01b0383811660048301526124fc9185917f000000000000000000000000000000000000000000000000000000000000000016906371cfe49890602401602060405180830381865afa1580156124d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f69190612bde565b836126a5565b505050565b6001600160a01b0383161561260a5760405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af192505050801561257b575060408051601f3d908101601f1916820190925261257891810190612c5b565b60015b6125bf5760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343160581b60448201526064016104a5565b806126045760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343160581b60448201526064016104a5565b50505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612657576040519150601f19603f3d011682016040523d82523d6000602084013e61265c565b606091505b50509050806126045760405162461bcd60e51b815260206004820152601560248201527426b7b23ab632a130b9b29d1022b93937b910191a1960591b60448201526064016104a5565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af11580156126f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127189190612c5b565b6124fc5760405162461bcd60e51b81526020600482015260156024820152744d6f64756c65426173653a204572726f722032343360581b60448201526064016104a5565b8280548282559060005260206000209081019282156127b1579160200282015b828111156127b157825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061277c565b506127bd92915061281a565b5090565b82805482825590600052602060002090810192821561280e579160200282015b8281111561280e57825180516127fe91849160209091019061282f565b50916020019190600101906127e1565b506127bd92915061286a565b5b808211156127bd576000815560010161281b565b8280548282559060005260206000209081019282156127b1579160200282015b828111156127b157825182559160200191906001019061284f565b808211156127bd57600061287e8282612887565b5060010161286a565b50805460008255906000526020600020908101906128a5919061281a565b50565b6000602082840312156128ba57600080fd5b5035919050565b803563ffffffff811681146128d557600080fd5b919050565b6000602082840312156128ec57600080fd5b6123a4826128c1565b6001600160a01b03811681146128a557600080fd5b60006020828403121561291c57600080fd5b81356123a4816128f5565b600081518084526020808501945080840160005b838110156129605781516001600160a01b03168752958201959082019060010161293b565b509495945050505050565b600082825180855260208086019550808260051b8401018186016000805b858110156129dc57868403601f19018a52825180518086529086019086860190845b818110156129c7578351835292880192918801916001016129ab565b50509a86019a94505091840191600101612989565b509198975050505050505050565b6020815260008251610100806020850152612a09610120850183612927565b91506020850151601f1980868503016040870152612a278483612927565b93506040870151915080868503016060870152612a44848361296b565b9350606087015191508086850301608087015250612a62838261296b565b9250506080850151612a7c60a086018263ffffffff169052565b5060a085015163ffffffff811660c08601525060c085015160e085015260e0850151612aab8286018215159052565b5090949350505050565b60008083601f840112612ac757600080fd5b50813567ffffffffffffffff811115612adf57600080fd5b6020830191508360208260051b8501011115612afa57600080fd5b9250929050565b60008060008060008060008060008060c08b8d031215612b2057600080fd5b8a3567ffffffffffffffff80821115612b3857600080fd5b612b448e838f01612ab5565b909c509a5060208d0135915080821115612b5d57600080fd5b612b698e838f01612ab5565b909a50985060408d0135915080821115612b8257600080fd5b612b8e8e838f01612ab5565b909850965060608d0135915080821115612ba757600080fd5b50612bb48d828e01612ab5565b90955093505060808b01359150612bcd60a08c016128c1565b90509295989b9194979a5092959850565b600060208284031215612bf057600080fd5b81516123a4816128f5565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612c2357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612c5457612c54612c2a565b5060010190565b600060208284031215612c6d57600080fd5b815180151581146123a457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612cbc57612cbc612c7d565b604052919050565b600067ffffffffffffffff821115612cde57612cde612c7d565b5060051b60200190565b6000612cfb612cf684612cc4565b612c93565b83815260208082019190600586811b860136811115612d1957600080fd5b865b81811015612da657803567ffffffffffffffff811115612d3b5760008081fd5b880136601f820112612d4d5760008081fd5b8035612d5b612cf682612cc4565b81815290851b82018601908681019036831115612d785760008081fd5b928701925b82841015612d9657833582529287019290870190612d7d565b8952505050948301948301612d1b565b5092979650505050505050565b600063ffffffff808316818516808303821115612dd257612dd2612c2a565b01949350505050565b600082821015612ded57612ded612c2a565b500390565b60a081526000612e0560a0830188612927565b8281036020840152612e178188612927565b90508281036040840152612e2b818761296b565b90508281036060840152612e3f818661296b565b91505063ffffffff831660808301529695505050505050565b60008219821115612e6b57612e6b612c2a565b500190565b6000816000190483118215151615612e8a57612e8a612c2a565b500290565b600082612eac57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ec9f73cb6b6bd239ffd2077573a00242f467289e5cff9440b8271a3d8c99f08464736f6c634300080a0033",
  "devdoc": {
    "events": {
      "TokenSwapCreated(address,uint32,bytes32,address[],address[],uint256[][],uint256[][],uint32)": {
        "params": {
          "daos": "Array containing the DAOs that are involed in creating the token swap",
          "deadline": "The amount of time between the creation of the swap and the time when it can no longer be executed, in seconds",
          "dealId": "Deal id for the created token swap",
          "metadata": "Unique ID that is generated throught the Prime Deals frontend",
          "module": "Address of this module",
          "pathFrom": "Two-dimensional array containing the tokens flowing from the DAOs into the module",
          "pathTo": "Two-dimensional array containing the tokens flowing from the module to the DAOs",
          "tokens": "Array containing the tokens that are involed in creating the token swap"
        }
      },
      "TokenSwapExecuted(address,uint32,bytes32)": {
        "params": {
          "dealId": "Deal id for the executed token swap",
          "metadata": "Unique ID that is generated throught the Prime Deals frontend",
          "module": "Address of this module"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "checkExecutability(uint32)": {
        "params": {
          "_dealId": "The dealId of the action (position in the array)"
        },
        "returns": {
          "_0": "bool        A bool flag indiciating whether the action can be executed"
        }
      },
      "createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)": {
        "params": {
          "_daos": "Array containing the DAOs that are involed in this action",
          "_deadline": "The amount of time between the creation of the swap and the time when it can no longer be executed, in seconds",
          "_metadata": "Unique ID that is generated throught the Prime Deals frontend",
          "_pathFrom": "Two-dimensional array containing the tokens flowing from the DAOs into the module: - First array level is for each token - Second array level is for each dao - Detailed overview on how to configure the array can be found at the TokenSwap struct description",
          "_pathTo": "Two-dimensional array containing the tokens flowing from the module to the DAOs: - First array level is for each token - Second array level is for each dao - Detailed overview on how to configure the array can be found at the TokenSwap struct description",
          "_tokens": "Array containing the tokens that are involed in this action"
        },
        "returns": {
          "_0": "uin32       The dealId of the new token swap"
        }
      },
      "executeSwap(uint32)": {
        "params": {
          "_dealId": "The dealId of the action (position in the array)"
        }
      },
      "getTokenswapFromMetadata(bytes32)": {
        "params": {
          "_metadata": "Unique ID that is generated throught the Prime Deals frontend"
        },
        "returns": {
          "swap": "        Token swap struct associated with the metadata"
        }
      },
      "hasDealExpired(uint32)": {
        "params": {
          "_dealId": "The dealId of the action (position in the array)"
        },
        "returns": {
          "_0": "bool         A bool flag indiciating whether token swap has expired"
        }
      },
      "setFee(uint32)": {
        "params": {
          "_feeInBasisPoints": "Fee amount in basis points (1% = 100)"
        }
      },
      "setFeeWallet(address)": {
        "details": "The fee system will be inactive if the feeWallet is set to a zero-address",
        "params": {
          "_feeWallet": "Address of the new fee wallet"
        }
      }
    },
    "title": "PrimeDeals Token Swap Module",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeeChanged(uint32,uint32)": {
        "notice": "This event is emitted when the fee is updated"
      },
      "FeeWalletChanged(address,address)": {
        "notice": "This event is emitted when the fee wallet address is updated"
      },
      "TokenSwapCreated(address,uint32,bytes32,address[],address[],uint256[][],uint256[][],uint32)": {
        "notice": "This event is emitted when a token swap is created"
      },
      "TokenSwapExecuted(address,uint32,bytes32)": {
        "notice": "This event is emitted when a token swap is executed"
      }
    },
    "kind": "user",
    "methods": {
      "checkExecutability(uint32)": {
        "notice": "Checks whether a token swap action can be executed, which is the case if all DAOs have deposited"
      },
      "createSwap(address[],address[],uint256[][],uint256[][],bytes32,uint32)": {
        "notice": "Create a new token swap action and automatically creates Dao Deposit Manager for each DAO that does not have one"
      },
      "dealManager()": {
        "notice": "Address of the DealManager implementation"
      },
      "executeSwap(uint32)": {
        "notice": "Executes a token swap action"
      },
      "feeInBasisPoints()": {
        "notice": "Fee in basis points (100% = 10000)"
      },
      "feeWallet()": {
        "notice": "Wallet that is receiving the fees"
      },
      "getTokenswapFromMetadata(bytes32)": {
        "notice": "Returns the TokenSwap struct associated with the metadata"
      },
      "hasDealExpired(uint32)": {
        "notice": "Checks if the deal has been expired"
      },
      "metadataToDealId(bytes32)": {
        "notice": "Metadata => deal ID"
      },
      "setFee(uint32)": {
        "notice": "Sets a new fee"
      },
      "setFeeWallet(address)": {
        "notice": "Sets a new fee wallet"
      },
      "tokenSwaps(uint256)": {
        "notice": "Array of token swaps where the index == dealId"
      }
    },
    "notice": "Smart contract to handle token swap interactions for PrimeDeals",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4403,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeWallet",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4406,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "feeInBasisPoints",
        "offset": 20,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 7407,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "tokenSwaps",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(TokenSwap)7442_storage)dyn_storage"
      },
      {
        "astId": 7412,
        "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
        "label": "metadataToDealId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenSwap)7442_storage)dyn_storage": {
        "base": "t_struct(TokenSwap)7442_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenSwapModule.TokenSwap[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(TokenSwap)7442_storage": {
        "encoding": "inplace",
        "label": "struct TokenSwapModule.TokenSwap",
        "members": [
          {
            "astId": 7416,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "daos",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7420,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7425,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathFrom",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7430,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "pathTo",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 7433,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 7436,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "executionDate",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 7439,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "metadata",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 7441,
            "contract": "contracts/modules/tokenswap/TokenSwapModule.sol:TokenSwapModule",
            "label": "isExecuted",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}