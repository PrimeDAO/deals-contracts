{
  "address": "0xc6FE3C0a832DC3e32e2970DeC953304DEB18908e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dealModule",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "depositId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dealModule",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        }
      ],
      "name": "VestingClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dealModule",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vestingStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "vestingCliff",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "vestingDuration",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VestingStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dealModule",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "depositId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "availableDealBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "claimDealVestings",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimVestings",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dealManager",
      "outputs": [
        {
          "internalType": "contract IDealManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "used",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "depositedAt",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getAvailableDealBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_depositId",
          "type": "uint32"
        }
      ],
      "name": "getDeposit",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_fromDepositId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_toDepositId",
          "type": "uint32"
        }
      ],
      "name": "getDepositRange",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "depositors",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "usedAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "times",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "getTotalDepositCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getWithdrawableAmountOfDepositor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "multipleDeposits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendToModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDealManager",
          "type": "address"
        }
      ],
      "name": "setDealManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_vestingCliff",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_vestingDuration",
          "type": "uint32"
        }
      ],
      "name": "startVesting",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensPerDeal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "verifyBalance",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestedTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestedTokenAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestings",
      "outputs": [
        {
          "internalType": "address",
          "name": "dealModule",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalVested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "cliff",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_depositId",
          "type": "uint32"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x51ab6b32140693eab781c55aa5df65bf2dc210d51e188968c28ec442806bfe74",
  "receipt": {
    "to": null,
    "from": "0xc039897eE5A0d14A3d1F212922FaF7e159Ab619F",
    "contractAddress": "0xc6FE3C0a832DC3e32e2970DeC953304DEB18908e",
    "transactionIndex": 1,
    "gasUsed": "2597546",
    "logsBloom": "0x
    "blockHash": "0x7a385c80417affda9d7ea6c7a08bb1069f6e4bd9324966dd4987b923c2781328",
    "transactionHash": "0x51ab6b32140693eab781c55aa5df65bf2dc210d51e188968c28ec442806bfe74",
    "logs": [],
    "blockNumber": 11047237,
    "cumulativeGasUsed": "2629370",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8fe0907e1ae3f261620ff1e7a2577cca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"name\":\"VestingClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"vestingCliff\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"vestingDuration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"availableDealBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"claimDealVestings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVestings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealManager\",\"outputs\":[{\"internalType\":\"contract IDealManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"depositedAt\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAvailableDealBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_depositId\",\"type\":\"uint32\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_fromDepositId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_toDepositId\",\"type\":\"uint32\"}],\"name\":\"getDepositRange\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"depositors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"usedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"times\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"getTotalDepositCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getWithdrawableAmountOfDepositor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multipleDeposits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDealManager\",\"type\":\"address\"}],\"name\":\"setDealManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_vestingCliff\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_vestingDuration\",\"type\":\"uint32\"}],\"name\":\"startVesting\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensPerDeal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"verifyBalance\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestedTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedTokenAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dealModule\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliff\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_depositId\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Deposited(address,uint32,address,uint32,address,uint256)\":{\"params\":{\"amount\":\"The amount that is deposited\",\"dealId\":\"A specific deal, that is part of the dealModule, for which a deposit is made\",\"dealModule\":\"The module address of which the dealId is part off\",\"depositId\":\"The ID of the deposit action (position in array)\",\"depositor\":\"The address of the depositor\",\"token\":\"The address of the ERC20 token or ETH (ZERO address)deposited\"}},\"VestingClaimed(address,uint32,address,address,uint256)\":{\"params\":{\"claimed\":\"The amount that is being claimed\",\"dao\":\"The address of the DAO, to which the claimed vesting is sent\",\"dealId\":\"A specific deal, that is part of the dealModule, for which a vesting is claimed\",\"dealModule\":\"The module address of which the dealId is part off\",\"token\":\"The address of the ERC20 token or ETH (ZERO address)\"}},\"VestingStarted(address,uint32,uint256,uint32,uint32,address,uint256)\":{\"params\":{\"amount\":\"The amount that is being vested\",\"dealId\":\"A specific deal, that is part of the dealModule, for which a vesting is started\",\"dealModule\":\"The module address of which the dealId is part off\",\"token\":\"The address of the ERC20 token or ETH (ZERO address)\",\"vestingCliff\":\"The vesting cliff, after which tokens can be claimed\",\"vestingDuration\":\"The duration the tokens are vested, in seconds\",\"vestingStart\":\"The Unix timestamp of when the vesting has been initiated\"}},\"Withdrawn(address,uint32,address,uint32,address,uint256)\":{\"params\":{\"amount\":\"The amount that is withdrawn\",\"dealId\":\"A specific deal, that is part of the dealModule, for which a withdraw is made\",\"dealModule\":\"The module address of which the dealId is part off\",\"depositId\":\"The ID of the deposit action (position in array)\",\"depositor\":\"The address of the depositor of the funds that are withdrawn\",\"token\":\"The address of the ERC20 token or ETH (ZERO address) withdrawn\"}}},\"kind\":\"dev\",\"methods\":{\"claimDealVestings(address,uint32)\":{\"details\":\"This function can be called to retrieve the claimable amount, to show in the frontend for example\",\"params\":{\"_dealId\":\"A specific deal, that is part of the dealModule\",\"_module\":\"The module address of which the dealId is part off\"},\"returns\":{\"amounts\":\"     Array of amounts claimed, in the same order as the tokens array\",\"tokens\":\"      Array of addresses of the claimed tokens, in the same order as the amounts array\"}},\"claimVestings()\":{\"details\":\"This function can be called to retrieve the claimable amounts, to show in the frontend for example\",\"returns\":{\"amounts\":\"     Array of amounts claimed, in the same order as the tokens array\",\"tokens\":\"      Array of addresses of the claimed tokens\"}},\"deposit(address,uint32,address,uint256)\":{\"details\":\"Note: if ETH is deposited, the token address should be ZERO (0)\",\"params\":{\"_amount\":\"The amount that is deposited\",\"_dealId\":\"The dealId to which this deposit is part of\",\"_module\":\"The address of the module for which is being deposited\",\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"}},\"getAvailableDealBalance(address,uint32,address)\":{\"params\":{\"_dealId\":\"The dealId that relates to the ERC20 token or ETH balance\",\"_module\":\"The address of the module to which the dealId is part of\",\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"},\"returns\":{\"_0\":\"uint256      The balance amount of the ERC20 token or ETH, specific to the dealId\"}},\"getBalance(address)\":{\"params\":{\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"},\"returns\":{\"_0\":\"uint256      The balance the contracts holds for the _token parameter\"}},\"getDeposit(address,uint32,uint32)\":{\"details\":\"If ETH has been deposited, the token address returned will show ZERO (0)\",\"params\":{\"_dealId\":\"The dealId to for which the deposit has been made\",\"_depositId\":\"The ID of the deposit action (position in array)\",\"_module\":\"The address of the module of which the dealId is part of\"},\"returns\":{\"_0\":\"address      The depositor address\",\"_1\":\"address      The address of the ERC20 token or ETH (ZERO address)\",\"_2\":\"uint256      The amount that has been deposited\",\"_3\":\"uint256      The amount already used in a deal\",\"_4\":\"uint32       The Unix timestamp of the deposit\"}},\"getDepositRange(address,uint32,uint32,uint32)\":{\"details\":\"If ETH has been deposited, the token address returned will show ZERO (0)\",\"params\":{\"_dealId\":\"The dealId to for which the deposits have been made\",\"_fromDepositId\":\"First depositId (element in array) of the range IDs\",\"_module\":\"The address of the module of which the dealId is part of\",\"_toDepositId\":\"Last depositId (element in array) of the range of IDs\"},\"returns\":{\"amounts\":\"         Array of amounts, sorted similar as tokens array, for the given deposit range\",\"depositors\":\"      Array of addresses of the depositors in the deposit range\",\"times\":\"           Array of Unix timestamps of the deposits, for the given deposit range\",\"tokens\":\"          Array of token addresses or ETH (ZERO address) in the deposit range\",\"usedAmounts\":\"     Array of amounts already used in a deal, for the given deposit range\"}},\"getTotalDepositCount(address,uint32)\":{\"params\":{\"_dealId\":\"The dealId for which deposits have been made\",\"_module\":\"The address of the module to which the dealId is part of\"},\"returns\":{\"_0\":\"uint32       The total amount of deposits made, for a given dealId\"}},\"getWithdrawableAmountOfDepositor(address,uint32,address,address)\":{\"details\":\"If ETH has been deposited, the token address used should be ZERO (0)\",\"params\":{\"_dealId\":\"The dealId for which a deposit has been made, to check for withdrawable amounts\",\"_depositor\":\"The address of the depositor that is able to withdraw, deposited amounts\",\"_module\":\"The address of the module of which the dealId is part of\",\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"},\"returns\":{\"_0\":\"uint256      The available amount that can be withdrawn by the depositor\"}},\"initialize(address)\":{\"params\":{\"_dao\":\"The DAO address to which this contract belongs\"}},\"multipleDeposits(address,uint32,address[],uint256[])\":{\"details\":\"Note: if ETH is deposited, the token address should be ZERO (0) Note: when calling this function, it is only possible to have 1 ETH deposit, meaning only 1  of the token addresses can be a ZERO address     \",\"params\":{\"_amounts\":\"Array of amounts that are deposited\",\"_dealId\":\"The dealId to which the deposits are part of\",\"_module\":\"The address of the module for which is being deposited\",\"_tokens\":\"Array of addresses of the ERC20 tokens or ETH (ZERO address)\"}},\"sendToModule(uint32,address,uint256)\":{\"params\":{\"_amount\":\"The amount that is sent to the module\",\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"}},\"setDealManager(address)\":{\"params\":{\"_newDealManager\":\"The address of the new DealManager\"}},\"startVesting(uint32,address,uint256,uint32,uint32)\":{\"params\":{\"_amount\":\"The total amount being vested\",\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\",\"_vestingCliff\":\"The duration after which tokens can be claimed starting from the vesting start, in seconds\",\"_vestingDuration\":\"The duration the tokens are vested, in seconds\"}},\"verifyBalance(address)\":{\"params\":{\"_token\":\"Address of the ERC20 token or ETH (ZERO address)\"}},\"withdraw(address,uint32,uint32)\":{\"params\":{\"_dealId\":\"The dealId to for which the deposit has been made, that is being withdrawn\",\"_depositId\":\"The ID of the deposit action (position in array)\",\"_module\":\"The address of the module to which the dealId is part of\"},\"returns\":{\"_0\":\"address      The address of the depositor\",\"_1\":\"address      The address of the ERC20 token or ETH (ZERO address)\",\"_2\":\"uint256      The available amount that is withdrawn\"}}},\"title\":\"PrimeDeals Dao Deposit Manager\",\"version\":1},\"userdoc\":{\"events\":{\"Deposited(address,uint32,address,uint32,address,uint256)\":{\"notice\":\"This event is emitted when a deposit is made\"},\"VestingClaimed(address,uint32,address,address,uint256)\":{\"notice\":\"This event is emitted when a vesting is claimed\"},\"VestingStarted(address,uint32,uint256,uint32,uint32,address,uint256)\":{\"notice\":\"This event is emitted when a vesting is started\"},\"Withdrawn(address,uint32,address,uint32,address,uint256)\":{\"notice\":\"This event is emitted when a withdraw is made\"}},\"kind\":\"user\",\"methods\":{\"availableDealBalances(address,address,uint32)\":{\"notice\":\"token address => deal module address => deal module id => balance\"},\"claimDealVestings(address,uint32)\":{\"notice\":\"Claims all the possible ERC20 tokens and ETH, associated with a single dealId\"},\"claimVestings()\":{\"notice\":\"Claims all the possible ERC20 tokens and ETH, across all deals that are part of this DaoDepositManager\"},\"dao()\":{\"notice\":\"DAO address to which this DaoDepositContract is linked\"},\"dealManager()\":{\"notice\":\"Address of the DealManager\"},\"deposit(address,uint32,address,uint256)\":{\"notice\":\"Transfers the token amount to the DaoDepositManager and stores the parameters in a Deposit structure.\"},\"deposits(address,uint256,uint256)\":{\"notice\":\"deal module address => deal id => deposits array\"},\"getAvailableDealBalance(address,uint32,address)\":{\"notice\":\"Returns the stored amount of an ERC20 token or ETH, for a given deal\"},\"getBalance(address)\":{\"notice\":\"Returns the balance the DaoDepositContract holds, for a given ERC20 token or ETH (ZERO address)\"},\"getDeposit(address,uint32,uint32)\":{\"notice\":\"Returns all the members in the Deposit struct for a given depositId\"},\"getDepositRange(address,uint32,uint32,uint32)\":{\"notice\":\"Returns all the members from all the Deposits within a given range of depositIds\"},\"getTotalDepositCount(address,uint32)\":{\"notice\":\"Returns the total number of deposits made, for a given dealId\"},\"getWithdrawableAmountOfDepositor(address,uint32,address,address)\":{\"notice\":\"Returns the withdrawable amount of a specifc token and dealId, for a given address\"},\"initialize(address)\":{\"notice\":\"Initialize the DaoDepositManager\"},\"multipleDeposits(address,uint32,address[],uint256[])\":{\"notice\":\"Transfers multiple tokens and amounts to the DaoDepositManager and stores the parameters for each deposit in a Deposit structure.\"},\"sendToModule(uint32,address,uint256)\":{\"notice\":\"Sends the token and amount associated with the dealId into the Deal module\"},\"setDealManager(address)\":{\"notice\":\"Sets a new address for the DealManager\"},\"startVesting(uint32,address,uint256,uint32,uint32)\":{\"notice\":\"Starts the vesting periode for a given token plus amount, associated to a dealId\"},\"tokenBalances(address)\":{\"notice\":\"token address => balance\"},\"tokensPerDeal(address,uint256)\":{\"notice\":\"deal module address => deal id => token counter\"},\"verifyBalance(address)\":{\"notice\":\"Verifies if the DaoDepositContract holds the balance as expected\"},\"vestedBalances(address)\":{\"notice\":\"token address => balance\"},\"vestedTokenAddresses(uint256)\":{\"notice\":\"Array of all the token addresses that are vested\"},\"vestedTokenAmounts(address)\":{\"notice\":\"token address => amount\"},\"vestings(uint256)\":{\"notice\":\"Array of vestings where the index is the vesting ID\"},\"withdraw(address,uint32,uint32)\":{\"notice\":\"Sends the token and amount, stored in the Deposit associated with the depositId to the depositor\"}},\"notice\":\"Smart contract to manage the deposits, withdraws and vestings of a DAO\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/DaoDepositManager.sol\":\"DaoDepositManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/core/DaoDepositManager.sol\":{\"content\":\"/*\\n\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u255a\\u2550\\u255d\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\n\\n*/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/interfaces/IDealManager.sol\\\";\\nimport \\\"../utils/interfaces/IModuleBase.sol\\\";\\n\\n/**\\n * @title                   PrimeDeals Dao Deposit Manager\\n * @notice                  Smart contract to manage the\\n                            deposits, withdraws and vestings of a DAO\\n */\\ncontract DaoDepositManager {\\n    /// DAO address to which this DaoDepositContract is linked\\n    address public dao;\\n    /// Address of the DealManager\\n    IDealManager public dealManager;\\n    /// token address => balance\\n    mapping(address => uint256) public tokenBalances;\\n    /// token address => deal module address => deal module id => balance\\n    mapping(address => mapping(address => mapping(uint32 => uint256)))\\n        public availableDealBalances;\\n    /// token address => balance\\n    mapping(address => uint256) public vestedBalances;\\n    /// deal module address => deal id => deposits array\\n    mapping(address => mapping(uint256 => Deposit[])) public deposits;\\n    /// Array of vestings where the index is the vesting ID\\n    Vesting[] public vestings;\\n    /// Array of all the token addresses that are vested\\n    address[] public vestedTokenAddresses;\\n    /// token address => amount\\n    mapping(address => uint256) public vestedTokenAmounts;\\n    /// deal module address => deal id => token counter\\n    mapping(address => mapping(uint256 => uint256)) public tokensPerDeal;\\n\\n    struct Deposit {\\n        /// The depositor of the tokens\\n        address depositor;\\n        /// The address of the ERC20 token or ETH (ZERO address), that is deposited\\n        address token;\\n        /// Amount of the token being deposited\\n        uint256 amount;\\n        /// The amount already used for a Deal\\n        uint256 used;\\n        /// Unix timestamp of the deposit\\n        uint32 depositedAt;\\n    }\\n\\n    struct Vesting {\\n        /// The address of the module to which this vesting is linked\\n        address dealModule;\\n        /// The ID for a specific deal, that is stored in the module\\n        uint32 dealId;\\n        /// The address of the ERC20 token or ETH (ZERO address)\\n        address token;\\n        /// The total amount being vested\\n        uint256 totalVested;\\n        /// The total amount of claimed vesting\\n        uint256 totalClaimed;\\n        /// The Unix timestamp when the vesting has been initiated\\n        uint32 startTime;\\n        /// The duration after which tokens can be claimed starting from the vesting start,\\n        /// in seconds\\n        uint32 cliff;\\n        /// The duration the tokens are vested, in seconds\\n        uint32 duration;\\n    }\\n\\n    /**\\n     * @notice                  This event is emitted when a deposit is made\\n     * @param dealModule        The module address of which the dealId is part off\\n     * @param dealId            A specific deal, that is part of the dealModule, for which a\\n                                deposit is made\\n     * @param depositor         The address of the depositor\\n     * @param depositId         The ID of the deposit action (position in array)\\n     * @param token             The address of the ERC20 token or ETH (ZERO address)deposited\\n     * @param amount            The amount that is deposited\\n     */\\n    event Deposited(\\n        address indexed dealModule,\\n        uint32 indexed dealId,\\n        address indexed depositor,\\n        uint32 depositId,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice                  This event is emitted when a withdraw is made\\n     * @param dealModule        The module address of which the dealId is part off\\n     * @param dealId            A specific deal, that is part of the dealModule, for which a\\n                                withdraw is made\\n     * @param depositor         The address of the depositor of the funds that are withdrawn\\n     * @param depositId         The ID of the deposit action (position in array)\\n     * @param token             The address of the ERC20 token or ETH (ZERO address) withdrawn\\n     * @param amount            The amount that is withdrawn\\n     */\\n    event Withdrawn(\\n        address indexed dealModule,\\n        uint32 indexed dealId,\\n        address indexed depositor,\\n        uint32 depositId,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice                  This event is emitted when a vesting is started\\n     * @param dealModule        The module address of which the dealId is part off\\n     * @param dealId            A specific deal, that is part of the dealModule, for which a\\n                                vesting is started\\n     * @param vestingStart      The Unix timestamp of when the vesting has been initiated\\n     * @param vestingCliff      The vesting cliff, after which tokens can be claimed\\n     * @param vestingDuration   The duration the tokens are vested, in seconds\\n     * @param token             The address of the ERC20 token or ETH (ZERO address)\\n     * @param amount            The amount that is being vested\\n     */\\n    event VestingStarted(\\n        address indexed dealModule,\\n        uint32 indexed dealId,\\n        uint256 indexed vestingStart,\\n        uint32 vestingCliff,\\n        uint32 vestingDuration,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice              This event is emitted when a vesting is claimed\\n     * @param dealModule    The module address of which the dealId is part off\\n     * @param dealId        A specific deal, that is part of the dealModule, for which a\\n                            vesting is claimed\\n     * @param dao           The address of the DAO, to which the claimed vesting is sent\\n     * @param token         The address of the ERC20 token or ETH (ZERO address)\\n     * @param claimed       The amount that is being claimed\\n     */\\n    event VestingClaimed(\\n        address indexed dealModule,\\n        uint32 indexed dealId,\\n        address indexed dao,\\n        address token,\\n        uint256 claimed\\n    );\\n\\n    /**\\n     * @notice              Initialize the DaoDepositManager\\n     * @param _dao          The DAO address to which this contract belongs\\n     */\\n    function initialize(address _dao) external {\\n        require(dao == address(0), \\\"DaoDepositManager: Error 001\\\");\\n        require(\\n            _dao != address(0) && _dao != address(this),\\n            \\\"DaoDepositManager: Error 100\\\"\\n        );\\n        dao = _dao;\\n        dealManager = IDealManager(msg.sender);\\n    }\\n\\n    /**\\n     * @notice                  Sets a new address for the DealManager\\n     * @param _newDealManager   The address of the new DealManager\\n     */\\n    function setDealManager(address _newDealManager) external onlyDealManager {\\n        require(\\n            _newDealManager != address(0) && _newDealManager != address(this),\\n            \\\"DaoDepositManager: Error 100\\\"\\n        );\\n        dealManager = IDealManager(_newDealManager);\\n    }\\n\\n    /**\\n     * @notice              Transfers the token amount to the DaoDepositManager and stores\\n                            the parameters in a Deposit structure.\\n     * @dev                 Note: if ETH is deposited, the token address should be ZERO (0)\\n     * @param _module       The address of the module for which is being deposited\\n     * @param _dealId       The dealId to which this deposit is part of\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @param _amount       The amount that is deposited\\n     */\\n    function deposit(\\n        address _module,\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) public payable {\\n        require(_amount != 0, \\\"DaoDepositManager: Error 101\\\");\\n        if (_token != address(0)) {\\n            _transferFrom(_token, msg.sender, address(this), _amount);\\n        } else {\\n            require(_amount == msg.value, \\\"DaoDepositManager: Error 202\\\");\\n        }\\n\\n        tokenBalances[_token] += _amount;\\n        availableDealBalances[_token][_module][_dealId] += _amount;\\n        verifyBalance(_token);\\n        deposits[_module][_dealId].push(\\n            // solhint-disable-next-line not-rely-on-time\\n            Deposit(msg.sender, _token, _amount, 0, uint32(block.timestamp))\\n        );\\n\\n        emit Deposited(\\n            _module,\\n            _dealId,\\n            msg.sender,\\n            uint32(deposits[_module][_dealId].length - 1),\\n            _token,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice              Transfers multiple tokens and amounts to the DaoDepositManager and\\n                            stores the parameters for each deposit in a Deposit structure.\\n     * @dev                 Note: if ETH is deposited, the token address should be ZERO (0)\\n                            Note: when calling this function, it is only possible to have 1 ETH\\n                            deposit, meaning only 1  of the token addresses can be a ZERO address     \\n     * @param _module       The address of the module for which is being deposited\\n     * @param _dealId       The dealId to which the deposits are part of\\n     * @param _tokens       Array of addresses of the ERC20 tokens or ETH (ZERO address)\\n     * @param _amounts      Array of amounts that are deposited\\n     */\\n    function multipleDeposits(\\n        address _module,\\n        uint32 _dealId,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable {\\n        require(\\n            _tokens.length == _amounts.length,\\n            \\\"DaoDepositManager: Error 102\\\"\\n        );\\n        uint256 tokenArrayLength = _tokens.length;\\n        for (uint256 i; i < tokenArrayLength; ++i) {\\n            deposit(_module, _dealId, _tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice              Sends the token and amount, stored in the Deposit associated with the\\n                            depositId to the depositor\\n     * @param _module       The address of the module to which the dealId is part of\\n     * @param _dealId       The dealId to for which the deposit has been made, that is being\\n                            withdrawn\\n     * @param _depositId    The ID of the deposit action (position in array)\\n     * @return address      The address of the depositor\\n     * @return address      The address of the ERC20 token or ETH (ZERO address)\\n     * @return uint256      The available amount that is withdrawn\\n     */\\n    function withdraw(\\n        address _module,\\n        uint32 _dealId,\\n        uint32 _depositId\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        require(\\n            deposits[_module][_dealId].length > _depositId,\\n            \\\"DaoDepositManager: Error 200\\\"\\n        );\\n        Deposit storage d = deposits[_module][_dealId][_depositId];\\n\\n        require(d.depositor == msg.sender, \\\"DaoDepositManager: Error 222\\\");\\n\\n        uint256 freeAmount = d.amount - d.used;\\n        // Deposit can't be used by a module or withdrawn already\\n        require(freeAmount != 0, \\\"DaoDepositManager: Error 240\\\");\\n        d.used = d.amount;\\n        availableDealBalances[d.token][_module][_dealId] -= freeAmount;\\n        tokenBalances[d.token] -= freeAmount;\\n        _transfer(d.token, d.depositor, freeAmount);\\n\\n        emit Withdrawn(\\n            _module,\\n            _dealId,\\n            d.depositor,\\n            _depositId,\\n            d.token,\\n            freeAmount\\n        );\\n        return (d.depositor, d.token, freeAmount);\\n    }\\n\\n    /**\\n     * @notice              Sends the token and amount associated with the dealId into the Deal\\n                            module\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @param _amount       The amount that is sent to the module\\n     */\\n    function sendToModule(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external onlyModule {\\n        uint256 amountLeft = _amount;\\n        uint256 depositArrayLength = deposits[msg.sender][_dealId].length;\\n        for (uint256 i; i < depositArrayLength; ++i) {\\n            Deposit storage d = deposits[msg.sender][_dealId][i];\\n            if (d.token == _token) {\\n                uint256 freeAmount = d.amount - d.used;\\n                if (freeAmount > amountLeft) {\\n                    freeAmount = amountLeft;\\n                }\\n                amountLeft -= freeAmount;\\n                d.used += freeAmount;\\n\\n                if (amountLeft == 0) {\\n                    _transfer(_token, msg.sender, _amount);\\n                    tokenBalances[_token] -= _amount;\\n                    availableDealBalances[_token][msg.sender][\\n                        _dealId\\n                    ] -= _amount;\\n                    // break out of the loop, since we sent the tokens\\n                    // we now jump to the require statement at the end\\n                    break;\\n                }\\n            }\\n        }\\n        require(amountLeft == 0, \\\"DaoDepositManager: Error 262\\\");\\n    }\\n\\n    /**\\n     * @notice                  Starts the vesting periode for a given token plus amount,\\n                                associated to a dealId\\n     * @param _token            The address of the ERC20 token or ETH (ZERO address)\\n     * @param _amount           The total amount being vested\\n     * @param _vestingCliff     The duration after which tokens can be claimed starting from the\\n                                vesting start, in seconds\\n     * @param _vestingDuration  The duration the tokens are vested, in seconds\\n     */\\n    function startVesting(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount,\\n        uint32 _vestingCliff,\\n        uint32 _vestingDuration\\n    ) external payable onlyModule {\\n        require(_amount != 0, \\\"DaoDepositManager: Error 101\\\");\\n        require(\\n            _vestingCliff <= _vestingDuration,\\n            \\\"DaoDepositManager: Error 201\\\"\\n        );\\n\\n        if (_token != address(0)) {\\n            _transferFrom(_token, msg.sender, address(this), _amount);\\n        } else {\\n            require(_amount == msg.value, \\\"DaoDepositManager: Error 202\\\");\\n        }\\n\\n        vestedBalances[_token] += _amount;\\n\\n        verifyBalance(_token);\\n\\n        vestings.push(\\n            Vesting(\\n                msg.sender,\\n                _dealId,\\n                _token,\\n                _amount,\\n                0,\\n                // solhint-disable-next-line not-rely-on-time\\n                uint32(block.timestamp),\\n                _vestingCliff,\\n                _vestingDuration\\n            )\\n        );\\n\\n        if (vestedTokenAmounts[_token] == 0) {\\n            vestedTokenAddresses.push(_token);\\n        }\\n\\n        vestedTokenAmounts[_token] += _amount;\\n\\n        // Outside of the if-clause above to catch the\\n        // unlikely edge-case of multiple vestings of the\\n        // same token for one deal. This is necessary\\n        // for deal-based vesting claims to work.\\n        ++tokensPerDeal[msg.sender][_dealId];\\n\\n        emit VestingStarted(\\n            msg.sender,\\n            _dealId,\\n            // solhint-disable-next-line not-rely-on-time\\n            uint32(block.timestamp),\\n            _vestingCliff,\\n            _vestingDuration,\\n            _token,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice              Claims all the possible ERC20 tokens and ETH, across all deals that are\\n                            part of this DaoDepositManager\\n     * @dev                 This function can be called to retrieve the claimable amounts,\\n                            to show in the frontend for example\\n     * @return tokens       Array of addresses of the claimed tokens\\n     * @return amounts      Array of amounts claimed, in the same order as the tokens array\\n     */\\n    function claimVestings()\\n        external\\n        returns (address[] memory tokens, uint256[] memory amounts)\\n    {\\n        uint256 vestingCount = vestedTokenAddresses.length;\\n        tokens = new address[](vestingCount);\\n        amounts = new uint256[](vestingCount);\\n\\n        // Copy storage array to memory, since the \\\"original\\\"\\n        // array might change during sendReleasableClaim() if\\n        // the amount of a token reaches zero\\n        for (uint256 i; i < vestingCount; ++i) {\\n            tokens[i] = vestedTokenAddresses[i];\\n        }\\n\\n        uint256 vestingArrayLength = vestings.length;\\n        for (uint256 i; i < vestingArrayLength; ++i) {\\n            (address token, uint256 amount) = sendReleasableClaim(vestings[i]);\\n            for (uint256 j; j < vestingCount; ++j) {\\n                if (token == tokens[j]) {\\n                    amounts[j] += amount;\\n                }\\n            }\\n        }\\n        return (tokens, amounts);\\n    }\\n\\n    /**\\n     * @notice              Claims all the possible ERC20 tokens and ETH, associated with\\n                            a single dealId\\n     * @dev                 This function can be called to retrieve the claimable amount,\\n                            to show in the frontend for example\\n     * @param _module       The module address of which the dealId is part off\\n     * @param _dealId       A specific deal, that is part of the dealModule\\n     * @return tokens       Array of addresses of the claimed tokens, in the same order as the\\n                            amounts array\\n     * @return amounts      Array of amounts claimed, in the same order as the tokens array\\n     */\\n    function claimDealVestings(address _module, uint32 _dealId)\\n        external\\n        returns (address[] memory tokens, uint256[] memory amounts)\\n    {\\n        uint256 amountOfTokens = tokensPerDeal[_module][_dealId];\\n\\n        tokens = new address[](amountOfTokens);\\n        amounts = new uint256[](amountOfTokens);\\n        uint256 counter;\\n        if (amountOfTokens != 0) {\\n            for (uint256 i; i < vestings.length; ++i) {\\n                Vesting storage v = vestings[i];\\n                if (v.dealModule == _module && v.dealId == _dealId) {\\n                    (tokens[counter], amounts[counter]) = sendReleasableClaim(\\n                        v\\n                    );\\n                    ++counter;\\n                }\\n            }\\n        }\\n        return (tokens, amounts);\\n    }\\n\\n    /**\\n     * @notice              Sends the claimable amount of the token, associated with the Vesting\\n                            to the DAO address stored in the state.\\n     * @param vesting       Struct containing all the information related to vesting\\n     * @return token        Addresses of the claimed token\\n     * @return amount       Amount of the claimable token\\n     */\\n    function sendReleasableClaim(Vesting storage vesting)\\n        private\\n        returns (address token, uint256 amount)\\n    {\\n        if (vesting.totalClaimed < vesting.totalVested) {\\n            // Check cliff was reached\\n            // solhint-disable-next-line not-rely-on-time\\n            uint32 elapsedSeconds = uint32(block.timestamp) - vesting.startTime;\\n\\n            if (elapsedSeconds < vesting.cliff) {\\n                return (vesting.token, 0);\\n            }\\n            if (elapsedSeconds >= vesting.duration) {\\n                amount = vesting.totalVested - vesting.totalClaimed;\\n                vesting.totalClaimed = vesting.totalVested;\\n                tokensPerDeal[vesting.dealModule][vesting.dealId]--;\\n            } else {\\n                amount =\\n                    (vesting.totalVested * uint256(elapsedSeconds)) /\\n                    uint256(vesting.duration);\\n                amount -= vesting.totalClaimed;\\n                vesting.totalClaimed += amount;\\n            }\\n\\n            token = vesting.token;\\n            vestedTokenAmounts[token] -= amount;\\n\\n            // if the corresponding token doesn't have any\\n            // vested amounts in any vesting anymore,\\n            // we remove it from the array\\n            if (vestedTokenAmounts[token] == 0) {\\n                uint256 arrLen = vestedTokenAddresses.length;\\n                for (uint256 i; i < arrLen; ++i) {\\n                    if (vestedTokenAddresses[i] == token) {\\n                        // if it's not the last element\\n                        // move the last to the current slot\\n                        if (i != arrLen - 1) {\\n                            vestedTokenAddresses[i] = vestedTokenAddresses[\\n                                arrLen - 1\\n                            ];\\n                        }\\n                        // remove the last entry\\n                        vestedTokenAddresses.pop();\\n                        --arrLen;\\n                    }\\n                }\\n            }\\n\\n            require(\\n                vesting.totalClaimed <= vesting.totalVested,\\n                \\\"DaoDepositManager: Error 244\\\"\\n            );\\n            vestedBalances[token] -= amount;\\n            _transfer(token, dao, amount);\\n\\n            emit VestingClaimed(\\n                vesting.dealModule,\\n                vesting.dealId,\\n                dao,\\n                token,\\n                amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice              Verifies if the DaoDepositContract holds the balance as expected\\n     * @param _token        Address of the ERC20 token or ETH (ZERO address)\\n     */\\n    function verifyBalance(address _token) public view {\\n        require(\\n            getBalance(_token) >=\\n                tokenBalances[_token] + vestedBalances[_token],\\n            \\\"DaoDepositManager: Error 245\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice              Returns all the members in the Deposit struct for a given depositId\\n     * @dev                 If ETH has been deposited, the token address returned\\n                            will show ZERO (0)\\n     * @param _module       The address of the module of which the dealId is part of\\n     * @param _dealId       The dealId to for which the deposit has been made\\n     * @param _depositId    The ID of the deposit action (position in array)\\n     * @return address      The depositor address\\n     * @return address      The address of the ERC20 token or ETH (ZERO address)\\n     * @return uint256      The amount that has been deposited\\n     * @return uint256      The amount already used in a deal\\n     * @return uint32       The Unix timestamp of the deposit\\n     */\\n    function getDeposit(\\n        address _module,\\n        uint32 _dealId,\\n        uint32 _depositId\\n    )\\n        public\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint32\\n        )\\n    {\\n        Deposit memory d = deposits[_module][_dealId][_depositId];\\n        return (d.depositor, d.token, d.amount, d.used, d.depositedAt);\\n    }\\n\\n    /**\\n     * @notice                  Returns all the members from all the Deposits within\\n                                a given range of depositIds\\n     * @dev                     If ETH has been deposited, the token address returned\\n                                will show ZERO (0)\\n     * @param _module           The address of the module of which the dealId is part of\\n     * @param _dealId           The dealId to for which the deposits have been made\\n     * @param _fromDepositId    First depositId (element in array) of the range IDs\\n     * @param _toDepositId      Last depositId (element in array) of the range of IDs\\n     * @return depositors       Array of addresses of the depositors in the deposit range\\n     * @return tokens           Array of token addresses or ETH (ZERO address) in the\\n                                deposit range\\n     * @return amounts          Array of amounts, sorted similar as tokens array, for the given\\n                                deposit range\\n     * @return usedAmounts      Array of amounts already used in a deal, for the given\\n                                deposit range\\n     * @return times            Array of Unix timestamps of the deposits, for the given\\n                                deposit range\\n     */\\n    function getDepositRange(\\n        address _module,\\n        uint32 _dealId,\\n        uint32 _fromDepositId,\\n        uint32 _toDepositId\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory depositors,\\n            address[] memory tokens,\\n            uint256[] memory amounts,\\n            uint256[] memory usedAmounts,\\n            uint256[] memory times\\n        )\\n    {\\n        uint32 range = 1 + _toDepositId - _fromDepositId; // inclusive range\\n        depositors = new address[](range);\\n        tokens = new address[](range);\\n        amounts = new uint256[](range);\\n        usedAmounts = new uint256[](range);\\n        times = new uint256[](range);\\n        uint256 index; // needed since the ids can start at > 0\\n        for (uint32 i = _fromDepositId; i <= _toDepositId; ++i) {\\n            (\\n                depositors[index],\\n                tokens[index],\\n                amounts[index],\\n                usedAmounts[index],\\n                times[index]\\n            ) = getDeposit(_module, _dealId, i);\\n            ++index;\\n        }\\n        return (depositors, tokens, amounts, usedAmounts, times);\\n    }\\n\\n    /**\\n     * @notice              Returns the stored amount of an ERC20 token or ETH, for a given deal\\n     * @param _module       The address of the module to which the dealId is part of\\n     * @param _dealId       The dealId that relates to the ERC20 token or ETH balance\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @return uint256      The balance amount of the ERC20 token or ETH, specific to the dealId\\n     */\\n    function getAvailableDealBalance(\\n        address _module,\\n        uint32 _dealId,\\n        address _token\\n    ) external view returns (uint256) {\\n        return availableDealBalances[_token][_module][_dealId];\\n    }\\n\\n    /**\\n     * @notice              Returns the total number of deposits made, for a given dealId\\n     * @param _module       The address of the module to which the dealId is part of\\n     * @param _dealId       The dealId for which deposits have been made\\n     * @return uint32       The total amount of deposits made, for a given dealId\\n     */\\n    function getTotalDepositCount(address _module, uint32 _dealId)\\n        external\\n        view\\n        returns (uint32)\\n    {\\n        return uint32(deposits[_module][_dealId].length);\\n    }\\n\\n    /**\\n     * @notice              Returns the withdrawable amount of a specifc token and dealId,\\n                            for a given address\\n     * @dev                 If ETH has been deposited, the token address used should be ZERO (0)\\n     * @param _module       The address of the module of which the dealId is part of\\n     * @param _dealId       The dealId for which a deposit has been made, to check\\n                            for withdrawable amounts\\n     * @param _depositor    The address of the depositor that is able to withdraw,\\n                            deposited amounts\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @return uint256      The available amount that can be withdrawn by the depositor\\n     */\\n    function getWithdrawableAmountOfDepositor(\\n        address _module,\\n        uint32 _dealId,\\n        address _depositor,\\n        address _token\\n    ) external view returns (uint256) {\\n        uint256 freeAmount;\\n        for (uint256 i; i < deposits[_module][_dealId].length; ++i) {\\n            if (\\n                deposits[_module][_dealId][i].depositor == _depositor &&\\n                deposits[_module][_dealId][i].token == _token\\n            ) {\\n                freeAmount += (deposits[_module][_dealId][i].amount -\\n                    deposits[_module][_dealId][i].used);\\n            }\\n        }\\n        return freeAmount;\\n    }\\n\\n    /**\\n     * @notice              Returns the balance the DaoDepositContract holds, for a given\\n                            ERC20 token or ETH (ZERO address)\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @return uint256      The balance the contracts holds for the _token parameter\\n     */\\n    function getBalance(address _token) public view returns (uint256) {\\n        if (_token == address(0)) {\\n            return address(this).balance;\\n        }\\n        return IERC20(_token).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice              Transfers the ERC20 token or ETH (ZERO address), to the _to address\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @param _to           Receiver address of the _amount of _token\\n     * @param _amount       The amount to be transferred to the _to address\\n     */\\n    function _transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_token != address(0)) {\\n            try IERC20(_token).transfer(_to, _amount) returns (bool success) {\\n                require(success, \\\"DaoDepositManager: Error 241\\\");\\n            } catch {\\n                revert(\\\"DaoDepositManager: Error 241\\\");\\n            }\\n        } else {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool sent, ) = _to.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"DaoDepositManager: Error 242\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice              Transfers the ERC20 token or ETH (ZERO address),\\n                            from the _from address to the _to address\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @param _from         The address on behalve of which the contract transfers the _token\\n     * @param _to           Receiver address of the _amount of _token\\n     * @param _amount       The amount to be transferred to the _to address\\n     */\\n    function _transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        try IERC20(_token).transferFrom(_from, _to, _amount) returns (\\n            bool success\\n        ) {\\n            require(success, \\\"DaoDepositManager: Error 241\\\");\\n        } catch {\\n            revert(\\\"DaoDepositManager: Error 241\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice              Modifier that validates that the msg.sender\\n                            is the DealManager contract\\n     */\\n    modifier onlyDealManager() {\\n        require(\\n            msg.sender == address(dealManager),\\n            \\\"DaoDepositManager: Error 221\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice              Modifier that validates that the msg.sender\\n                            is a Deals module\\n     */\\n    modifier onlyModule() {\\n        require(\\n            dealManager.isModule(msg.sender),\\n            \\\"DaoDepositManager: Error 220\\\"\\n        );\\n        _;\\n    }\\n\\n    fallback() external payable {}\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xace41ce86c65ca14ccc6cbe5fabb20e49fb5e615597b4501e8d7e96c331354dd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/interfaces/IDealManager.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDealManager {\\n    function createDaoDepositManager(address _dao) external;\\n\\n    function hasDaoDepositManager(address _dao) external view returns (bool);\\n\\n    function getDaoDepositManager(address _dao) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function isModule(address who) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9e059367f90882e305d02718f4466cca8a845cb28fa8f3ab667e7f33ba55f057\",\"license\":\"Unlicense\"},\"contracts/utils/interfaces/IModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IModuleBase {\\n    function moduleIdentifier() external view returns (bytes32);\\n\\n    function dealManager() external view returns (address);\\n\\n    function hasDealExpired(uint32 _dealId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x018e3884c2623613014747a4548002f0fd3e8fb1faa923505a48e1588c3293a5\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101735760003560e01c8063836d21b5116100c8578063d405929211610084578063ee697a4811610061578063ee697a48146105be578063f42a7590146105de578063f8b2cb4f1461060f578063f9f77a0b1461062f57005b8063d40592921461054d578063db07300814610560578063e20f3f3a1461059e57005b8063836d21b51461048a578063a00ddad1146104ad578063c4d66de8146104cd578063c51a0b33146104ed578063ca516cab14610500578063cb3fdb611461052057005b80634ab92e491161012f578063523fba7f1161010c578063523fba7f1461036757806362a6a82d1461039457806364650503146103f4578063821bee731461041457005b80634ab92e49146102b55780634cccfee9146102fb5780634d6e1fcb1461030e57005b806301df538d1461017c57806315b5a59e146101b95780632162a70c146101ff578063246cd5741461021f578063342c7d28146102755780634162169f1461029557005b3661017a57005b005b34801561018857600080fd5b5060015461019c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101c557600080fd5b506101f16101d4366004612708565b600960209081526000928352604080842090915290825290205481565b6040519081526020016101b0565b34801561020b57600080fd5b5061017a61021a366004612746565b61065c565b34801561022b57600080fd5b506101f161023a366004612782565b6001600160a01b038082166000908152600360209081526040808320938716835292815282822063ffffffff86168352905220549392505050565b34801561028157600080fd5b5061017a6102903660046127c5565b6108ed565b3480156102a157600080fd5b5060005461019c906001600160a01b031681565b3480156102c157600080fd5b506102d56102d03660046127e7565b6109d6565b604080516001600160a01b039485168152939092166020840152908201526060016101b0565b61017a610309366004612821565b610c91565b34801561031a57600080fd5b5061032e6103293660046127e7565b610fc5565b604080516001600160a01b03968716815295909416602086015292840191909152606083015263ffffffff16608082015260a0016101b0565b34801561037357600080fd5b506101f16103823660046127c5565b60026020526000908152604090205481565b3480156103a057600080fd5b506103df6103af36600461286c565b6001600160a01b038216600090815260056020908152604080832063ffffffff8516845290915290205492915050565b60405163ffffffff90911681526020016101b0565b34801561040057600080fd5b5061019c61040f36600461289f565b611087565b34801561042057600080fd5b5061043461042f36600461289f565b6110b1565b604080516001600160a01b03998a16815263ffffffff9889166020820152989096169588019590955260608701939093526080860191909152831660a0850152821660c08401521660e0820152610100016101b0565b34801561049657600080fd5b5061049f611126565b6040516101b092919061292c565b3480156104b957600080fd5b5061017a6104c83660046127c5565b611301565b3480156104d957600080fd5b5061017a6104e83660046127c5565b61138a565b61017a6104fb36600461299f565b61147b565b34801561050c57600080fd5b5061032e61051b366004612a30565b61153a565b34801561052c57600080fd5b506101f161053b3660046127c5565b60046020526000908152604090205481565b61017a61055b366004612a63565b6115a7565b34801561056c57600080fd5b506101f161057b366004612ac1565b600360209081526000938452604080852082529284528284209052825290205481565b3480156105aa57600080fd5b506101f16105b9366004612aed565b611a8c565b3480156105ca57600080fd5b5061049f6105d936600461286c565b611c50565b3480156105ea57600080fd5b506105fe6105f9366004612b41565b611def565b6040516101b0959493929190612b8a565b34801561061b57600080fd5b506101f161062a3660046127c5565b612077565b34801561063b57600080fd5b506101f161064a3660046127c5565b60086020526000908152604090205481565b6001546040516342f6e38960e01b81523360048201526001600160a01b03909116906342f6e3899060240160206040518083038186803b15801561069f57600080fd5b505afa1580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190612bf7565b6107285760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203232300000000060448201526064015b60405180910390fd5b33600090815260056020908152604080832063ffffffff8716845290915281205482915b818110156108975733600090815260056020908152604080832063ffffffff8a168452909152812080548390811061078657610786612c19565b6000918252602090912060059091020160018101549091506001600160a01b0387811691161415610886576000816003015482600201546107c79190612c45565b9050848111156107d45750835b6107de8186612c45565b9450808260030160008282546107f49190612c5c565b9091555050846108845761080987338861210b565b6001600160a01b03871660009081526002602052604081208054889290610831908490612c45565b90915550506001600160a01b0387166000908152600360209081526040808320338452825280832063ffffffff8c16845290915281208054889290610877908490612c45565b9091555061089792505050565b505b5061089081612c74565b905061074c565b5081156108e65760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032363200000000604482015260640161071f565b5050505050565b6001546001600160a01b031633146109475760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032323100000000604482015260640161071f565b6001600160a01b0381161580159061096857506001600160a01b0381163014155b6109b45760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722031303000000000604482015260640161071f565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316600090815260056020908152604080832063ffffffff868116855292528220548291829190851610610a545760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032303000000000604482015260640161071f565b6001600160a01b038616600090815260056020908152604080832063ffffffff808a16855292528220805490918716908110610a9257610a92612c19565b6000918252602090912060059091020180549091506001600160a01b03163314610afe5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032323200000000604482015260640161071f565b600081600301548260020154610b149190612c45565b905080610b635760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032343000000000604482015260640161071f565b600282015460038084019190915560018301546001600160a01b03908116600090815260209283526040808220928c16825291835281812063ffffffff8b16825290925281208054839290610bb9908490612c45565b909155505060018201546001600160a01b031660009081526002602052604081208054839290610bea908490612c45565b909155505060018201548254610c0d916001600160a01b0390811691168361210b565b815460018301546040805163ffffffff8a811682526001600160a01b03938416602083015291810185905292821692908a16918b16907f51d6741c321e9a89b9c34b21ddee7615692c2790cc53d71cc9153bc4154e26999060600160405180910390a481546001909201546001600160a01b03928316999216975095509350505050565b80610cde5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722031303100000000604482015260640161071f565b6001600160a01b03821615610cfe57610cf982333084612276565b610d4d565b348114610d4d5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032303200000000604482015260640161071f565b6001600160a01b03821660009081526002602052604081208054839290610d75908490612c5c565b90915550506001600160a01b038083166000908152600360209081526040808320938816835292815282822063ffffffff8716835290529081208054839290610dbf908490612c5c565b90915550610dce905082611301565b60056000856001600160a01b03166001600160a01b0316815260200190815260200160002060008463ffffffff1681526020019081526020016000206040518060a00160405280336001600160a01b03168152602001846001600160a01b03168152602001838152602001600081526020014263ffffffff16815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548163ffffffff021916908363ffffffff1602179055505050336001600160a01b03168363ffffffff16856001600160a01b03167f38c8c4e2262895d41b568d97d77d9378f0ede467ceb6295791f7b8305ad387046001600560008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008963ffffffff16815260200190815260200160002080549050610f929190612c45565b6040805163ffffffff90921682526001600160a01b0388166020830152810186905260600160405180910390a450505050565b6001600160a01b038316600090815260056020908152604080832063ffffffff8087168552925282208054839283928392839283929190891690811061100d5761100d612c19565b60009182526020918290206040805160a08101825260059390930290910180546001600160a01b039081168085526001830154909116948401859052600282015492840183905260038201546060850181905260049092015463ffffffff1660809094018490529d939c50909a5098509650945050505050565b6007818154811061109757600080fd5b6000918252602090912001546001600160a01b0316905081565b600681815481106110c157600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b03808516965063ffffffff600160a01b909504851695931693919291818116916401000000008104821691600160401b9091041688565b60075460609081908067ffffffffffffffff81111561114757611147612c8f565b604051908082528060200260200182016040528015611170578160200160208202803683370190505b5092508067ffffffffffffffff81111561118c5761118c612c8f565b6040519080825280602002602001820160405280156111b5578160200160208202803683370190505b50915060005b8181101561122e57600781815481106111d6576111d6612c19565b9060005260206000200160009054906101000a90046001600160a01b031684828151811061120657611206612c19565b6001600160a01b039092166020928302919091019091015261122781612c74565b90506111bb565b5060065460005b818110156112fa576000806112696006848154811061125657611256612c19565b9060005260206000209060050201612331565b9150915060005b858110156112e65787818151811061128a5761128a612c19565b60200260200101516001600160a01b0316836001600160a01b031614156112d657818782815181106112be576112be612c19565b602002602001018181516112d29190612c5c565b9052505b6112df81612c74565b9050611270565b505050806112f390612c74565b9050611235565b5050509091565b6001600160a01b0381166000908152600460209081526040808320546002909252909120546113309190612c5c565b61133982612077565b10156113875760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032343500000000604482015260640161071f565b50565b6000546001600160a01b0316156113e35760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722030303100000000604482015260640161071f565b6001600160a01b0381161580159061140457506001600160a01b0381163014155b6114505760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722031303000000000604482015260640161071f565b600080546001600160a01b039092166001600160a01b03199283161790556001805490911633179055565b8281146114ca5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722031303200000000604482015260640161071f565b8260005b818110156115305761152088888888858181106114ed576114ed612c19565b905060200201602081019061150291906127c5565b87878681811061151457611514612c19565b90506020020135610c91565b61152981612c74565b90506114ce565b5050505050505050565b6005602052826000526040600020602052816000526040600020818154811061156257600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039384169750929091169450925063ffffffff1685565b6001546040516342f6e38960e01b81523360048201526001600160a01b03909116906342f6e3899060240160206040518083038186803b1580156115ea57600080fd5b505afa1580156115fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116229190612bf7565b61166e5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032323000000000604482015260640161071f565b826116bb5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722031303100000000604482015260640161071f565b8063ffffffff168263ffffffff1611156117175760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032303100000000604482015260640161071f565b6001600160a01b038416156117375761173284333086612276565b611786565b3483146117865760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032303200000000604482015260640161071f565b6001600160a01b038416600090815260046020526040812080548592906117ae908490612c5c565b909155506117bd905084611301565b604080516101008101825233815263ffffffff80881660208084019182526001600160a01b03898116858701818152606087018b815260006080890181815242891660a08b019081528d8a1660c08c019081528d8b1660e08d01908152600680546001810182559086529c516005909d027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810180549c518e16600160a01b026001600160c01b0319909d169e8b169e909e179b909b17909c5594517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d408a018054919098166001600160a01b0319919091161790965591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4188015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4287015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d439095018054915197518716600160401b026bffffffff0000000000000000199888166401000000000267ffffffffffffffff199093169690971695909517179590951693909317909155918152600890915220546119c657600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b038416600090815260086020526040812080548592906119ee908490612c5c565b909155505033600090815260096020908152604080832063ffffffff8916845290915281208054909190611a2190612c74565b909155506040805163ffffffff848116825283811660208301526001600160a01b038716828401526060820186905291514283169288169133917fa493d6c9e0b25f100e3bcacc5e236c14199bbdfe5e194c067081619b0998b9829181900360800190a45050505050565b60008060005b6001600160a01b038716600090815260056020908152604080832063ffffffff8a168452909152902054811015611c46576001600160a01b03878116600090815260056020908152604080832063ffffffff8b168452909152902080549187169183908110611b0357611b03612c19565b60009182526020909120600590910201546001600160a01b0316148015611b8457506001600160a01b03878116600090815260056020908152604080832063ffffffff8b168452909152902080549186169183908110611b6557611b65612c19565b60009182526020909120600160059092020101546001600160a01b0316145b15611c36576001600160a01b038716600090815260056020908152604080832063ffffffff8a1684529091529020805482908110611bc457611bc4612c19565b60009182526020808320600592830201600301546001600160a01b038b168452918152604080842063ffffffff8b168552909152909120805483908110611c0d57611c0d612c19565b906000526020600020906005020160020154611c299190612c45565b611c339083612c5c565b91505b611c3f81612c74565b9050611a92565b5095945050505050565b6001600160a01b038216600090815260096020908152604080832063ffffffff8516845290915290205460609081908067ffffffffffffffff811115611c9857611c98612c8f565b604051908082528060200260200182016040528015611cc1578160200160208202803683370190505b5092508067ffffffffffffffff811115611cdd57611cdd612c8f565b604051908082528060200260200182016040528015611d06578160200160208202803683370190505b50915060008115611de55760005b600654811015611de357600060068281548110611d3357611d33612c19565b6000918252602090912060059091020180549091506001600160a01b038981169116148015611d725750805463ffffffff888116600160a01b90920416145b15611dd257611d8081612331565b878581518110611d9257611d92612c19565b60200260200101878681518110611dab57611dab612c19565b60209081029190910101919091526001600160a01b039091169052611dcf83612c74565b92505b50611ddc81612c74565b9050611d14565b505b50505b9250929050565b606080808080600087611e03886001612ca5565b611e0d9190612ccd565b90508063ffffffff1667ffffffffffffffff811115611e2e57611e2e612c8f565b604051908082528060200260200182016040528015611e57578160200160208202803683370190505b5095508063ffffffff1667ffffffffffffffff811115611e7957611e79612c8f565b604051908082528060200260200182016040528015611ea2578160200160208202803683370190505b5094508063ffffffff1667ffffffffffffffff811115611ec457611ec4612c8f565b604051908082528060200260200182016040528015611eed578160200160208202803683370190505b5093508063ffffffff1667ffffffffffffffff811115611f0f57611f0f612c8f565b604051908082528060200260200182016040528015611f38578160200160208202803683370190505b5092508063ffffffff1667ffffffffffffffff811115611f5a57611f5a612c8f565b604051908082528060200260200182016040528015611f83578160200160208202803683370190505b5091506000885b8863ffffffff168163ffffffff161161206957611fa88c8c83610fc5565b8063ffffffff1690508c8781518110611fc357611fc3612c19565b602002602001018c8881518110611fdc57611fdc612c19565b602002602001018c8981518110611ff557611ff5612c19565b602002602001018c8a8151811061200e5761200e612c19565b602002602001018c8b8151811061202757612027612c19565b602090810291909101019490945293909252929091526001600160a01b0392831690529116905261205782612c74565b915061206281612cf2565b9050611f8a565b505050945094509450945094565b60006001600160a01b03821661208e575047919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156120cd57600080fd5b505afa1580156120e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121059190612d16565b92915050565b6001600160a01b038316156121d35760405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561216457600080fd5b505af1925050508015612194575060408051601f3d908101601f1916820190925261219191810190612bf7565b60015b6121b05760405162461bcd60e51b815260040161071f90612d2f565b806121cd5760405162461bcd60e51b815260040161071f90612d2f565b50505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612220576040519150601f19603f3d011682016040523d82523d6000602084013e612225565b606091505b50509050806121cd5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032343200000000604482015260640161071f565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd90606401602060405180830381600087803b1580156122c857600080fd5b505af19250505080156122f8575060408051601f3d908101601f191682019092526122f591810190612bf7565b60015b6123145760405162461bcd60e51b815260040161071f90612d2f565b806108e65760405162461bcd60e51b815260040161071f90612d2f565b6000808260020154836003015410156126e757600483015460009061235c9063ffffffff1642612ccd565b600485015490915063ffffffff6401000000009091048116908216101561239357505050600101546001600160a01b031690600090565b600484015463ffffffff600160401b90910481169082161061241957836003015484600201546123c39190612c45565b6002850154600386015584546001600160a01b0381166000908152600960209081526040808320600160a01b90940463ffffffff16835292905290812080549294509061240f83612d66565b9190505550612478565b6004840154600285015463ffffffff600160401b9092048216916124409190841690612d7d565b61244a9190612d9c565b915083600301548261245c9190612c45565b9150818460030160008282546124729190612c5c565b90915550505b60018401546001600160a01b03166000818152600860205260408120805492955084929091906124a9908490612c45565b90915550506001600160a01b0383166000908152600860205260409020546125ec5760075460005b818110156125e957846001600160a01b0316600782815481106124f6576124f6612c19565b6000918252602090912001546001600160a01b031614156125d95761251c600183612c45565b811461259a57600761252f600184612c45565b8154811061253f5761253f612c19565b600091825260209091200154600780546001600160a01b03909216918390811061256b5761256b612c19565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60078054806125ab576125ab612dbe565b600082815260209020810160001990810180546001600160a01b03191690550190556125d682612d66565b91505b6125e281612c74565b90506124d1565b50505b8360020154846003015411156126445760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f722032343400000000604482015260640161071f565b6001600160a01b0383166000908152600460205260408120805484929061266c908490612c45565b90915550506000546126899084906001600160a01b03168461210b565b6000548454604080516001600160a01b0387811682526020820187905293841693600160a01b840463ffffffff169316917f965de25c186a7b2d3d49b5ced5c89058b0a7bf8779da6ebe45ea019ec9e7cdf6910160405180910390a4505b915091565b80356001600160a01b038116811461270357600080fd5b919050565b6000806040838503121561271b57600080fd5b612724836126ec565b946020939093013593505050565b803563ffffffff8116811461270357600080fd5b60008060006060848603121561275b57600080fd5b61276484612732565b9250612772602085016126ec565b9150604084013590509250925092565b60008060006060848603121561279757600080fd5b6127a0846126ec565b92506127ae60208501612732565b91506127bc604085016126ec565b90509250925092565b6000602082840312156127d757600080fd5b6127e0826126ec565b9392505050565b6000806000606084860312156127fc57600080fd5b612805846126ec565b925061281360208501612732565b91506127bc60408501612732565b6000806000806080858703121561283757600080fd5b612840856126ec565b935061284e60208601612732565b925061285c604086016126ec565b9396929550929360600135925050565b6000806040838503121561287f57600080fd5b612888836126ec565b915061289660208401612732565b90509250929050565b6000602082840312156128b157600080fd5b5035919050565b600081518084526020808501945080840160005b838110156128f15781516001600160a01b0316875295820195908201906001016128cc565b509495945050505050565b600081518084526020808501945080840160005b838110156128f157815187529582019590820190600101612910565b60408152600061293f60408301856128b8565b828103602084015261295181856128fc565b95945050505050565b60008083601f84011261296c57600080fd5b50813567ffffffffffffffff81111561298457600080fd5b6020830191508360208260051b8501011115611de857600080fd5b600080600080600080608087890312156129b857600080fd5b6129c1876126ec565b95506129cf60208801612732565b9450604087013567ffffffffffffffff808211156129ec57600080fd5b6129f88a838b0161295a565b90965094506060890135915080821115612a1157600080fd5b50612a1e89828a0161295a565b979a9699509497509295939492505050565b600080600060608486031215612a4557600080fd5b612a4e846126ec565b95602085013595506040909401359392505050565b600080600080600060a08688031215612a7b57600080fd5b612a8486612732565b9450612a92602087016126ec565b935060408601359250612aa760608701612732565b9150612ab560808701612732565b90509295509295909350565b600080600060608486031215612ad657600080fd5b612adf846126ec565b9250612813602085016126ec565b60008060008060808587031215612b0357600080fd5b612b0c856126ec565b9350612b1a60208601612732565b9250612b28604086016126ec565b9150612b36606086016126ec565b905092959194509250565b60008060008060808587031215612b5757600080fd5b612b60856126ec565b9350612b6e60208601612732565b9250612b7c60408601612732565b9150612b3660608601612732565b60a081526000612b9d60a08301886128b8565b8281036020840152612baf81886128b8565b90508281036040840152612bc381876128fc565b90508281036060840152612bd781866128fc565b90508281036080840152612beb81856128fc565b98975050505050505050565b600060208284031215612c0957600080fd5b815180151581146127e057600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015612c5757612c57612c2f565b500390565b60008219821115612c6f57612c6f612c2f565b500190565b6000600019821415612c8857612c88612c2f565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600063ffffffff808316818516808303821115612cc457612cc4612c2f565b01949350505050565b600063ffffffff83811690831681811015612cea57612cea612c2f565b039392505050565b600063ffffffff80831681811415612d0c57612d0c612c2f565b6001019392505050565b600060208284031215612d2857600080fd5b5051919050565b6020808252601c908201527f44616f4465706f7369744d616e616765723a204572726f722032343100000000604082015260600190565b600081612d7557612d75612c2f565b506000190190565b6000816000190483118215151615612d9757612d97612c2f565b500290565b600082612db957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fdfea264697066735822122033d1486dda50d77168392a4bcdff07525a97bf6138062ca5eccb2314618f4ece64736f6c63430008090033",
  "devdoc": {
    "events": {
      "Deposited(address,uint32,address,uint32,address,uint256)": {
        "params": {
          "amount": "The amount that is deposited",
          "dealId": "A specific deal, that is part of the dealModule, for which a deposit is made",
          "dealModule": "The module address of which the dealId is part off",
          "depositId": "The ID of the deposit action (position in array)",
          "depositor": "The address of the depositor",
          "token": "The address of the ERC20 token or ETH (ZERO address)deposited"
        }
      },
      "VestingClaimed(address,uint32,address,address,uint256)": {
        "params": {
          "claimed": "The amount that is being claimed",
          "dao": "The address of the DAO, to which the claimed vesting is sent",
          "dealId": "A specific deal, that is part of the dealModule, for which a vesting is claimed",
          "dealModule": "The module address of which the dealId is part off",
          "token": "The address of the ERC20 token or ETH (ZERO address)"
        }
      },
      "VestingStarted(address,uint32,uint256,uint32,uint32,address,uint256)": {
        "params": {
          "amount": "The amount that is being vested",
          "dealId": "A specific deal, that is part of the dealModule, for which a vesting is started",
          "dealModule": "The module address of which the dealId is part off",
          "token": "The address of the ERC20 token or ETH (ZERO address)",
          "vestingCliff": "The vesting cliff, after which tokens can be claimed",
          "vestingDuration": "The duration the tokens are vested, in seconds",
          "vestingStart": "The Unix timestamp of when the vesting has been initiated"
        }
      },
      "Withdrawn(address,uint32,address,uint32,address,uint256)": {
        "params": {
          "amount": "The amount that is withdrawn",
          "dealId": "A specific deal, that is part of the dealModule, for which a withdraw is made",
          "dealModule": "The module address of which the dealId is part off",
          "depositId": "The ID of the deposit action (position in array)",
          "depositor": "The address of the depositor of the funds that are withdrawn",
          "token": "The address of the ERC20 token or ETH (ZERO address) withdrawn"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claimDealVestings(address,uint32)": {
        "details": "This function can be called to retrieve the claimable amount, to show in the frontend for example",
        "params": {
          "_dealId": "A specific deal, that is part of the dealModule",
          "_module": "The module address of which the dealId is part off"
        },
        "returns": {
          "amounts": "     Array of amounts claimed, in the same order as the tokens array",
          "tokens": "      Array of addresses of the claimed tokens, in the same order as the amounts array"
        }
      },
      "claimVestings()": {
        "details": "This function can be called to retrieve the claimable amounts, to show in the frontend for example",
        "returns": {
          "amounts": "     Array of amounts claimed, in the same order as the tokens array",
          "tokens": "      Array of addresses of the claimed tokens"
        }
      },
      "deposit(address,uint32,address,uint256)": {
        "details": "Note: if ETH is deposited, the token address should be ZERO (0)",
        "params": {
          "_amount": "The amount that is deposited",
          "_dealId": "The dealId to which this deposit is part of",
          "_module": "The address of the module for which is being deposited",
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        }
      },
      "getAvailableDealBalance(address,uint32,address)": {
        "params": {
          "_dealId": "The dealId that relates to the ERC20 token or ETH balance",
          "_module": "The address of the module to which the dealId is part of",
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        },
        "returns": {
          "_0": "uint256      The balance amount of the ERC20 token or ETH, specific to the dealId"
        }
      },
      "getBalance(address)": {
        "params": {
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        },
        "returns": {
          "_0": "uint256      The balance the contracts holds for the _token parameter"
        }
      },
      "getDeposit(address,uint32,uint32)": {
        "details": "If ETH has been deposited, the token address returned will show ZERO (0)",
        "params": {
          "_dealId": "The dealId to for which the deposit has been made",
          "_depositId": "The ID of the deposit action (position in array)",
          "_module": "The address of the module of which the dealId is part of"
        },
        "returns": {
          "_0": "address      The depositor address",
          "_1": "address      The address of the ERC20 token or ETH (ZERO address)",
          "_2": "uint256      The amount that has been deposited",
          "_3": "uint256      The amount already used in a deal",
          "_4": "uint32       The Unix timestamp of the deposit"
        }
      },
      "getDepositRange(address,uint32,uint32,uint32)": {
        "details": "If ETH has been deposited, the token address returned will show ZERO (0)",
        "params": {
          "_dealId": "The dealId to for which the deposits have been made",
          "_fromDepositId": "First depositId (element in array) of the range IDs",
          "_module": "The address of the module of which the dealId is part of",
          "_toDepositId": "Last depositId (element in array) of the range of IDs"
        },
        "returns": {
          "amounts": "         Array of amounts, sorted similar as tokens array, for the given deposit range",
          "depositors": "      Array of addresses of the depositors in the deposit range",
          "times": "           Array of Unix timestamps of the deposits, for the given deposit range",
          "tokens": "          Array of token addresses or ETH (ZERO address) in the deposit range",
          "usedAmounts": "     Array of amounts already used in a deal, for the given deposit range"
        }
      },
      "getTotalDepositCount(address,uint32)": {
        "params": {
          "_dealId": "The dealId for which deposits have been made",
          "_module": "The address of the module to which the dealId is part of"
        },
        "returns": {
          "_0": "uint32       The total amount of deposits made, for a given dealId"
        }
      },
      "getWithdrawableAmountOfDepositor(address,uint32,address,address)": {
        "details": "If ETH has been deposited, the token address used should be ZERO (0)",
        "params": {
          "_dealId": "The dealId for which a deposit has been made, to check for withdrawable amounts",
          "_depositor": "The address of the depositor that is able to withdraw, deposited amounts",
          "_module": "The address of the module of which the dealId is part of",
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        },
        "returns": {
          "_0": "uint256      The available amount that can be withdrawn by the depositor"
        }
      },
      "initialize(address)": {
        "params": {
          "_dao": "The DAO address to which this contract belongs"
        }
      },
      "multipleDeposits(address,uint32,address[],uint256[])": {
        "details": "Note: if ETH is deposited, the token address should be ZERO (0) Note: when calling this function, it is only possible to have 1 ETH deposit, meaning only 1  of the token addresses can be a ZERO address     ",
        "params": {
          "_amounts": "Array of amounts that are deposited",
          "_dealId": "The dealId to which the deposits are part of",
          "_module": "The address of the module for which is being deposited",
          "_tokens": "Array of addresses of the ERC20 tokens or ETH (ZERO address)"
        }
      },
      "sendToModule(uint32,address,uint256)": {
        "params": {
          "_amount": "The amount that is sent to the module",
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        }
      },
      "setDealManager(address)": {
        "params": {
          "_newDealManager": "The address of the new DealManager"
        }
      },
      "startVesting(uint32,address,uint256,uint32,uint32)": {
        "params": {
          "_amount": "The total amount being vested",
          "_token": "The address of the ERC20 token or ETH (ZERO address)",
          "_vestingCliff": "The duration after which tokens can be claimed starting from the vesting start, in seconds",
          "_vestingDuration": "The duration the tokens are vested, in seconds"
        }
      },
      "verifyBalance(address)": {
        "params": {
          "_token": "Address of the ERC20 token or ETH (ZERO address)"
        }
      },
      "withdraw(address,uint32,uint32)": {
        "params": {
          "_dealId": "The dealId to for which the deposit has been made, that is being withdrawn",
          "_depositId": "The ID of the deposit action (position in array)",
          "_module": "The address of the module to which the dealId is part of"
        },
        "returns": {
          "_0": "address      The address of the depositor",
          "_1": "address      The address of the ERC20 token or ETH (ZERO address)",
          "_2": "uint256      The available amount that is withdrawn"
        }
      }
    },
    "title": "PrimeDeals Dao Deposit Manager",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposited(address,uint32,address,uint32,address,uint256)": {
        "notice": "This event is emitted when a deposit is made"
      },
      "VestingClaimed(address,uint32,address,address,uint256)": {
        "notice": "This event is emitted when a vesting is claimed"
      },
      "VestingStarted(address,uint32,uint256,uint32,uint32,address,uint256)": {
        "notice": "This event is emitted when a vesting is started"
      },
      "Withdrawn(address,uint32,address,uint32,address,uint256)": {
        "notice": "This event is emitted when a withdraw is made"
      }
    },
    "kind": "user",
    "methods": {
      "availableDealBalances(address,address,uint32)": {
        "notice": "token address => deal module address => deal module id => balance"
      },
      "claimDealVestings(address,uint32)": {
        "notice": "Claims all the possible ERC20 tokens and ETH, associated with a single dealId"
      },
      "claimVestings()": {
        "notice": "Claims all the possible ERC20 tokens and ETH, across all deals that are part of this DaoDepositManager"
      },
      "dao()": {
        "notice": "DAO address to which this DaoDepositContract is linked"
      },
      "dealManager()": {
        "notice": "Address of the DealManager"
      },
      "deposit(address,uint32,address,uint256)": {
        "notice": "Transfers the token amount to the DaoDepositManager and stores the parameters in a Deposit structure."
      },
      "deposits(address,uint256,uint256)": {
        "notice": "deal module address => deal id => deposits array"
      },
      "getAvailableDealBalance(address,uint32,address)": {
        "notice": "Returns the stored amount of an ERC20 token or ETH, for a given deal"
      },
      "getBalance(address)": {
        "notice": "Returns the balance the DaoDepositContract holds, for a given ERC20 token or ETH (ZERO address)"
      },
      "getDeposit(address,uint32,uint32)": {
        "notice": "Returns all the members in the Deposit struct for a given depositId"
      },
      "getDepositRange(address,uint32,uint32,uint32)": {
        "notice": "Returns all the members from all the Deposits within a given range of depositIds"
      },
      "getTotalDepositCount(address,uint32)": {
        "notice": "Returns the total number of deposits made, for a given dealId"
      },
      "getWithdrawableAmountOfDepositor(address,uint32,address,address)": {
        "notice": "Returns the withdrawable amount of a specifc token and dealId, for a given address"
      },
      "initialize(address)": {
        "notice": "Initialize the DaoDepositManager"
      },
      "multipleDeposits(address,uint32,address[],uint256[])": {
        "notice": "Transfers multiple tokens and amounts to the DaoDepositManager and stores the parameters for each deposit in a Deposit structure."
      },
      "sendToModule(uint32,address,uint256)": {
        "notice": "Sends the token and amount associated with the dealId into the Deal module"
      },
      "setDealManager(address)": {
        "notice": "Sets a new address for the DealManager"
      },
      "startVesting(uint32,address,uint256,uint32,uint32)": {
        "notice": "Starts the vesting periode for a given token plus amount, associated to a dealId"
      },
      "tokenBalances(address)": {
        "notice": "token address => balance"
      },
      "tokensPerDeal(address,uint256)": {
        "notice": "deal module address => deal id => token counter"
      },
      "verifyBalance(address)": {
        "notice": "Verifies if the DaoDepositContract holds the balance as expected"
      },
      "vestedBalances(address)": {
        "notice": "token address => balance"
      },
      "vestedTokenAddresses(uint256)": {
        "notice": "Array of all the token addresses that are vested"
      },
      "vestedTokenAmounts(address)": {
        "notice": "token address => amount"
      },
      "vestings(uint256)": {
        "notice": "Array of vestings where the index is the vesting ID"
      },
      "withdraw(address,uint32,uint32)": {
        "notice": "Sends the token and amount, stored in the Deposit associated with the depositId to the depositor"
      }
    },
    "notice": "Smart contract to manage the deposits, withdraws and vestings of a DAO",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 929,
        "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
        "label": "dao",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 933,
        "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
        "label": "dealManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDealManager)8301"
      },
      {
        "astId": 938,
        "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
        "label": "tokenBalances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 947,
        "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
        "label": "availableDealBalances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_uint256)))"
      },
      {
        "astId": 952,
        "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
        "label": "vestedBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 961,
        "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
        "label": "deposits",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Deposit)998_storage)dyn_storage))"
      },
      {
        "astId": 966,
        "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
        "label": "vestings",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Vesting)1023_storage)dyn_storage"
      },
      {
        "astId": 970,
        "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
        "label": "vestedTokenAddresses",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 975,
        "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
        "label": "vestedTokenAmounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 982,
        "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
        "label": "tokensPerDeal",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Deposit)998_storage)dyn_storage": {
        "base": "t_struct(Deposit)998_storage",
        "encoding": "dynamic_array",
        "label": "struct DaoDepositManager.Deposit[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Vesting)1023_storage)dyn_storage": {
        "base": "t_struct(Vesting)1023_storage",
        "encoding": "dynamic_array",
        "label": "struct DaoDepositManager.Vesting[]",
        "numberOfBytes": "32"
      },
      "t_contract(IDealManager)8301": {
        "encoding": "inplace",
        "label": "contract IDealManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint32,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Deposit)998_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct DaoDepositManager.Deposit[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(Deposit)998_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(Deposit)998_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DaoDepositManager.Deposit[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Deposit)998_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Deposit)998_storage": {
        "encoding": "inplace",
        "label": "struct DaoDepositManager.Deposit",
        "members": [
          {
            "astId": 985,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "depositor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 988,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 991,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 994,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "used",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 997,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "depositedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Vesting)1023_storage": {
        "encoding": "inplace",
        "label": "struct DaoDepositManager.Vesting",
        "members": [
          {
            "astId": 1001,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "dealModule",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1004,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "dealId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1007,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1010,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "totalVested",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1013,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1016,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "startTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 1019,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "cliff",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 1022,
            "contract": "contracts/core/DaoDepositManager.sol:DaoDepositManager",
            "label": "duration",
            "offset": 8,
            "slot": "4",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}