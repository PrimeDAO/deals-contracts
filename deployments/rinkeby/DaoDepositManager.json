{
  "address": "0x0CCf4031398367514B4169AB78ccC10949606DD8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dealModule",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dealModule",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        }
      ],
      "name": "VestingClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dealModule",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vestingStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "vestingCliff",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "vestingDuration",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VestingStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dealModule",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "depositId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "availableDealBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "claimDealVestings",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimVestings",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dealManager",
      "outputs": [
        {
          "internalType": "contract IDealManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "used",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "depositedAt",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getAvailableDealBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_depositId",
          "type": "uint32"
        }
      ],
      "name": "getDeposit",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_fromDepositId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_toDepositId",
          "type": "uint32"
        }
      ],
      "name": "getDepositRange",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "depositors",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "usedAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "times",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        }
      ],
      "name": "getTotalDepositCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getVestedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getWithdrawableAmountOfDepositor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "multipleDeposits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "registerDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "registerDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendToModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDaoDepositManager",
          "type": "address"
        }
      ],
      "name": "setDealManagerImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_vestingCliff",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_vestingDuration",
          "type": "uint32"
        }
      ],
      "name": "startVesting",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensPerDeal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "verifyBalance",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestedTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestedTokenAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestings",
      "outputs": [
        {
          "internalType": "address",
          "name": "dealModule",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "dealId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalVested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "cliff",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dealId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_depositId",
          "type": "uint32"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x47712bdf8d2b78dfc5a30c71b00692b9cd9bfdfa15145928ee5c57bb4103cf9b",
  "receipt": {
    "to": null,
    "from": "0xc039897eE5A0d14A3d1F212922FaF7e159Ab619F",
    "contractAddress": "0x0CCf4031398367514B4169AB78ccC10949606DD8",
    "transactionIndex": 17,
    "gasUsed": "2878335",
    "logsBloom": "0x
    "blockHash": "0x90a8c128962741bf120b708b6af814bacdf7664803adc3cc2467581704e5ecd3",
    "transactionHash": "0x47712bdf8d2b78dfc5a30c71b00692b9cd9bfdfa15145928ee5c57bb4103cf9b",
    "logs": [],
    "blockNumber": 10499240,
    "cumulativeGasUsed": "4544136",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5e5112e23e83b29aa6fbe2ca6d4dfd39",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"name\":\"VestingClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"vestingCliff\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"vestingDuration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"availableDealBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"claimDealVestings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVestings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealManager\",\"outputs\":[{\"internalType\":\"contract IDealManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"depositedAt\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAvailableDealBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_depositId\",\"type\":\"uint32\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_fromDepositId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_toDepositId\",\"type\":\"uint32\"}],\"name\":\"getDepositRange\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"depositors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"usedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"times\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"}],\"name\":\"getTotalDepositCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getVestedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getWithdrawableAmountOfDepositor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multipleDeposits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"registerDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"registerDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDaoDepositManager\",\"type\":\"address\"}],\"name\":\"setDealManagerImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_vestingCliff\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_vestingDuration\",\"type\":\"uint32\"}],\"name\":\"startVesting\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensPerDeal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"verifyBalance\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestedTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedTokenAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dealModule\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dealId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliff\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dealId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_depositId\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Deposited(address,uint32,address,uint256,address,uint256)\":{\"params\":{\"amount\":\"The amount that is deposited\",\"dealId\":\"A specific deal, that is part of the dealModule, for which a deposit is made\",\"dealModule\":\"The module address of which the dealId is part off\",\"depositId\":\"The ID of the deposit action (position in array)\",\"depositor\":\"The address of the depositor\",\"token\":\"The address of the ERC20 token or ETH (ZERO address)deposited\"}},\"VestingClaimed(address,uint32,address,address,uint256)\":{\"params\":{\"claimed\":\"The amount that is being claimed\",\"dao\":\"The address of the DAO, to which the claimed vesting is sent\",\"dealId\":\"A specific deal, that is part of the dealModule, for which a vesting is claimed\",\"dealModule\":\"The module address of which the dealId is part off\",\"token\":\"The address of the ERC20 token or ETH (ZERO address)\"}},\"VestingStarted(address,uint32,uint256,uint32,uint32,address,uint256)\":{\"params\":{\"amount\":\"The amount that is being vested\",\"dealId\":\"A specific deal, that is part of the dealModule, for which a vesting is started\",\"dealModule\":\"The module address of which the dealId is part off\",\"token\":\"The address of the ERC20 token or ETH (ZERO address)\",\"vestingCliff\":\"The vesting cliff, after which tokens can be claimed\",\"vestingDuration\":\"The duration the tokens are vested, in seconds\",\"vestingStart\":\"The Unix timestamp of when the vesting has been initiated\"}},\"Withdrawn(address,uint32,address,uint32,address,uint256)\":{\"params\":{\"amount\":\"The amount that is withdrawn\",\"dealId\":\"A specific deal, that is part of the dealModule, for which a withdraw is made\",\"dealModule\":\"The module address of which the dealId is part off\",\"depositId\":\"The ID of the deposit action (position in array)\",\"depositor\":\"The address of the depositor of the funds that are withdrawn\",\"token\":\"The address of the ERC20 token or ETH (ZERO address) withdrawn\"}}},\"kind\":\"dev\",\"methods\":{\"claimDealVestings(address,uint32)\":{\"details\":\"This function can be called to retrieve the claimable amount, to show in the frontend for example\",\"params\":{\"_dealId\":\"A specific deal, that is part of the dealModule\",\"_module\":\"The module address of which the dealId is part off\"},\"returns\":{\"amounts\":\"     Array of amounts claimed, in the same order as the tokens array\",\"tokens\":\"      Array of addresses of the claimed tokens, in the same order as the amounts array\"}},\"claimVestings()\":{\"details\":\"This function can be called to retrieve the claimable amounts, to show in the frontend for example\",\"returns\":{\"amounts\":\"     Array of amounts claimed, in the same order as the tokens array\",\"tokens\":\"      Array of addresses of the claimed tokens\"}},\"deposit(address,uint32,address,uint256)\":{\"details\":\"Note: if ETH is deposited, the token address should be ZERO (0)\",\"params\":{\"_amount\":\"The amount that is deposited\",\"_dealId\":\"The dealId to which this deposit is part of\",\"_module\":\"The address of the module for which is being deposited\",\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"}},\"getAvailableDealBalance(address,uint32,address)\":{\"params\":{\"_dealId\":\"The dealId that relates to the ERC20 token or ETH balance\",\"_module\":\"The address of the module to which the dealId is part of\",\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"},\"returns\":{\"_0\":\"uint256      The balance amount of the ERC20 token or ETH, specific to the dealId\"}},\"getBalance(address)\":{\"params\":{\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"},\"returns\":{\"_0\":\"uint256      The balance the contracts holds for the _token parameter\"}},\"getDeposit(address,uint32,uint32)\":{\"details\":\"If ETH has been deposited, the token address returned will show ZERO (0)\",\"params\":{\"_dealId\":\"The dealId to for which the deposit has been made\",\"_depositId\":\"The ID of the deposit action (position in array)\",\"_module\":\"The address of the module of which the dealId is part of\"},\"returns\":{\"_0\":\"address      The depositor address\",\"_1\":\"address      The address of the ERC20 token or ETH (ZERO address)\",\"_2\":\"uint256      The amount that has been deposited\",\"_3\":\"uint256      The amount already used in a deal\",\"_4\":\"uint32       The Unix timestamp of the deposit\"}},\"getDepositRange(address,uint32,uint32,uint32)\":{\"details\":\"If ETH has been deposited, the token address returned will show ZERO (0)\",\"params\":{\"_dealId\":\"The dealId to for which the deposits have been made\",\"_fromDepositId\":\"First depositId (element in array) of the range IDs\",\"_module\":\"The address of the module of which the dealId is part of\",\"_toDepositId\":\"Last depositId (element in array) of the range of IDs\"},\"returns\":{\"amounts\":\"         Array of amounts, sorted similar as tokens array, for the given deposit range\",\"depositors\":\"      Array of addresses of the depositors in the deposit range\",\"times\":\"           Array of Unix timestamps of the deposits, for the given deposit range\",\"tokens\":\"          Array of token addresses or ETH (ZERO address) in the deposit range\",\"usedAmounts\":\"     Array of amounts already used in a deal, for the given deposit range\"}},\"getTotalDepositCount(address,uint32)\":{\"params\":{\"_dealId\":\"The dealId for which deposits have been made\",\"_module\":\"The address of the module to which the dealId is part of\"},\"returns\":{\"_0\":\"uint32       The total amount of deposits made, for a given dealId\"}},\"getVestedBalance(address)\":{\"params\":{\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"},\"returns\":{\"_0\":\"uint256      The vested balance the contracts holds for the _token parameter\"}},\"getWithdrawableAmountOfDepositor(address,uint32,address,address)\":{\"details\":\"If ETH has been deposited, the token address used should be ZERO (0)\",\"params\":{\"_dealId\":\"The dealId for which a deposit has been made, to check for withdrawable amounts\",\"_depositor\":\"The address of the depositor that is able to withdraw, deposited amounts\",\"_module\":\"The address of the module of which the dealId is part of\",\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"},\"returns\":{\"_0\":\"uint256      The available amount that can be withdrawn by the depositor\"}},\"initialize(address)\":{\"params\":{\"_dao\":\"The DAO address to which this contract belongs\"}},\"multipleDeposits(address,uint32,address[],uint256[])\":{\"details\":\"Note: if ETH is deposited, the token address should be ZERO (0) Note: when calling this function, it is only possible to have 1 ETH deposit, meaning only 1  of the token addresses can be a ZERO address     \",\"params\":{\"_amounts\":\"Array of amounts that are deposited\",\"_dealId\":\"The dealId to which the deposits are part of\",\"_module\":\"The address of the module for which is being deposited\",\"_tokens\":\"Array of addresses of the ERC20 tokens or ETH (ZERO address)\"}},\"registerDeposit(address,uint32,address)\":{\"details\":\"Note: if ETH has been sent, the token address for registering should be ZERO (0)\",\"params\":{\"_dealId\":\"The dealId to which this deposit is part of\",\"_module\":\"The address of the module for which is being deposited\",\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"}},\"registerDeposits(address,uint32,address[])\":{\"details\":\"Note: if ETH has been sent, the token address for registering should be ZERO (0)\",\"params\":{\"_dealId\":\"The dealId to which this deposit is part of\",\"_module\":\"The address of the module for which is being deposited\",\"_tokens\":\"An array of ERC20 token address and/or ZERO address, symbolizing an ETH deposit\"}},\"sendToModule(uint32,address,uint256)\":{\"params\":{\"_amount\":\"The amount that is sent to the module\",\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\"}},\"setDealManagerImplementation(address)\":{\"params\":{\"_newDaoDepositManager\":\"The address of the new DealManager\"}},\"startVesting(uint32,address,uint256,uint32,uint32)\":{\"params\":{\"_amount\":\"The total amount being vested\",\"_token\":\"The address of the ERC20 token or ETH (ZERO address)\",\"_vestingCliff\":\"The duration after which tokens can be claimed starting from the vesting start, in seconds\",\"_vestingDuration\":\"The duration the tokens are vested, in seconds\"}},\"verifyBalance(address)\":{\"params\":{\"_token\":\"Address of the ERC20 token or ETH (ZERO address)\"}},\"withdraw(address,uint32,uint32)\":{\"details\":\"Note: if the deposit has been registered through the function registerDeposit(), withdrawing can only happen after the periode for funding deal has been expired\",\"params\":{\"_dealId\":\"The dealId to for which the deposit has been made, that is being withdrawn\",\"_depositId\":\"The ID of the deposit action (position in array)\",\"_module\":\"The address of the module to which the dealId is part of\"},\"returns\":{\"_0\":\"address      The address of the depositor\",\"_1\":\"address      The address of the ERC20 token or ETH (ZERO address)\",\"_2\":\"uint256      The available amount that is withdrawn\"}}},\"title\":\"PrimeDeals Dao Deposit Manager\",\"version\":1},\"userdoc\":{\"events\":{\"Deposited(address,uint32,address,uint256,address,uint256)\":{\"notice\":\"This event is emitted when a deposit is made\"},\"VestingClaimed(address,uint32,address,address,uint256)\":{\"notice\":\"This event is emitted when a vesting is claimed\"},\"VestingStarted(address,uint32,uint256,uint32,uint32,address,uint256)\":{\"notice\":\"This event is emitted when a vesting is started\"},\"Withdrawn(address,uint32,address,uint32,address,uint256)\":{\"notice\":\"This event is emitted when a withdraw is made\"}},\"kind\":\"user\",\"methods\":{\"availableDealBalances(address,address,uint32)\":{\"notice\":\"token address => deal module address => deal module id => balance\"},\"claimDealVestings(address,uint32)\":{\"notice\":\"Claims all the possible ERC20 tokens and ETH, associated with a single dealId\"},\"claimVestings()\":{\"notice\":\"Claims all the possible ERC20 tokens and ETH, across all deals that are part of this DaoDepositManager\"},\"dao()\":{\"notice\":\"DAO address to which this DaoDepositContract is linked\"},\"dealManager()\":{\"notice\":\"Address of the DealManager implementation\"},\"deposit(address,uint32,address,uint256)\":{\"notice\":\"Transfers the token amount to the DaoDepositManager and stores the parameters in a Deposit structure.\"},\"deposits(address,uint256,uint256)\":{\"notice\":\"deal module address => deal id => deposits array\"},\"getAvailableDealBalance(address,uint32,address)\":{\"notice\":\"Returns the stored amount of an ERC20 token or ETH, for a given deal\"},\"getBalance(address)\":{\"notice\":\"Returns the balance the DaoDepositContract holds, for a given ERC20 token or ETH (ZERO address)\"},\"getDeposit(address,uint32,uint32)\":{\"notice\":\"Returns all the members in the Deposit struct for a given depositId\"},\"getDepositRange(address,uint32,uint32,uint32)\":{\"notice\":\"Returns all the members from all the Deposits within a given range of depositIds\"},\"getTotalDepositCount(address,uint32)\":{\"notice\":\"Returns the total number of deposits made, for a given dealId\"},\"getVestedBalance(address)\":{\"notice\":\"Returns the vested balance the DaoDepositContract holds, for a given ERC20 token or ETH (ZERO address)\"},\"getWithdrawableAmountOfDepositor(address,uint32,address,address)\":{\"notice\":\"Returns the withdrawable amount of a specifc token and dealId, for a given address\"},\"initialize(address)\":{\"notice\":\"Initialize the DaoDepositManager\"},\"multipleDeposits(address,uint32,address[],uint256[])\":{\"notice\":\"Transfers multiple tokens and amounts to the DaoDepositManager and stores the parameters for each deposit in a Deposit structure.\"},\"registerDeposit(address,uint32,address)\":{\"notice\":\"Registers deposits of ERC20 tokens or ETH that have been sent to the contract directly, without envoking the method deposit(). The funds will be stored with the DAO address as the depositor address\"},\"registerDeposits(address,uint32,address[])\":{\"notice\":\"Registers multiple deposits of ERC20 tokens and/or ETH that have been sent to the contract directly, without envoking the method deposit() or multipleDeposits(). The funds will be stored with the DAO address as the depositor address\"},\"sendToModule(uint32,address,uint256)\":{\"notice\":\"Sends the token and amount associated with the dealId into the Deal module\"},\"setDealManagerImplementation(address)\":{\"notice\":\"Sets a new address for the DealManager implementation\"},\"startVesting(uint32,address,uint256,uint32,uint32)\":{\"notice\":\"Starts the vesting periode for a given token plus amount, associated to a dealId\"},\"tokenBalances(address)\":{\"notice\":\"token address => balance\"},\"tokensPerDeal(address,uint256)\":{\"notice\":\"deal module address => deal id => token counter\"},\"verifyBalance(address)\":{\"notice\":\"Verifies if the DaoDepositContract holds the balance as expected\"},\"vestedBalances(address)\":{\"notice\":\"token address => balance\"},\"vestedTokenAddresses(uint256)\":{\"notice\":\"Array of all the token addresses that are vested\"},\"vestedTokenAmounts(address)\":{\"notice\":\"token address => amount\"},\"vestings(uint256)\":{\"notice\":\"Array of vestings where the index is the vesting ID\"},\"withdraw(address,uint32,uint32)\":{\"notice\":\"Sends the token and amount, stored in the Deposit associated with the depositId to the depositor\"}},\"notice\":\"Smart contract to manage the deposits, withdraws and vestings of a DAO\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DaoDepositManager.sol\":\"DaoDepositManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/DaoDepositManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IDealManager.sol\\\";\\nimport \\\"./interfaces/IModuleBase.sol\\\";\\n\\n/**\\n * @title                   PrimeDeals Dao Deposit Manager\\n * @notice                  Smart contract to manage the\\n                            deposits, withdraws and vestings of a DAO\\n */\\ncontract DaoDepositManager {\\n    /// DAO address to which this DaoDepositContract is linked\\n    address public dao;\\n    /// Address of the DealManager implementation\\n    IDealManager public dealManager;\\n    /// token address => balance\\n    mapping(address => uint256) public tokenBalances;\\n    /// token address => deal module address => deal module id => balance\\n    mapping(address => mapping(address => mapping(uint32 => uint256)))\\n        public availableDealBalances;\\n    /// token address => balance\\n    mapping(address => uint256) public vestedBalances;\\n    /// deal module address => deal id => deposits array\\n    mapping(address => mapping(uint256 => Deposit[])) public deposits;\\n    /// Array of vestings where the index is the vesting ID\\n    Vesting[] public vestings;\\n    /// Array of all the token addresses that are vested\\n    address[] public vestedTokenAddresses;\\n    /// token address => amount\\n    mapping(address => uint256) public vestedTokenAmounts;\\n    /// deal module address => deal id => token counter\\n    mapping(address => mapping(uint256 => uint256)) public tokensPerDeal;\\n\\n    struct Deposit {\\n        /// The depositor of the tokens\\n        address depositor;\\n        /// The address of the ERC20 token or ETH (ZERO address), that is deposited\\n        address token;\\n        /// Amount of the token being deposited\\n        uint256 amount;\\n        /// The amount already used for a Deal\\n        uint256 used;\\n        /// Unix timestamp of the deposit\\n        uint32 depositedAt;\\n    }\\n\\n    struct Vesting {\\n        /// The address of the module to which this vesting is linked\\n        address dealModule;\\n        /// The ID for a specific deal, that is stored in the module\\n        uint32 dealId;\\n        /// The address of the ERC20 token or ETH (ZERO address)\\n        address token;\\n        /// The total amount being vested\\n        uint256 totalVested;\\n        /// The total amount of claimed vesting\\n        uint256 totalClaimed;\\n        /// The Unix timestamp when the vesting has been initiated\\n        uint32 startTime;\\n        /// The duration after which tokens can be claimed starting from the vesting start,\\n        /// in seconds\\n        uint32 cliff;\\n        /// The duration the tokens are vested, in seconds\\n        uint32 duration;\\n    }\\n\\n    /**\\n     * @notice                  This event is emitted when a deposit is made\\n     * @param dealModule        The module address of which the dealId is part off\\n     * @param dealId            A specific deal, that is part of the dealModule, for which a\\n                                deposit is made\\n     * @param depositor         The address of the depositor\\n     * @param depositId         The ID of the deposit action (position in array)\\n     * @param token             The address of the ERC20 token or ETH (ZERO address)deposited\\n     * @param amount            The amount that is deposited\\n     */\\n    event Deposited(\\n        address indexed dealModule,\\n        uint32 indexed dealId,\\n        address indexed depositor,\\n        uint256 depositId,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice                  This event is emitted when a withdraw is made\\n     * @param dealModule        The module address of which the dealId is part off\\n     * @param dealId            A specific deal, that is part of the dealModule, for which a\\n                                withdraw is made\\n     * @param depositor         The address of the depositor of the funds that are withdrawn\\n     * @param depositId         The ID of the deposit action (position in array)\\n     * @param token             The address of the ERC20 token or ETH (ZERO address) withdrawn\\n     * @param amount            The amount that is withdrawn\\n     */\\n    event Withdrawn(\\n        address indexed dealModule,\\n        uint32 indexed dealId,\\n        address indexed depositor,\\n        uint32 depositId,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice                  This event is emitted when a vesting is started\\n     * @param dealModule        The module address of which the dealId is part off\\n     * @param dealId            A specific deal, that is part of the dealModule, for which a\\n                                vesting is started\\n     * @param vestingStart      The Unix timestamp of when the vesting has been initiated\\n     * @param vestingCliff      The vesting cliff, after which tokens can be claimed\\n     * @param vestingDuration   The duration the tokens are vested, in seconds\\n     * @param token             The address of the ERC20 token or ETH (ZERO address)\\n     * @param amount            The amount that is being vested\\n     */\\n    event VestingStarted(\\n        address indexed dealModule,\\n        uint32 indexed dealId,\\n        uint256 indexed vestingStart,\\n        uint32 vestingCliff,\\n        uint32 vestingDuration,\\n        address token,\\n        uint256 amount\\n    );\\n    /**\\n     * @notice              This event is emitted when a vesting is claimed\\n     * @param dealModule    The module address of which the dealId is part off\\n     * @param dealId        A specific deal, that is part of the dealModule, for which a\\n                            vesting is claimed\\n     * @param dao           The address of the DAO, to which the claimed vesting is sent\\n     * @param token         The address of the ERC20 token or ETH (ZERO address)\\n     * @param claimed       The amount that is being claimed\\n     */\\n    event VestingClaimed(\\n        address indexed dealModule,\\n        uint32 indexed dealId,\\n        address indexed dao,\\n        address token,\\n        uint256 claimed\\n    );\\n\\n    /**\\n     * @notice              Initialize the DaoDepositManager\\n     * @param _dao          The DAO address to which this contract belongs\\n     */\\n    function initialize(address _dao) external {\\n        require(dao == address(0), \\\"DaoDepositManager: Error 001\\\");\\n        require(\\n            _dao != address(0) && _dao != address(this),\\n            \\\"DaoDepositManager: Error 100\\\"\\n        );\\n        dao = _dao;\\n        dealManager = IDealManager(msg.sender);\\n    }\\n\\n    /**\\n     * @notice                      Sets a new address for the DealManager implementation\\n     * @param _newDaoDepositManager The address of the new DealManager\\n     */\\n    function setDealManagerImplementation(address _newDaoDepositManager)\\n        external\\n        onlyDealManager\\n    {\\n        require(\\n            _newDaoDepositManager != address(0) &&\\n                _newDaoDepositManager != address(this),\\n            \\\"DaoDepositManager: Error 100\\\"\\n        );\\n        dealManager = IDealManager(_newDaoDepositManager);\\n    }\\n\\n    /**\\n     * @notice              Transfers the token amount to the DaoDepositManager and stores\\n                            the parameters in a Deposit structure.\\n     * @dev                 Note: if ETH is deposited, the token address should be ZERO (0)\\n     * @param _module       The address of the module for which is being deposited\\n     * @param _dealId       The dealId to which this deposit is part of\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @param _amount       The amount that is deposited\\n     */\\n    function deposit(\\n        address _module,\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) public payable {\\n        require(_amount > 0, \\\"DaoDepositManager: Error 101\\\");\\n        if (_token != address(0)) {\\n            _transferFrom(_token, msg.sender, address(this), _amount);\\n        } else {\\n            require(_amount == msg.value, \\\"DaoDepositManager: 202\\\");\\n        }\\n\\n        tokenBalances[_token] += _amount;\\n        availableDealBalances[_token][_module][_dealId] += _amount;\\n        verifyBalance(_token);\\n        deposits[_module][_dealId].push(\\n            // solhint-disable-next-line not-rely-on-time\\n            Deposit(msg.sender, _token, _amount, 0, uint32(block.timestamp))\\n        );\\n\\n        emit Deposited(\\n            _module,\\n            _dealId,\\n            msg.sender,\\n            deposits[_module][_dealId].length - 1,\\n            _token,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice              Transfers multiple tokens and amounts to the DaoDepositManager and\\n                            stores the parameters for each deposit in a Deposit structure.\\n     * @dev                 Note: if ETH is deposited, the token address should be ZERO (0)\\n                            Note: when calling this function, it is only possible to have 1 ETH\\n                            deposit, meaning only 1  of the token addresses can be a ZERO address     \\n     * @param _module       The address of the module for which is being deposited\\n     * @param _dealId       The dealId to which the deposits are part of\\n     * @param _tokens       Array of addresses of the ERC20 tokens or ETH (ZERO address)\\n     * @param _amounts      Array of amounts that are deposited\\n     */\\n    function multipleDeposits(\\n        address _module,\\n        uint32 _dealId,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable {\\n        require(\\n            _tokens.length == _amounts.length,\\n            \\\"DaoDepositManager: Error 102\\\"\\n        );\\n        for (uint256 i; i < _tokens.length; ++i) {\\n            deposit(_module, _dealId, _tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice              Registers deposits of ERC20 tokens or ETH that have been sent\\n                            to the contract directly, without envoking the method deposit().\\n                            The funds will be stored with the DAO address as the depositor address\\n     * @dev                 Note: if ETH has been sent, the token address for registering\\n                            should be ZERO (0)\\n     * @param _module       The address of the module for which is being deposited\\n     * @param _dealId       The dealId to which this deposit is part of\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     */\\n    function registerDeposit(\\n        address _module,\\n        uint32 _dealId,\\n        address _token\\n    ) public {\\n        uint256 currentBalance = getBalance(_token);\\n        uint256 total = tokenBalances[_token] + vestedBalances[_token];\\n        if (currentBalance > total) {\\n            uint256 amount = currentBalance - total;\\n            tokenBalances[_token] = currentBalance;\\n            availableDealBalances[_token][_module][_dealId] += amount;\\n            deposits[_module][_dealId].push(\\n                // solhint-disable-next-line not-rely-on-time\\n                Deposit(dao, _token, amount, 0, uint32(block.timestamp))\\n            );\\n            emit Deposited(\\n                _module,\\n                _dealId,\\n                dao,\\n                deposits[_module][_dealId].length - 1,\\n                _token,\\n                amount\\n            );\\n        }\\n        verifyBalance(_token);\\n    }\\n\\n    /**\\n     * @notice              Registers multiple deposits of ERC20 tokens and/or ETH that have been\\n                            sent to the contract directly, without envoking the method deposit()\\n                            or multipleDeposits(). The funds will be stored with the DAO address\\n                            as the depositor address\\n     * @dev                 Note: if ETH has been sent, the token address for registering\\n                            should be ZERO (0)\\n     * @param _module       The address of the module for which is being deposited\\n     * @param _dealId       The dealId to which this deposit is part of\\n     * @param _tokens       An array of ERC20 token address and/or\\n                            ZERO address, symbolizing an ETH deposit\\n     */\\n    function registerDeposits(\\n        address _module,\\n        uint32 _dealId,\\n        address[] calldata _tokens\\n    ) external {\\n        for (uint256 i; i < _tokens.length; ++i) {\\n            registerDeposit(_module, _dealId, _tokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice              Sends the token and amount, stored in the Deposit associated with the\\n                            depositId to the depositor\\n     * @dev                 Note: if the deposit has been registered through the function\\n                            registerDeposit(), withdrawing can only happen after the periode for\\n                            funding deal has been expired\\n     * @param _module       The address of the module to which the dealId is part of\\n     * @param _dealId       The dealId to for which the deposit has been made, that is being\\n                            withdrawn\\n     * @param _depositId    The ID of the deposit action (position in array)\\n     * @return address      The address of the depositor\\n     * @return address      The address of the ERC20 token or ETH (ZERO address)\\n     * @return uint256      The available amount that is withdrawn\\n     */\\n    function withdraw(\\n        address _module,\\n        uint32 _dealId,\\n        uint32 _depositId\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        require(\\n            deposits[_module][_dealId].length > _depositId,\\n            \\\"DaoDepositManager: Error 200\\\"\\n        );\\n        Deposit storage d = deposits[_module][_dealId][_depositId];\\n\\n        // Either the caller did the deposit or it's a dao deposit\\n        // and the caller facilitates the withdraw for the dao\\n        // (which is only possible after the deal expired)\\n        require(\\n            d.depositor == msg.sender ||\\n                (d.depositor == dao &&\\n                    IModuleBase(_module).hasDealExpired(_dealId)),\\n            \\\"DaoDepositManager: Error 222\\\"\\n        );\\n\\n        uint256 freeAmount = d.amount - d.used;\\n        // Deposit can't be used by a module or withdrawn already\\n        require(freeAmount > 0, \\\"DaoDepositManager: Error 240\\\");\\n        d.used = d.amount;\\n        availableDealBalances[d.token][_module][_dealId] -= freeAmount;\\n        tokenBalances[d.token] -= freeAmount;\\n        _transfer(d.token, d.depositor, freeAmount);\\n\\n        emit Withdrawn(\\n            _module,\\n            _dealId,\\n            d.depositor,\\n            _depositId,\\n            d.token,\\n            freeAmount\\n        );\\n        return (d.depositor, d.token, freeAmount);\\n    }\\n\\n    /**\\n     * @notice              Sends the token and amount associated with the dealId into the Deal\\n                            module\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @param _amount       The amount that is sent to the module\\n     */\\n    function sendToModule(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount\\n    ) external onlyModule {\\n        uint256 amountLeft = _amount;\\n        for (uint256 i; i < deposits[msg.sender][_dealId].length; ++i) {\\n            Deposit storage d = deposits[msg.sender][_dealId][i];\\n            if (d.token == _token) {\\n                uint256 freeAmount = d.amount - d.used;\\n                if (freeAmount > amountLeft) {\\n                    freeAmount = amountLeft;\\n                }\\n                amountLeft -= freeAmount;\\n                d.used += freeAmount;\\n\\n                if (amountLeft == 0) {\\n                    _transfer(_token, msg.sender, _amount);\\n                    tokenBalances[_token] -= _amount;\\n                    availableDealBalances[_token][msg.sender][\\n                        _dealId\\n                    ] -= _amount;\\n                    // break out of the loop, since we sent the tokens\\n                    // we now jump to the require statement at the end\\n                    break;\\n                }\\n            }\\n        }\\n        require(amountLeft == 0, \\\"DaoDepositManager: Error 262\\\");\\n    }\\n\\n    /**\\n     * @notice                  Starts the vesting periode for a given token plus amount,\\n                                associated to a dealId\\n     * @param _token            The address of the ERC20 token or ETH (ZERO address)\\n     * @param _amount           The total amount being vested\\n     * @param _vestingCliff     The duration after which tokens can be claimed starting from the\\n                                vesting start, in seconds\\n     * @param _vestingDuration  The duration the tokens are vested, in seconds\\n     */\\n    function startVesting(\\n        uint32 _dealId,\\n        address _token,\\n        uint256 _amount,\\n        uint32 _vestingCliff,\\n        uint32 _vestingDuration\\n    ) external payable onlyModule {\\n        require(_amount > 0, \\\"DaoDepositManager: Error 101\\\");\\n        require(\\n            _vestingCliff < _vestingDuration,\\n            \\\"DaoDepositManager: Error 201\\\"\\n        );\\n\\n        if (_token != address(0)) {\\n            _transferFrom(_token, msg.sender, address(this), _amount);\\n        } else {\\n            require(_amount == msg.value, \\\"DaoDepositManager: Error 202\\\");\\n        }\\n        // no else path, since ETH will be sent by the module,\\n        // which is verified by the verifyBalance() call after\\n        // updating the vestedBalances\\n\\n        vestedBalances[_token] += _amount;\\n\\n        verifyBalance(_token);\\n\\n        vestings.push(\\n            Vesting(\\n                msg.sender,\\n                _dealId,\\n                _token,\\n                _amount,\\n                0,\\n                // solhint-disable-next-line not-rely-on-time\\n                uint32(block.timestamp),\\n                _vestingCliff,\\n                _vestingDuration\\n            )\\n        );\\n\\n        if (vestedTokenAmounts[_token] == 0) {\\n            vestedTokenAddresses.push(_token);\\n        }\\n\\n        vestedTokenAmounts[_token] += _amount;\\n\\n        // Outside of the if-clause above to catch the\\n        // unlikely edge-case of multiple vestings of the\\n        // same token for one deal. This is necessary\\n        // for deal-based vesting claims to work.\\n        ++tokensPerDeal[msg.sender][_dealId];\\n\\n        emit VestingStarted(\\n            msg.sender,\\n            _dealId,\\n            // solhint-disable-next-line not-rely-on-time\\n            uint32(block.timestamp),\\n            _vestingCliff,\\n            _vestingDuration,\\n            _token,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice              Claims all the possible ERC20 tokens and ETH, across all deals that are\\n                            part of this DaoDepositManager\\n     * @dev                 This function can be called to retrieve the claimable amounts,\\n                            to show in the frontend for example\\n     * @return tokens       Array of addresses of the claimed tokens\\n     * @return amounts      Array of amounts claimed, in the same order as the tokens array\\n     */\\n    function claimVestings()\\n        external\\n        returns (address[] memory tokens, uint256[] memory amounts)\\n    {\\n        uint256 vestingCount = vestedTokenAddresses.length;\\n        tokens = new address[](vestingCount);\\n        amounts = new uint256[](vestingCount);\\n\\n        // Copy storage array to memory, since the \\\"original\\\"\\n        // array might change during sendReleasableClaim() if\\n        // the amount of a token reaches zero\\n        for (uint256 i; i < vestingCount; ++i) {\\n            tokens[i] = vestedTokenAddresses[i];\\n        }\\n\\n        for (uint256 i; i < vestings.length; ++i) {\\n            (address token, uint256 amount) = sendReleasableClaim(vestings[i]);\\n            for (uint256 j; j < vestingCount; ++j) {\\n                if (token == tokens[j]) {\\n                    amounts[j] += amount;\\n                }\\n            }\\n        }\\n        return (tokens, amounts);\\n    }\\n\\n    /**\\n     * @notice              Claims all the possible ERC20 tokens and ETH, associated with\\n                            a single dealId\\n     * @dev                 This function can be called to retrieve the claimable amount,\\n                            to show in the frontend for example\\n     * @param _module       The module address of which the dealId is part off\\n     * @param _dealId       A specific deal, that is part of the dealModule\\n     * @return tokens       Array of addresses of the claimed tokens, in the same order as the\\n                            amounts array\\n     * @return amounts      Array of amounts claimed, in the same order as the tokens array\\n     */\\n    function claimDealVestings(address _module, uint32 _dealId)\\n        external\\n        returns (address[] memory tokens, uint256[] memory amounts)\\n    {\\n        uint256 amountOfTokens = tokensPerDeal[_module][_dealId];\\n        tokens = new address[](amountOfTokens);\\n        amounts = new uint256[](amountOfTokens);\\n        uint256 counter;\\n        for (uint256 i; i < vestings.length; ++i) {\\n            Vesting storage v = vestings[i];\\n            if (v.dealModule == _module && v.dealId == _dealId) {\\n                (tokens[counter], amounts[counter]) = sendReleasableClaim(v);\\n                ++counter;\\n            }\\n        }\\n        return (tokens, amounts);\\n    }\\n\\n    /**\\n     * @notice              Sends the claimable amount of the token, associated with the Vesting\\n                            to the DAO address stored in the state.\\n     * @param vesting       Struct containing all the information related to vesting\\n     * @return token        Addresses of the claimed token\\n     * @return amount       Amount of the claimable token\\n     */\\n    function sendReleasableClaim(Vesting memory vesting)\\n        private\\n        returns (address token, uint256 amount)\\n    {\\n        if (vesting.totalClaimed < vesting.totalVested) {\\n            // Check cliff was reached\\n            // solhint-disable-next-line not-rely-on-time\\n            uint32 elapsedSeconds = uint32(block.timestamp) - vesting.startTime;\\n\\n            if (elapsedSeconds < vesting.cliff) {\\n                return (vesting.token, 0);\\n            }\\n            if (elapsedSeconds >= vesting.duration) {\\n                amount = vesting.totalVested - vesting.totalClaimed;\\n                vesting.totalClaimed = vesting.totalVested;\\n                tokensPerDeal[vesting.dealModule][vesting.dealId]--;\\n            } else {\\n                amount =\\n                    (vesting.totalVested * uint256(elapsedSeconds)) /\\n                    uint256(vesting.duration);\\n                vesting.totalClaimed += amount;\\n            }\\n\\n            token = vesting.token;\\n            vestedTokenAmounts[token] -= amount;\\n\\n            // if the corresponding token doesn't have any\\n            // vested amounts in any vesting anymore,\\n            // we remove it from the array\\n            if (vestedTokenAmounts[token] == 0) {\\n                uint256 arrLen = vestedTokenAddresses.length;\\n                for (uint256 i; i < arrLen; ++i) {\\n                    if (vestedTokenAddresses[i] == token) {\\n                        // if it's not the last element\\n                        // move the last to the current slot\\n                        if (i != arrLen - 1) {\\n                            vestedTokenAddresses[i] = vestedTokenAddresses[\\n                                arrLen - 1\\n                            ];\\n                        }\\n                        // remove the last entry\\n                        vestedTokenAddresses.pop();\\n                        --arrLen;\\n                    }\\n                }\\n            }\\n\\n            require(\\n                vesting.totalClaimed <= vesting.totalVested,\\n                \\\"DaoDepositManager: Error 244\\\"\\n            );\\n            vestedBalances[token] -= amount;\\n            _transfer(token, dao, amount);\\n\\n            emit VestingClaimed(\\n                vesting.dealModule,\\n                vesting.dealId,\\n                dao,\\n                token,\\n                amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice              Verifies if the DaoDepositContract holds the balance as expected\\n     * @param _token        Address of the ERC20 token or ETH (ZERO address)\\n     */\\n    function verifyBalance(address _token) public view {\\n        require(\\n            getBalance(_token) >=\\n                tokenBalances[_token] + vestedBalances[_token],\\n            \\\"DaoDepositManager: Error 245\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice              Returns all the members in the Deposit struct for a given depositId\\n     * @dev                 If ETH has been deposited, the token address returned\\n                            will show ZERO (0)\\n     * @param _module       The address of the module of which the dealId is part of\\n     * @param _dealId       The dealId to for which the deposit has been made\\n     * @param _depositId    The ID of the deposit action (position in array)\\n     * @return address      The depositor address\\n     * @return address      The address of the ERC20 token or ETH (ZERO address)\\n     * @return uint256      The amount that has been deposited\\n     * @return uint256      The amount already used in a deal\\n     * @return uint32       The Unix timestamp of the deposit\\n     */\\n    function getDeposit(\\n        address _module,\\n        uint32 _dealId,\\n        uint32 _depositId\\n    )\\n        public\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint32\\n        )\\n    {\\n        Deposit memory d = deposits[_module][_dealId][_depositId];\\n        return (d.depositor, d.token, d.amount, d.used, d.depositedAt);\\n    }\\n\\n    /**\\n     * @notice                  Returns all the members from all the Deposits within\\n                                a given range of depositIds\\n     * @dev                     If ETH has been deposited, the token address returned\\n                                will show ZERO (0)\\n     * @param _module           The address of the module of which the dealId is part of\\n     * @param _dealId           The dealId to for which the deposits have been made\\n     * @param _fromDepositId    First depositId (element in array) of the range IDs\\n     * @param _toDepositId      Last depositId (element in array) of the range of IDs\\n     * @return depositors       Array of addresses of the depositors in the deposit range\\n     * @return tokens           Array of token addresses or ETH (ZERO address) in the\\n                                deposit range\\n     * @return amounts          Array of amounts, sorted similar as tokens array, for the given\\n                                deposit range\\n     * @return usedAmounts      Array of amounts already used in a deal, for the given\\n                                deposit range\\n     * @return times            Array of Unix timestamps of the deposits, for the given\\n                                deposit range\\n     */\\n    function getDepositRange(\\n        address _module,\\n        uint32 _dealId,\\n        uint32 _fromDepositId,\\n        uint32 _toDepositId\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory depositors,\\n            address[] memory tokens,\\n            uint256[] memory amounts,\\n            uint256[] memory usedAmounts,\\n            uint256[] memory times\\n        )\\n    {\\n        uint32 range = 1 + _toDepositId - _fromDepositId; // inclusive range\\n        depositors = new address[](range);\\n        tokens = new address[](range);\\n        amounts = new uint256[](range);\\n        usedAmounts = new uint256[](range);\\n        times = new uint256[](range);\\n        uint256 index = 0; // needed since the ids can start at > 0\\n        for (uint32 i = _fromDepositId; i <= _toDepositId; ++i) {\\n            (\\n                depositors[index],\\n                tokens[index],\\n                amounts[index],\\n                usedAmounts[index],\\n                times[index]\\n            ) = getDeposit(_module, _dealId, i);\\n            ++index;\\n        }\\n        return (depositors, tokens, amounts, usedAmounts, times);\\n    }\\n\\n    /**\\n     * @notice              Returns the stored amount of an ERC20 token or ETH, for a given deal\\n     * @param _module       The address of the module to which the dealId is part of\\n     * @param _dealId       The dealId that relates to the ERC20 token or ETH balance\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @return uint256      The balance amount of the ERC20 token or ETH, specific to the dealId\\n     */\\n    function getAvailableDealBalance(\\n        address _module,\\n        uint32 _dealId,\\n        address _token\\n    ) external view returns (uint256) {\\n        return availableDealBalances[_token][_module][_dealId];\\n    }\\n\\n    /**\\n     * @notice              Returns the total number of deposits made, for a given dealId\\n     * @param _module       The address of the module to which the dealId is part of\\n     * @param _dealId       The dealId for which deposits have been made\\n     * @return uint32       The total amount of deposits made, for a given dealId\\n     */\\n    function getTotalDepositCount(address _module, uint32 _dealId)\\n        external\\n        view\\n        returns (uint32)\\n    {\\n        return uint32(deposits[_module][_dealId].length);\\n    }\\n\\n    /**\\n     * @notice              Returns the withdrawable amount of a specifc token and dealId,\\n                            for a given address\\n     * @dev                 If ETH has been deposited, the token address used should be ZERO (0)\\n     * @param _module       The address of the module of which the dealId is part of\\n     * @param _dealId       The dealId for which a deposit has been made, to check\\n                            for withdrawable amounts\\n     * @param _depositor    The address of the depositor that is able to withdraw,\\n                            deposited amounts\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @return uint256      The available amount that can be withdrawn by the depositor\\n     */\\n    function getWithdrawableAmountOfDepositor(\\n        address _module,\\n        uint32 _dealId,\\n        address _depositor,\\n        address _token\\n    ) external view returns (uint256) {\\n        uint256 freeAmount;\\n        for (uint256 i; i < deposits[_module][_dealId].length; ++i) {\\n            if (\\n                deposits[_module][_dealId][i].depositor == _depositor &&\\n                deposits[_module][_dealId][i].token == _token\\n            ) {\\n                freeAmount += (deposits[_module][_dealId][i].amount -\\n                    deposits[_module][_dealId][i].used);\\n            }\\n        }\\n        return freeAmount;\\n    }\\n\\n    /**\\n     * @notice              Returns the balance the DaoDepositContract holds, for a given\\n                            ERC20 token or ETH (ZERO address)\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @return uint256      The balance the contracts holds for the _token parameter\\n     */\\n    function getBalance(address _token) public view returns (uint256) {\\n        if (_token == address(0)) {\\n            return address(this).balance;\\n        }\\n        return IERC20(_token).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice              Returns the vested balance the DaoDepositContract holds,\\n                            for a given ERC20 token or ETH (ZERO address)\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @return uint256      The vested balance the contracts holds for the _token parameter\\n     */\\n    function getVestedBalance(address _token) external view returns (uint256) {\\n        return vestedBalances[_token];\\n    }\\n\\n    /**\\n     * @notice              Transfers the ERC20 token or ETH (ZERO address), to the _to address\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @param _to           Receiver address of the _amount of _token\\n     * @param _amount       The amount to be transferred to the _to address\\n     */\\n    function _transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_token != address(0)) {\\n            try IERC20(_token).transfer(_to, _amount) returns (bool success) {\\n                require(success, \\\"DaoDepositManager: Error 241\\\");\\n            } catch {\\n                revert(\\\"DaoDepositManager: Error 241\\\");\\n            }\\n        } else {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool sent, ) = _to.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"DaoDepositManager: Error 242\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice              Transfers the ERC20 token or ETH (ZERO address),\\n                            from the _from address to the _to address\\n     * @param _token        The address of the ERC20 token or ETH (ZERO address)\\n     * @param _from         The address on behalve of which the contract transfers the _token\\n     * @param _to           Receiver address of the _amount of _token\\n     * @param _amount       The amount to be transferred to the _to address\\n     */\\n    function _transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        try IERC20(_token).transferFrom(_from, _to, _amount) returns (\\n            bool success\\n        ) {\\n            require(success, \\\"DaoDepositManager: Error 241\\\");\\n        } catch {\\n            revert(\\\"DaoDepositManager: Error 241\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice              Modifier that validates that the msg.sender\\n                            is the DealManager contract\\n     */\\n    modifier onlyDealManager() {\\n        require(\\n            msg.sender == address(dealManager),\\n            \\\"DaoDepositManager: Error 221\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice              Modifier that validates that the msg.sender\\n                            is a Deals module\\n     */\\n    modifier onlyModule() {\\n        require(\\n            dealManager.addressIsModule(msg.sender),\\n            \\\"DaoDepositManager: Error 220\\\"\\n        );\\n        _;\\n    }\\n\\n    fallback() external payable {}\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x406e5863b9c1ac5ff2b74d99fef1f996e756ef8aac21c5a27aa217b66582b437\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IDealManager.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IDealManager {\\n    function createDaoDepositManager(address _dao) external;\\n\\n    function hasDaoDepositManager(address _dao) external view returns (bool);\\n\\n    function getDaoDepositManager(address _dao) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function addressIsModule(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa31274c64c7a0b019b71ee0839fdbf5871a178275fbf483ee201e4743b5440d9\",\"license\":\"Unlicense\"},\"contracts/interfaces/IModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IModuleBase {\\n    function moduleIdentifier() external view returns (bytes32);\\n\\n    function dealManager() external view returns (address);\\n\\n    function hasDealExpired(uint32 _dealId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x018e3884c2623613014747a4548002f0fd3e8fb1faa923505a48e1588c3293a5\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061331f806100206000396000f3fe6080604052600436106101ae5760003560e01c8063821bee73116100eb578063d40592921161008f578063ee697a4811610061578063ee697a481461066f578063f42a75901461068f578063f8b2cb4f146106c0578063f9f77a0b146106e057005b8063d4059292146105de578063da28e74a146105f1578063db07300814610611578063e20f3f3a1461064f57005b8063c4d66de8116100c8578063c4d66de81461055e578063c51a0b331461057e578063ca516cab14610591578063cb3fdb61146105b157005b8063821bee73146104a5578063836d21b51461051b578063a00ddad11461053e57005b80634cccfee91161015257806362a6a82d1161012f57806362a6a82d146103cf578063646505031461042f578063706b3eb41461044f5780637f58b9d31461046f57005b80634cccfee9146103365780634d6e1fcb14610349578063523fba7f146103a257005b8063246cd5741161018b578063246cd5741461025a5780634162169f146102b057806343069619146102d05780634ab92e49146102f057005b806301df538d146101b757806315b5a59e146101f45780632162a70c1461023a57005b366101b557005b005b3480156101c357600080fd5b506001546101d7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020057600080fd5b5061022c61020f366004612bbc565b600960209081526000928352604080842090915290825290205481565b6040519081526020016101eb565b34801561024657600080fd5b506101b5610255366004612bfa565b61070d565b34801561026657600080fd5b5061022c610275366004612c36565b6001600160a01b038082166000908152600360209081526040808320938716835292815282822063ffffffff86168352905220549392505050565b3480156102bc57600080fd5b506000546101d7906001600160a01b031681565b3480156102dc57600080fd5b506101b56102eb366004612c36565b61098e565b3480156102fc57600080fd5b5061031061030b366004612c79565b610c5f565b604080516001600160a01b039485168152939092166020840152908201526060016101eb565b6101b5610344366004612cb3565b610fab565b34801561035557600080fd5b50610369610364366004612c79565b6112d4565b604080516001600160a01b03968716815295909416602086015292840191909152606083015263ffffffff16608082015260a0016101eb565b3480156103ae57600080fd5b5061022c6103bd366004612cfe565b60026020526000908152604090205481565b3480156103db57600080fd5b5061041a6103ea366004612d20565b6001600160a01b038216600090815260056020908152604080832063ffffffff8516845290915290205492915050565b60405163ffffffff90911681526020016101eb565b34801561043b57600080fd5b506101d761044a366004612d53565b611396565b34801561045b57600080fd5b506101b561046a366004612db1565b6113c0565b34801561047b57600080fd5b5061022c61048a366004612cfe565b6001600160a01b031660009081526004602052604090205490565b3480156104b157600080fd5b506104c56104c0366004612d53565b611407565b604080516001600160a01b03998a16815263ffffffff9889166020820152989096169588019590955260608701939093526080860191909152831660a0850152821660c08401521660e0820152610100016101eb565b34801561052757600080fd5b5061053061147c565b6040516101eb929190612e86565b34801561054a57600080fd5b506101b5610559366004612cfe565b6116d7565b34801561056a57600080fd5b506101b5610579366004612cfe565b611760565b6101b561058c366004612eb4565b611851565b34801561059d57600080fd5b506103696105ac366004612f45565b61190e565b3480156105bd57600080fd5b5061022c6105cc366004612cfe565b60046020526000908152604090205481565b6101b56105ec366004612f78565b61197b565b3480156105fd57600080fd5b506101b561060c366004612cfe565b611e53565b34801561061d57600080fd5b5061022c61062c366004612fd6565b600360209081526000938452604080852082529284528284209052825290205481565b34801561065b57600080fd5b5061022c61066a366004613002565b611f3c565b34801561067b57600080fd5b5061053061068a366004612d20565b612100565b34801561069b57600080fd5b506106af6106aa366004613056565b612311565b6040516101eb95949392919061309f565b3480156106cc57600080fd5b5061022c6106db366004612cfe565b612599565b3480156106ec57600080fd5b5061022c6106fb366004612cfe565b60086020526000908152604090205481565b600154604051631b5fc51160e01b81523360048201526001600160a01b0390911690631b5fc51190602401602060405180830381865afa158015610755573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610779919061310c565b6107ca5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203232300000000060448201526064015b60405180910390fd5b8060005b33600090815260056020908152604080832063ffffffff891684529091529020548110156109395733600090815260056020908152604080832063ffffffff8916845290915281208054839081106108285761082861312e565b6000918252602090912060059091020160018101549091506001600160a01b038681169116141561092857600081600301548260020154610869919061315a565b9050838111156108765750825b610880818561315a565b9350808260030160008282546108969190613171565b909155505083610926576108ab86338761261e565b6001600160a01b038616600090815260026020526040812080548792906108d390849061315a565b90915550506001600160a01b0386166000908152600360209081526040808320338452825280832063ffffffff8b1684529091528120805487929061091990849061315a565b9091555061093992505050565b505b5061093281613189565b90506107ce565b5080156109885760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203236320000000060448201526064016107c1565b50505050565b600061099982612599565b6001600160a01b038316600090815260046020908152604080832054600290925282205492935090916109cc9190613171565b905080821115610c4f5760006109e2828461315a565b6001600160a01b03808616600090815260026020908152604080832088905560038252808320938b16835292815282822063ffffffff8a168352905290812080549293508392909190610a36908490613171565b9250508190555060056000876001600160a01b03166001600160a01b0316815260200190815260200160002060008663ffffffff1681526020019081526020016000206040518060a0016040528060008054906101000a90046001600160a01b03166001600160a01b03168152602001866001600160a01b03168152602001838152602001600081526020014263ffffffff16815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548163ffffffff021916908363ffffffff160217905550505060008054906101000a90046001600160a01b03166001600160a01b03168563ffffffff16876001600160a01b03167f024618a4a9ddce575e3f94dc55bbfba25724ec12acaf63035e40b7916e2a692c6001600560008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008b63ffffffff16815260200190815260200160002080549050610c27919061315a565b604080519182526001600160a01b038a166020830152810186905260600160405180910390a4505b610c58836116d7565b5050505050565b6001600160a01b038316600090815260056020908152604080832063ffffffff868116855292528220548291829190851610610cdd5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203230300000000060448201526064016107c1565b6001600160a01b038616600090815260056020908152604080832063ffffffff808a16855292528220805490918716908110610d1b57610d1b61312e565b6000918252602090912060059091020180549091506001600160a01b0316331480610dc9575060005481546001600160a01b039081169116148015610dc957506040516333f3352f60e21b815263ffffffff871660048201526001600160a01b0388169063cfccd4bc90602401602060405180830381865afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc9919061310c565b610e155760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203232320000000060448201526064016107c1565b600081600301548260020154610e2b919061315a565b905060008111610e7d5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203234300000000060448201526064016107c1565b600282015460038084019190915560018301546001600160a01b03908116600090815260209283526040808220928c16825291835281812063ffffffff8b16825290925281208054839290610ed390849061315a565b909155505060018201546001600160a01b031660009081526002602052604081208054839290610f0490849061315a565b909155505060018201548254610f27916001600160a01b0390811691168361261e565b815460018301546040805163ffffffff8a811682526001600160a01b03938416602083015291810185905292821692908a16918b16907f51d6741c321e9a89b9c34b21ddee7615692c2790cc53d71cc9153bc4154e26999060600160405180910390a481546001909201546001600160a01b03928316999216975095509350505050565b60008111610ffb5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203130310000000060448201526064016107c1565b6001600160a01b0382161561101b5761101682333084612774565b611063565b3481146110635760405162461bcd60e51b81526020600482015260166024820152752230b7a232b837b9b4ba26b0b730b3b2b91d1019181960511b60448201526064016107c1565b6001600160a01b0382166000908152600260205260408120805483929061108b908490613171565b90915550506001600160a01b038083166000908152600360209081526040808320938816835292815282822063ffffffff87168352905290812080548392906110d5908490613171565b909155506110e49050826116d7565b60056000856001600160a01b03166001600160a01b0316815260200190815260200160002060008463ffffffff1681526020019081526020016000206040518060a00160405280336001600160a01b03168152602001846001600160a01b03168152602001838152602001600081526020014263ffffffff16815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548163ffffffff021916908363ffffffff1602179055505050336001600160a01b03168363ffffffff16856001600160a01b03167f024618a4a9ddce575e3f94dc55bbfba25724ec12acaf63035e40b7916e2a692c6001600560008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008963ffffffff168152602001908152602001600020805490506112a8919061315a565b604080519182526001600160a01b0388166020830152810186905260600160405180910390a450505050565b6001600160a01b038316600090815260056020908152604080832063ffffffff8087168552925282208054839283928392839283929190891690811061131c5761131c61312e565b60009182526020918290206040805160a08101825260059390930290910180546001600160a01b039081168085526001830154909116948401859052600282015492840183905260038201546060850181905260049092015463ffffffff1660809094018490529d939c50909a5098509650945050505050565b600781815481106113a657600080fd5b6000918252602090912001546001600160a01b0316905081565b60005b81811015610c58576113f785858585858181106113e2576113e261312e565b90506020020160208101906102eb9190612cfe565b61140081613189565b90506113c3565b6006818154811061141757600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b03808516965063ffffffff600160a01b909504851695931693919291818116916401000000008104821691600160401b9091041688565b60075460609081908067ffffffffffffffff81111561149d5761149d6131a4565b6040519080825280602002602001820160405280156114c6578160200160208202803683370190505b5092508067ffffffffffffffff8111156114e2576114e26131a4565b60405190808252806020026020018201604052801561150b578160200160208202803683370190505b50915060005b81811015611584576007818154811061152c5761152c61312e565b9060005260206000200160009054906101000a90046001600160a01b031684828151811061155c5761155c61312e565b6001600160a01b039092166020928302919091019091015261157d81613189565b9050611511565b5060005b6006548110156116d157600080611640600684815481106115ab576115ab61312e565b60009182526020918290206040805161010081018252600590930290910180546001600160a01b03808216855263ffffffff600160a01b90920482169585019590955260018201549094169183019190915260028101546060830152600381015460808301526004015480831660a08301526401000000008104831660c0830152600160401b900490911660e0820152612820565b9150915060005b848110156116bd578681815181106116615761166161312e565b60200260200101516001600160a01b0316836001600160a01b031614156116ad57818682815181106116955761169561312e565b602002602001018181516116a99190613171565b9052505b6116b681613189565b9050611647565b505050806116ca90613189565b9050611588565b50509091565b6001600160a01b0381166000908152600460209081526040808320546002909252909120546117069190613171565b61170f82612599565b101561175d5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203234350000000060448201526064016107c1565b50565b6000546001600160a01b0316156117b95760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203030310000000060448201526064016107c1565b6001600160a01b038116158015906117da57506001600160a01b0381163014155b6118265760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203130300000000060448201526064016107c1565b600080546001600160a01b039092166001600160a01b03199283161790556001805490911633179055565b8281146118a05760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203130320000000060448201526064016107c1565b60005b83811015611905576118f587878787858181106118c2576118c261312e565b90506020020160208101906118d79190612cfe565b8686868181106118e9576118e961312e565b90506020020135610fab565b6118fe81613189565b90506118a3565b50505050505050565b6005602052826000526040600020602052816000526040600020818154811061193657600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039384169750929091169450925063ffffffff1685565b600154604051631b5fc51160e01b81523360048201526001600160a01b0390911690631b5fc51190602401602060405180830381865afa1580156119c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e7919061310c565b611a335760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203232300000000060448201526064016107c1565b60008311611a835760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203130310000000060448201526064016107c1565b8063ffffffff168263ffffffff1610611ade5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203230310000000060448201526064016107c1565b6001600160a01b03841615611afe57611af984333086612774565b611b4d565b348314611b4d5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203230320000000060448201526064016107c1565b6001600160a01b03841660009081526004602052604081208054859290611b75908490613171565b90915550611b849050846116d7565b604080516101008101825233815263ffffffff80881660208084019182526001600160a01b03898116858701818152606087018b815260006080890181815242891660a08b019081528d8a1660c08c019081528d8b1660e08d01908152600680546001810182559086529c516005909d027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810180549c518e16600160a01b026001600160c01b0319909d169e8b169e909e179b909b17909c5594517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d408a018054919098166001600160a01b0319919091161790965591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4188015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4287015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d439095018054915197518716600160401b026bffffffff0000000000000000199888166401000000000267ffffffffffffffff19909316969097169590951717959095169390931790915591815260089091522054611d8d57600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b03841660009081526008602052604081208054859290611db5908490613171565b909155505033600090815260096020908152604080832063ffffffff8916845290915281208054909190611de890613189565b909155506040805163ffffffff848116825283811660208301526001600160a01b038716828401526060820186905291514283169288169133917fa493d6c9e0b25f100e3bcacc5e236c14199bbdfe5e194c067081619b0998b9829181900360800190a45050505050565b6001546001600160a01b03163314611ead5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203232310000000060448201526064016107c1565b6001600160a01b03811615801590611ece57506001600160a01b0381163014155b611f1a5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203130300000000060448201526064016107c1565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008060005b6001600160a01b038716600090815260056020908152604080832063ffffffff8a1684529091529020548110156120f6576001600160a01b03878116600090815260056020908152604080832063ffffffff8b168452909152902080549187169183908110611fb357611fb361312e565b60009182526020909120600590910201546001600160a01b031614801561203457506001600160a01b03878116600090815260056020908152604080832063ffffffff8b1684529091529020805491861691839081106120155761201561312e565b60009182526020909120600160059092020101546001600160a01b0316145b156120e6576001600160a01b038716600090815260056020908152604080832063ffffffff8a16845290915290208054829081106120745761207461312e565b60009182526020808320600592830201600301546001600160a01b038b168452918152604080842063ffffffff8b1685529091529091208054839081106120bd576120bd61312e565b9060005260206000209060050201600201546120d9919061315a565b6120e39083613171565b91505b6120ef81613189565b9050611f42565b5095945050505050565b6001600160a01b038216600090815260096020908152604080832063ffffffff8516845290915290205460609081908067ffffffffffffffff811115612148576121486131a4565b604051908082528060200260200182016040528015612171578160200160208202803683370190505b5092508067ffffffffffffffff81111561218d5761218d6131a4565b6040519080825280602002602001820160405280156121b6578160200160208202803683370190505b5091506000805b600654811015612306576000600682815481106121dc576121dc61312e565b6000918252602090912060059091020180549091506001600160a01b03898116911614801561221b5750805463ffffffff888116600160a01b90920416145b156122f557604080516101008101825282546001600160a01b03808216835263ffffffff600160a01b90920482166020840152600185015416928201929092526002830154606082015260038301546080820152600483015480831660a08301526401000000008104831660c0830152600160401b900490911660e08201526122a390612820565b8785815181106122b5576122b561312e565b602002602001018786815181106122ce576122ce61312e565b60209081029190910101919091526001600160a01b0390911690526122f283613189565b92505b506122ff81613189565b90506121bd565b5050505b9250929050565b6060808080806000876123258860016131ba565b61232f91906131e2565b90508063ffffffff1667ffffffffffffffff811115612350576123506131a4565b604051908082528060200260200182016040528015612379578160200160208202803683370190505b5095508063ffffffff1667ffffffffffffffff81111561239b5761239b6131a4565b6040519080825280602002602001820160405280156123c4578160200160208202803683370190505b5094508063ffffffff1667ffffffffffffffff8111156123e6576123e66131a4565b60405190808252806020026020018201604052801561240f578160200160208202803683370190505b5093508063ffffffff1667ffffffffffffffff811115612431576124316131a4565b60405190808252806020026020018201604052801561245a578160200160208202803683370190505b5092508063ffffffff1667ffffffffffffffff81111561247c5761247c6131a4565b6040519080825280602002602001820160405280156124a5578160200160208202803683370190505b5091506000885b8863ffffffff168163ffffffff161161258b576124ca8c8c836112d4565b8063ffffffff1690508c87815181106124e5576124e561312e565b602002602001018c88815181106124fe576124fe61312e565b602002602001018c89815181106125175761251761312e565b602002602001018c8a815181106125305761253061312e565b602002602001018c8b815181106125495761254961312e565b602090810291909101019490945293909252929091526001600160a01b0392831690529116905261257982613189565b915061258481613207565b90506124ac565b505050945094509450945094565b60006001600160a01b0382166125b0575047919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156125f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612618919061322b565b92915050565b6001600160a01b038316156126d15760405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1925050508015612698575060408051601f3d908101601f191682019092526126959181019061310c565b60015b6126b45760405162461bcd60e51b81526004016107c190613244565b806109885760405162461bcd60e51b81526004016107c190613244565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461271e576040519150601f19603f3d011682016040523d82523d6000602084013e612723565b606091505b50509050806109885760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203234320000000060448201526064016107c1565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd906064016020604051808303816000875af19250505080156127e7575060408051601f3d908101601f191682019092526127e49181019061310c565b60015b6128035760405162461bcd60e51b81526004016107c190613244565b80610c585760405162461bcd60e51b81526004016107c190613244565b600080826060015183608001511015612b9b5760008360a001514261284591906131e2565b90508360c0015163ffffffff168163ffffffff16101561286c575050506040015190600090565b8360e0015163ffffffff168163ffffffff16106128e75783608001518460600151612897919061315a565b6060850151608086015284516001600160a01b031660009081526009602090815260408083208289015163ffffffff16845290915281208054929450906128dd8361327b565b919050555061292a565b8360e0015163ffffffff168163ffffffff1685606001516129089190613292565b61291291906132b1565b915081846080018181516129269190613171565b9052505b6040808501516001600160a01b0381166000908152600860205291822080549195508492909161295b90849061315a565b90915550506001600160a01b038316600090815260086020526040902054612a9e5760075460005b81811015612a9b57846001600160a01b0316600782815481106129a8576129a861312e565b6000918252602090912001546001600160a01b03161415612a8b576129ce60018361315a565b8114612a4c5760076129e160018461315a565b815481106129f1576129f161312e565b600091825260209091200154600780546001600160a01b039092169183908110612a1d57612a1d61312e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6007805480612a5d57612a5d6132d3565b600082815260209020810160001990810180546001600160a01b0319169055019055612a888261327b565b91505b612a9481613189565b9050612983565b50505b836060015184608001511115612af65760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203234340000000060448201526064016107c1565b6001600160a01b03831660009081526004602052604081208054849290612b1e90849061315a565b9091555050600054612b3b9084906001600160a01b03168461261e565b6000546020858101518651604080516001600160a01b0389811682529481018890529484169463ffffffff90931693909116917f965de25c186a7b2d3d49b5ced5c89058b0a7bf8779da6ebe45ea019ec9e7cdf6910160405180910390a4505b915091565b80356001600160a01b0381168114612bb757600080fd5b919050565b60008060408385031215612bcf57600080fd5b612bd883612ba0565b946020939093013593505050565b803563ffffffff81168114612bb757600080fd5b600080600060608486031215612c0f57600080fd5b612c1884612be6565b9250612c2660208501612ba0565b9150604084013590509250925092565b600080600060608486031215612c4b57600080fd5b612c5484612ba0565b9250612c6260208501612be6565b9150612c7060408501612ba0565b90509250925092565b600080600060608486031215612c8e57600080fd5b612c9784612ba0565b9250612ca560208501612be6565b9150612c7060408501612be6565b60008060008060808587031215612cc957600080fd5b612cd285612ba0565b9350612ce060208601612be6565b9250612cee60408601612ba0565b9396929550929360600135925050565b600060208284031215612d1057600080fd5b612d1982612ba0565b9392505050565b60008060408385031215612d3357600080fd5b612d3c83612ba0565b9150612d4a60208401612be6565b90509250929050565b600060208284031215612d6557600080fd5b5035919050565b60008083601f840112612d7e57600080fd5b50813567ffffffffffffffff811115612d9657600080fd5b6020830191508360208260051b850101111561230a57600080fd5b60008060008060608587031215612dc757600080fd5b612dd085612ba0565b9350612dde60208601612be6565b9250604085013567ffffffffffffffff811115612dfa57600080fd5b612e0687828801612d6c565b95989497509550505050565b600081518084526020808501945080840160005b83811015612e4b5781516001600160a01b031687529582019590820190600101612e26565b509495945050505050565b600081518084526020808501945080840160005b83811015612e4b57815187529582019590820190600101612e6a565b604081526000612e996040830185612e12565b8281036020840152612eab8185612e56565b95945050505050565b60008060008060008060808789031215612ecd57600080fd5b612ed687612ba0565b9550612ee460208801612be6565b9450604087013567ffffffffffffffff80821115612f0157600080fd5b612f0d8a838b01612d6c565b90965094506060890135915080821115612f2657600080fd5b50612f3389828a01612d6c565b979a9699509497509295939492505050565b600080600060608486031215612f5a57600080fd5b612f6384612ba0565b95602085013595506040909401359392505050565b600080600080600060a08688031215612f9057600080fd5b612f9986612be6565b9450612fa760208701612ba0565b935060408601359250612fbc60608701612be6565b9150612fca60808701612be6565b90509295509295909350565b600080600060608486031215612feb57600080fd5b612ff484612ba0565b9250612ca560208501612ba0565b6000806000806080858703121561301857600080fd5b61302185612ba0565b935061302f60208601612be6565b925061303d60408601612ba0565b915061304b60608601612ba0565b905092959194509250565b6000806000806080858703121561306c57600080fd5b61307585612ba0565b935061308360208601612be6565b925061309160408601612be6565b915061304b60608601612be6565b60a0815260006130b260a0830188612e12565b82810360208401526130c48188612e12565b905082810360408401526130d88187612e56565b905082810360608401526130ec8186612e56565b905082810360808401526131008185612e56565b98975050505050505050565b60006020828403121561311e57600080fd5b81518015158114612d1957600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561316c5761316c613144565b500390565b6000821982111561318457613184613144565b500190565b600060001982141561319d5761319d613144565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600063ffffffff8083168185168083038211156131d9576131d9613144565b01949350505050565b600063ffffffff838116908316818110156131ff576131ff613144565b039392505050565b600063ffffffff8083168181141561322157613221613144565b6001019392505050565b60006020828403121561323d57600080fd5b5051919050565b6020808252601c908201527f44616f4465706f7369744d616e616765723a204572726f722032343100000000604082015260600190565b60008161328a5761328a613144565b506000190190565b60008160001904831182151516156132ac576132ac613144565b500290565b6000826132ce57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209276000d3f49a4cc9c889d9478cdeee4ae84b8ed5e889a72d5c4a6b09f0bc88a64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101ae5760003560e01c8063821bee73116100eb578063d40592921161008f578063ee697a4811610061578063ee697a481461066f578063f42a75901461068f578063f8b2cb4f146106c0578063f9f77a0b146106e057005b8063d4059292146105de578063da28e74a146105f1578063db07300814610611578063e20f3f3a1461064f57005b8063c4d66de8116100c8578063c4d66de81461055e578063c51a0b331461057e578063ca516cab14610591578063cb3fdb61146105b157005b8063821bee73146104a5578063836d21b51461051b578063a00ddad11461053e57005b80634cccfee91161015257806362a6a82d1161012f57806362a6a82d146103cf578063646505031461042f578063706b3eb41461044f5780637f58b9d31461046f57005b80634cccfee9146103365780634d6e1fcb14610349578063523fba7f146103a257005b8063246cd5741161018b578063246cd5741461025a5780634162169f146102b057806343069619146102d05780634ab92e49146102f057005b806301df538d146101b757806315b5a59e146101f45780632162a70c1461023a57005b366101b557005b005b3480156101c357600080fd5b506001546101d7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020057600080fd5b5061022c61020f366004612bbc565b600960209081526000928352604080842090915290825290205481565b6040519081526020016101eb565b34801561024657600080fd5b506101b5610255366004612bfa565b61070d565b34801561026657600080fd5b5061022c610275366004612c36565b6001600160a01b038082166000908152600360209081526040808320938716835292815282822063ffffffff86168352905220549392505050565b3480156102bc57600080fd5b506000546101d7906001600160a01b031681565b3480156102dc57600080fd5b506101b56102eb366004612c36565b61098e565b3480156102fc57600080fd5b5061031061030b366004612c79565b610c5f565b604080516001600160a01b039485168152939092166020840152908201526060016101eb565b6101b5610344366004612cb3565b610fab565b34801561035557600080fd5b50610369610364366004612c79565b6112d4565b604080516001600160a01b03968716815295909416602086015292840191909152606083015263ffffffff16608082015260a0016101eb565b3480156103ae57600080fd5b5061022c6103bd366004612cfe565b60026020526000908152604090205481565b3480156103db57600080fd5b5061041a6103ea366004612d20565b6001600160a01b038216600090815260056020908152604080832063ffffffff8516845290915290205492915050565b60405163ffffffff90911681526020016101eb565b34801561043b57600080fd5b506101d761044a366004612d53565b611396565b34801561045b57600080fd5b506101b561046a366004612db1565b6113c0565b34801561047b57600080fd5b5061022c61048a366004612cfe565b6001600160a01b031660009081526004602052604090205490565b3480156104b157600080fd5b506104c56104c0366004612d53565b611407565b604080516001600160a01b03998a16815263ffffffff9889166020820152989096169588019590955260608701939093526080860191909152831660a0850152821660c08401521660e0820152610100016101eb565b34801561052757600080fd5b5061053061147c565b6040516101eb929190612e86565b34801561054a57600080fd5b506101b5610559366004612cfe565b6116d7565b34801561056a57600080fd5b506101b5610579366004612cfe565b611760565b6101b561058c366004612eb4565b611851565b34801561059d57600080fd5b506103696105ac366004612f45565b61190e565b3480156105bd57600080fd5b5061022c6105cc366004612cfe565b60046020526000908152604090205481565b6101b56105ec366004612f78565b61197b565b3480156105fd57600080fd5b506101b561060c366004612cfe565b611e53565b34801561061d57600080fd5b5061022c61062c366004612fd6565b600360209081526000938452604080852082529284528284209052825290205481565b34801561065b57600080fd5b5061022c61066a366004613002565b611f3c565b34801561067b57600080fd5b5061053061068a366004612d20565b612100565b34801561069b57600080fd5b506106af6106aa366004613056565b612311565b6040516101eb95949392919061309f565b3480156106cc57600080fd5b5061022c6106db366004612cfe565b612599565b3480156106ec57600080fd5b5061022c6106fb366004612cfe565b60086020526000908152604090205481565b600154604051631b5fc51160e01b81523360048201526001600160a01b0390911690631b5fc51190602401602060405180830381865afa158015610755573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610779919061310c565b6107ca5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203232300000000060448201526064015b60405180910390fd5b8060005b33600090815260056020908152604080832063ffffffff891684529091529020548110156109395733600090815260056020908152604080832063ffffffff8916845290915281208054839081106108285761082861312e565b6000918252602090912060059091020160018101549091506001600160a01b038681169116141561092857600081600301548260020154610869919061315a565b9050838111156108765750825b610880818561315a565b9350808260030160008282546108969190613171565b909155505083610926576108ab86338761261e565b6001600160a01b038616600090815260026020526040812080548792906108d390849061315a565b90915550506001600160a01b0386166000908152600360209081526040808320338452825280832063ffffffff8b1684529091528120805487929061091990849061315a565b9091555061093992505050565b505b5061093281613189565b90506107ce565b5080156109885760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203236320000000060448201526064016107c1565b50505050565b600061099982612599565b6001600160a01b038316600090815260046020908152604080832054600290925282205492935090916109cc9190613171565b905080821115610c4f5760006109e2828461315a565b6001600160a01b03808616600090815260026020908152604080832088905560038252808320938b16835292815282822063ffffffff8a168352905290812080549293508392909190610a36908490613171565b9250508190555060056000876001600160a01b03166001600160a01b0316815260200190815260200160002060008663ffffffff1681526020019081526020016000206040518060a0016040528060008054906101000a90046001600160a01b03166001600160a01b03168152602001866001600160a01b03168152602001838152602001600081526020014263ffffffff16815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548163ffffffff021916908363ffffffff160217905550505060008054906101000a90046001600160a01b03166001600160a01b03168563ffffffff16876001600160a01b03167f024618a4a9ddce575e3f94dc55bbfba25724ec12acaf63035e40b7916e2a692c6001600560008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008b63ffffffff16815260200190815260200160002080549050610c27919061315a565b604080519182526001600160a01b038a166020830152810186905260600160405180910390a4505b610c58836116d7565b5050505050565b6001600160a01b038316600090815260056020908152604080832063ffffffff868116855292528220548291829190851610610cdd5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203230300000000060448201526064016107c1565b6001600160a01b038616600090815260056020908152604080832063ffffffff808a16855292528220805490918716908110610d1b57610d1b61312e565b6000918252602090912060059091020180549091506001600160a01b0316331480610dc9575060005481546001600160a01b039081169116148015610dc957506040516333f3352f60e21b815263ffffffff871660048201526001600160a01b0388169063cfccd4bc90602401602060405180830381865afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc9919061310c565b610e155760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203232320000000060448201526064016107c1565b600081600301548260020154610e2b919061315a565b905060008111610e7d5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203234300000000060448201526064016107c1565b600282015460038084019190915560018301546001600160a01b03908116600090815260209283526040808220928c16825291835281812063ffffffff8b16825290925281208054839290610ed390849061315a565b909155505060018201546001600160a01b031660009081526002602052604081208054839290610f0490849061315a565b909155505060018201548254610f27916001600160a01b0390811691168361261e565b815460018301546040805163ffffffff8a811682526001600160a01b03938416602083015291810185905292821692908a16918b16907f51d6741c321e9a89b9c34b21ddee7615692c2790cc53d71cc9153bc4154e26999060600160405180910390a481546001909201546001600160a01b03928316999216975095509350505050565b60008111610ffb5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203130310000000060448201526064016107c1565b6001600160a01b0382161561101b5761101682333084612774565b611063565b3481146110635760405162461bcd60e51b81526020600482015260166024820152752230b7a232b837b9b4ba26b0b730b3b2b91d1019181960511b60448201526064016107c1565b6001600160a01b0382166000908152600260205260408120805483929061108b908490613171565b90915550506001600160a01b038083166000908152600360209081526040808320938816835292815282822063ffffffff87168352905290812080548392906110d5908490613171565b909155506110e49050826116d7565b60056000856001600160a01b03166001600160a01b0316815260200190815260200160002060008463ffffffff1681526020019081526020016000206040518060a00160405280336001600160a01b03168152602001846001600160a01b03168152602001838152602001600081526020014263ffffffff16815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548163ffffffff021916908363ffffffff1602179055505050336001600160a01b03168363ffffffff16856001600160a01b03167f024618a4a9ddce575e3f94dc55bbfba25724ec12acaf63035e40b7916e2a692c6001600560008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008963ffffffff168152602001908152602001600020805490506112a8919061315a565b604080519182526001600160a01b0388166020830152810186905260600160405180910390a450505050565b6001600160a01b038316600090815260056020908152604080832063ffffffff8087168552925282208054839283928392839283929190891690811061131c5761131c61312e565b60009182526020918290206040805160a08101825260059390930290910180546001600160a01b039081168085526001830154909116948401859052600282015492840183905260038201546060850181905260049092015463ffffffff1660809094018490529d939c50909a5098509650945050505050565b600781815481106113a657600080fd5b6000918252602090912001546001600160a01b0316905081565b60005b81811015610c58576113f785858585858181106113e2576113e261312e565b90506020020160208101906102eb9190612cfe565b61140081613189565b90506113c3565b6006818154811061141757600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b03808516965063ffffffff600160a01b909504851695931693919291818116916401000000008104821691600160401b9091041688565b60075460609081908067ffffffffffffffff81111561149d5761149d6131a4565b6040519080825280602002602001820160405280156114c6578160200160208202803683370190505b5092508067ffffffffffffffff8111156114e2576114e26131a4565b60405190808252806020026020018201604052801561150b578160200160208202803683370190505b50915060005b81811015611584576007818154811061152c5761152c61312e565b9060005260206000200160009054906101000a90046001600160a01b031684828151811061155c5761155c61312e565b6001600160a01b039092166020928302919091019091015261157d81613189565b9050611511565b5060005b6006548110156116d157600080611640600684815481106115ab576115ab61312e565b60009182526020918290206040805161010081018252600590930290910180546001600160a01b03808216855263ffffffff600160a01b90920482169585019590955260018201549094169183019190915260028101546060830152600381015460808301526004015480831660a08301526401000000008104831660c0830152600160401b900490911660e0820152612820565b9150915060005b848110156116bd578681815181106116615761166161312e565b60200260200101516001600160a01b0316836001600160a01b031614156116ad57818682815181106116955761169561312e565b602002602001018181516116a99190613171565b9052505b6116b681613189565b9050611647565b505050806116ca90613189565b9050611588565b50509091565b6001600160a01b0381166000908152600460209081526040808320546002909252909120546117069190613171565b61170f82612599565b101561175d5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203234350000000060448201526064016107c1565b50565b6000546001600160a01b0316156117b95760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203030310000000060448201526064016107c1565b6001600160a01b038116158015906117da57506001600160a01b0381163014155b6118265760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203130300000000060448201526064016107c1565b600080546001600160a01b039092166001600160a01b03199283161790556001805490911633179055565b8281146118a05760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203130320000000060448201526064016107c1565b60005b83811015611905576118f587878787858181106118c2576118c261312e565b90506020020160208101906118d79190612cfe565b8686868181106118e9576118e961312e565b90506020020135610fab565b6118fe81613189565b90506118a3565b50505050505050565b6005602052826000526040600020602052816000526040600020818154811061193657600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039384169750929091169450925063ffffffff1685565b600154604051631b5fc51160e01b81523360048201526001600160a01b0390911690631b5fc51190602401602060405180830381865afa1580156119c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e7919061310c565b611a335760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203232300000000060448201526064016107c1565b60008311611a835760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203130310000000060448201526064016107c1565b8063ffffffff168263ffffffff1610611ade5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203230310000000060448201526064016107c1565b6001600160a01b03841615611afe57611af984333086612774565b611b4d565b348314611b4d5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203230320000000060448201526064016107c1565b6001600160a01b03841660009081526004602052604081208054859290611b75908490613171565b90915550611b849050846116d7565b604080516101008101825233815263ffffffff80881660208084019182526001600160a01b03898116858701818152606087018b815260006080890181815242891660a08b019081528d8a1660c08c019081528d8b1660e08d01908152600680546001810182559086529c516005909d027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810180549c518e16600160a01b026001600160c01b0319909d169e8b169e909e179b909b17909c5594517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d408a018054919098166001600160a01b0319919091161790965591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4188015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4287015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d439095018054915197518716600160401b026bffffffff0000000000000000199888166401000000000267ffffffffffffffff19909316969097169590951717959095169390931790915591815260089091522054611d8d57600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b03841660009081526008602052604081208054859290611db5908490613171565b909155505033600090815260096020908152604080832063ffffffff8916845290915281208054909190611de890613189565b909155506040805163ffffffff848116825283811660208301526001600160a01b038716828401526060820186905291514283169288169133917fa493d6c9e0b25f100e3bcacc5e236c14199bbdfe5e194c067081619b0998b9829181900360800190a45050505050565b6001546001600160a01b03163314611ead5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203232310000000060448201526064016107c1565b6001600160a01b03811615801590611ece57506001600160a01b0381163014155b611f1a5760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203130300000000060448201526064016107c1565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008060005b6001600160a01b038716600090815260056020908152604080832063ffffffff8a1684529091529020548110156120f6576001600160a01b03878116600090815260056020908152604080832063ffffffff8b168452909152902080549187169183908110611fb357611fb361312e565b60009182526020909120600590910201546001600160a01b031614801561203457506001600160a01b03878116600090815260056020908152604080832063ffffffff8b1684529091529020805491861691839081106120155761201561312e565b60009182526020909120600160059092020101546001600160a01b0316145b156120e6576001600160a01b038716600090815260056020908152604080832063ffffffff8a16845290915290208054829081106120745761207461312e565b60009182526020808320600592830201600301546001600160a01b038b168452918152604080842063ffffffff8b1685529091529091208054839081106120bd576120bd61312e565b9060005260206000209060050201600201546120d9919061315a565b6120e39083613171565b91505b6120ef81613189565b9050611f42565b5095945050505050565b6001600160a01b038216600090815260096020908152604080832063ffffffff8516845290915290205460609081908067ffffffffffffffff811115612148576121486131a4565b604051908082528060200260200182016040528015612171578160200160208202803683370190505b5092508067ffffffffffffffff81111561218d5761218d6131a4565b6040519080825280602002602001820160405280156121b6578160200160208202803683370190505b5091506000805b600654811015612306576000600682815481106121dc576121dc61312e565b6000918252602090912060059091020180549091506001600160a01b03898116911614801561221b5750805463ffffffff888116600160a01b90920416145b156122f557604080516101008101825282546001600160a01b03808216835263ffffffff600160a01b90920482166020840152600185015416928201929092526002830154606082015260038301546080820152600483015480831660a08301526401000000008104831660c0830152600160401b900490911660e08201526122a390612820565b8785815181106122b5576122b561312e565b602002602001018786815181106122ce576122ce61312e565b60209081029190910101919091526001600160a01b0390911690526122f283613189565b92505b506122ff81613189565b90506121bd565b5050505b9250929050565b6060808080806000876123258860016131ba565b61232f91906131e2565b90508063ffffffff1667ffffffffffffffff811115612350576123506131a4565b604051908082528060200260200182016040528015612379578160200160208202803683370190505b5095508063ffffffff1667ffffffffffffffff81111561239b5761239b6131a4565b6040519080825280602002602001820160405280156123c4578160200160208202803683370190505b5094508063ffffffff1667ffffffffffffffff8111156123e6576123e66131a4565b60405190808252806020026020018201604052801561240f578160200160208202803683370190505b5093508063ffffffff1667ffffffffffffffff811115612431576124316131a4565b60405190808252806020026020018201604052801561245a578160200160208202803683370190505b5092508063ffffffff1667ffffffffffffffff81111561247c5761247c6131a4565b6040519080825280602002602001820160405280156124a5578160200160208202803683370190505b5091506000885b8863ffffffff168163ffffffff161161258b576124ca8c8c836112d4565b8063ffffffff1690508c87815181106124e5576124e561312e565b602002602001018c88815181106124fe576124fe61312e565b602002602001018c89815181106125175761251761312e565b602002602001018c8a815181106125305761253061312e565b602002602001018c8b815181106125495761254961312e565b602090810291909101019490945293909252929091526001600160a01b0392831690529116905261257982613189565b915061258481613207565b90506124ac565b505050945094509450945094565b60006001600160a01b0382166125b0575047919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156125f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612618919061322b565b92915050565b6001600160a01b038316156126d15760405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1925050508015612698575060408051601f3d908101601f191682019092526126959181019061310c565b60015b6126b45760405162461bcd60e51b81526004016107c190613244565b806109885760405162461bcd60e51b81526004016107c190613244565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461271e576040519150601f19603f3d011682016040523d82523d6000602084013e612723565b606091505b50509050806109885760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203234320000000060448201526064016107c1565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd906064016020604051808303816000875af19250505080156127e7575060408051601f3d908101601f191682019092526127e49181019061310c565b60015b6128035760405162461bcd60e51b81526004016107c190613244565b80610c585760405162461bcd60e51b81526004016107c190613244565b600080826060015183608001511015612b9b5760008360a001514261284591906131e2565b90508360c0015163ffffffff168163ffffffff16101561286c575050506040015190600090565b8360e0015163ffffffff168163ffffffff16106128e75783608001518460600151612897919061315a565b6060850151608086015284516001600160a01b031660009081526009602090815260408083208289015163ffffffff16845290915281208054929450906128dd8361327b565b919050555061292a565b8360e0015163ffffffff168163ffffffff1685606001516129089190613292565b61291291906132b1565b915081846080018181516129269190613171565b9052505b6040808501516001600160a01b0381166000908152600860205291822080549195508492909161295b90849061315a565b90915550506001600160a01b038316600090815260086020526040902054612a9e5760075460005b81811015612a9b57846001600160a01b0316600782815481106129a8576129a861312e565b6000918252602090912001546001600160a01b03161415612a8b576129ce60018361315a565b8114612a4c5760076129e160018461315a565b815481106129f1576129f161312e565b600091825260209091200154600780546001600160a01b039092169183908110612a1d57612a1d61312e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6007805480612a5d57612a5d6132d3565b600082815260209020810160001990810180546001600160a01b0319169055019055612a888261327b565b91505b612a9481613189565b9050612983565b50505b836060015184608001511115612af65760405162461bcd60e51b815260206004820152601c60248201527f44616f4465706f7369744d616e616765723a204572726f72203234340000000060448201526064016107c1565b6001600160a01b03831660009081526004602052604081208054849290612b1e90849061315a565b9091555050600054612b3b9084906001600160a01b03168461261e565b6000546020858101518651604080516001600160a01b0389811682529481018890529484169463ffffffff90931693909116917f965de25c186a7b2d3d49b5ced5c89058b0a7bf8779da6ebe45ea019ec9e7cdf6910160405180910390a4505b915091565b80356001600160a01b0381168114612bb757600080fd5b919050565b60008060408385031215612bcf57600080fd5b612bd883612ba0565b946020939093013593505050565b803563ffffffff81168114612bb757600080fd5b600080600060608486031215612c0f57600080fd5b612c1884612be6565b9250612c2660208501612ba0565b9150604084013590509250925092565b600080600060608486031215612c4b57600080fd5b612c5484612ba0565b9250612c6260208501612be6565b9150612c7060408501612ba0565b90509250925092565b600080600060608486031215612c8e57600080fd5b612c9784612ba0565b9250612ca560208501612be6565b9150612c7060408501612be6565b60008060008060808587031215612cc957600080fd5b612cd285612ba0565b9350612ce060208601612be6565b9250612cee60408601612ba0565b9396929550929360600135925050565b600060208284031215612d1057600080fd5b612d1982612ba0565b9392505050565b60008060408385031215612d3357600080fd5b612d3c83612ba0565b9150612d4a60208401612be6565b90509250929050565b600060208284031215612d6557600080fd5b5035919050565b60008083601f840112612d7e57600080fd5b50813567ffffffffffffffff811115612d9657600080fd5b6020830191508360208260051b850101111561230a57600080fd5b60008060008060608587031215612dc757600080fd5b612dd085612ba0565b9350612dde60208601612be6565b9250604085013567ffffffffffffffff811115612dfa57600080fd5b612e0687828801612d6c565b95989497509550505050565b600081518084526020808501945080840160005b83811015612e4b5781516001600160a01b031687529582019590820190600101612e26565b509495945050505050565b600081518084526020808501945080840160005b83811015612e4b57815187529582019590820190600101612e6a565b604081526000612e996040830185612e12565b8281036020840152612eab8185612e56565b95945050505050565b60008060008060008060808789031215612ecd57600080fd5b612ed687612ba0565b9550612ee460208801612be6565b9450604087013567ffffffffffffffff80821115612f0157600080fd5b612f0d8a838b01612d6c565b90965094506060890135915080821115612f2657600080fd5b50612f3389828a01612d6c565b979a9699509497509295939492505050565b600080600060608486031215612f5a57600080fd5b612f6384612ba0565b95602085013595506040909401359392505050565b600080600080600060a08688031215612f9057600080fd5b612f9986612be6565b9450612fa760208701612ba0565b935060408601359250612fbc60608701612be6565b9150612fca60808701612be6565b90509295509295909350565b600080600060608486031215612feb57600080fd5b612ff484612ba0565b9250612ca560208501612ba0565b6000806000806080858703121561301857600080fd5b61302185612ba0565b935061302f60208601612be6565b925061303d60408601612ba0565b915061304b60608601612ba0565b905092959194509250565b6000806000806080858703121561306c57600080fd5b61307585612ba0565b935061308360208601612be6565b925061309160408601612be6565b915061304b60608601612be6565b60a0815260006130b260a0830188612e12565b82810360208401526130c48188612e12565b905082810360408401526130d88187612e56565b905082810360608401526130ec8186612e56565b905082810360808401526131008185612e56565b98975050505050505050565b60006020828403121561311e57600080fd5b81518015158114612d1957600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561316c5761316c613144565b500390565b6000821982111561318457613184613144565b500190565b600060001982141561319d5761319d613144565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600063ffffffff8083168185168083038211156131d9576131d9613144565b01949350505050565b600063ffffffff838116908316818110156131ff576131ff613144565b039392505050565b600063ffffffff8083168181141561322157613221613144565b6001019392505050565b60006020828403121561323d57600080fd5b5051919050565b6020808252601c908201527f44616f4465706f7369744d616e616765723a204572726f722032343100000000604082015260600190565b60008161328a5761328a613144565b506000190190565b60008160001904831182151516156132ac576132ac613144565b500290565b6000826132ce57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209276000d3f49a4cc9c889d9478cdeee4ae84b8ed5e889a72d5c4a6b09f0bc88a64736f6c634300080a0033",
  "devdoc": {
    "events": {
      "Deposited(address,uint32,address,uint256,address,uint256)": {
        "params": {
          "amount": "The amount that is deposited",
          "dealId": "A specific deal, that is part of the dealModule, for which a deposit is made",
          "dealModule": "The module address of which the dealId is part off",
          "depositId": "The ID of the deposit action (position in array)",
          "depositor": "The address of the depositor",
          "token": "The address of the ERC20 token or ETH (ZERO address)deposited"
        }
      },
      "VestingClaimed(address,uint32,address,address,uint256)": {
        "params": {
          "claimed": "The amount that is being claimed",
          "dao": "The address of the DAO, to which the claimed vesting is sent",
          "dealId": "A specific deal, that is part of the dealModule, for which a vesting is claimed",
          "dealModule": "The module address of which the dealId is part off",
          "token": "The address of the ERC20 token or ETH (ZERO address)"
        }
      },
      "VestingStarted(address,uint32,uint256,uint32,uint32,address,uint256)": {
        "params": {
          "amount": "The amount that is being vested",
          "dealId": "A specific deal, that is part of the dealModule, for which a vesting is started",
          "dealModule": "The module address of which the dealId is part off",
          "token": "The address of the ERC20 token or ETH (ZERO address)",
          "vestingCliff": "The vesting cliff, after which tokens can be claimed",
          "vestingDuration": "The duration the tokens are vested, in seconds",
          "vestingStart": "The Unix timestamp of when the vesting has been initiated"
        }
      },
      "Withdrawn(address,uint32,address,uint32,address,uint256)": {
        "params": {
          "amount": "The amount that is withdrawn",
          "dealId": "A specific deal, that is part of the dealModule, for which a withdraw is made",
          "dealModule": "The module address of which the dealId is part off",
          "depositId": "The ID of the deposit action (position in array)",
          "depositor": "The address of the depositor of the funds that are withdrawn",
          "token": "The address of the ERC20 token or ETH (ZERO address) withdrawn"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claimDealVestings(address,uint32)": {
        "details": "This function can be called to retrieve the claimable amount, to show in the frontend for example",
        "params": {
          "_dealId": "A specific deal, that is part of the dealModule",
          "_module": "The module address of which the dealId is part off"
        },
        "returns": {
          "amounts": "     Array of amounts claimed, in the same order as the tokens array",
          "tokens": "      Array of addresses of the claimed tokens, in the same order as the amounts array"
        }
      },
      "claimVestings()": {
        "details": "This function can be called to retrieve the claimable amounts, to show in the frontend for example",
        "returns": {
          "amounts": "     Array of amounts claimed, in the same order as the tokens array",
          "tokens": "      Array of addresses of the claimed tokens"
        }
      },
      "deposit(address,uint32,address,uint256)": {
        "details": "Note: if ETH is deposited, the token address should be ZERO (0)",
        "params": {
          "_amount": "The amount that is deposited",
          "_dealId": "The dealId to which this deposit is part of",
          "_module": "The address of the module for which is being deposited",
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        }
      },
      "getAvailableDealBalance(address,uint32,address)": {
        "params": {
          "_dealId": "The dealId that relates to the ERC20 token or ETH balance",
          "_module": "The address of the module to which the dealId is part of",
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        },
        "returns": {
          "_0": "uint256      The balance amount of the ERC20 token or ETH, specific to the dealId"
        }
      },
      "getBalance(address)": {
        "params": {
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        },
        "returns": {
          "_0": "uint256      The balance the contracts holds for the _token parameter"
        }
      },
      "getDeposit(address,uint32,uint32)": {
        "details": "If ETH has been deposited, the token address returned will show ZERO (0)",
        "params": {
          "_dealId": "The dealId to for which the deposit has been made",
          "_depositId": "The ID of the deposit action (position in array)",
          "_module": "The address of the module of which the dealId is part of"
        },
        "returns": {
          "_0": "address      The depositor address",
          "_1": "address      The address of the ERC20 token or ETH (ZERO address)",
          "_2": "uint256      The amount that has been deposited",
          "_3": "uint256      The amount already used in a deal",
          "_4": "uint32       The Unix timestamp of the deposit"
        }
      },
      "getDepositRange(address,uint32,uint32,uint32)": {
        "details": "If ETH has been deposited, the token address returned will show ZERO (0)",
        "params": {
          "_dealId": "The dealId to for which the deposits have been made",
          "_fromDepositId": "First depositId (element in array) of the range IDs",
          "_module": "The address of the module of which the dealId is part of",
          "_toDepositId": "Last depositId (element in array) of the range of IDs"
        },
        "returns": {
          "amounts": "         Array of amounts, sorted similar as tokens array, for the given deposit range",
          "depositors": "      Array of addresses of the depositors in the deposit range",
          "times": "           Array of Unix timestamps of the deposits, for the given deposit range",
          "tokens": "          Array of token addresses or ETH (ZERO address) in the deposit range",
          "usedAmounts": "     Array of amounts already used in a deal, for the given deposit range"
        }
      },
      "getTotalDepositCount(address,uint32)": {
        "params": {
          "_dealId": "The dealId for which deposits have been made",
          "_module": "The address of the module to which the dealId is part of"
        },
        "returns": {
          "_0": "uint32       The total amount of deposits made, for a given dealId"
        }
      },
      "getVestedBalance(address)": {
        "params": {
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        },
        "returns": {
          "_0": "uint256      The vested balance the contracts holds for the _token parameter"
        }
      },
      "getWithdrawableAmountOfDepositor(address,uint32,address,address)": {
        "details": "If ETH has been deposited, the token address used should be ZERO (0)",
        "params": {
          "_dealId": "The dealId for which a deposit has been made, to check for withdrawable amounts",
          "_depositor": "The address of the depositor that is able to withdraw, deposited amounts",
          "_module": "The address of the module of which the dealId is part of",
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        },
        "returns": {
          "_0": "uint256      The available amount that can be withdrawn by the depositor"
        }
      },
      "initialize(address)": {
        "params": {
          "_dao": "The DAO address to which this contract belongs"
        }
      },
      "multipleDeposits(address,uint32,address[],uint256[])": {
        "details": "Note: if ETH is deposited, the token address should be ZERO (0) Note: when calling this function, it is only possible to have 1 ETH deposit, meaning only 1  of the token addresses can be a ZERO address     ",
        "params": {
          "_amounts": "Array of amounts that are deposited",
          "_dealId": "The dealId to which the deposits are part of",
          "_module": "The address of the module for which is being deposited",
          "_tokens": "Array of addresses of the ERC20 tokens or ETH (ZERO address)"
        }
      },
      "registerDeposit(address,uint32,address)": {
        "details": "Note: if ETH has been sent, the token address for registering should be ZERO (0)",
        "params": {
          "_dealId": "The dealId to which this deposit is part of",
          "_module": "The address of the module for which is being deposited",
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        }
      },
      "registerDeposits(address,uint32,address[])": {
        "details": "Note: if ETH has been sent, the token address for registering should be ZERO (0)",
        "params": {
          "_dealId": "The dealId to which this deposit is part of",
          "_module": "The address of the module for which is being deposited",
          "_tokens": "An array of ERC20 token address and/or ZERO address, symbolizing an ETH deposit"
        }
      },
      "sendToModule(uint32,address,uint256)": {
        "params": {
          "_amount": "The amount that is sent to the module",
          "_token": "The address of the ERC20 token or ETH (ZERO address)"
        }
      },
      "setDealManagerImplementation(address)": {
        "params": {
          "_newDaoDepositManager": "The address of the new DealManager"
        }
      },
      "startVesting(uint32,address,uint256,uint32,uint32)": {
        "params": {
          "_amount": "The total amount being vested",
          "_token": "The address of the ERC20 token or ETH (ZERO address)",
          "_vestingCliff": "The duration after which tokens can be claimed starting from the vesting start, in seconds",
          "_vestingDuration": "The duration the tokens are vested, in seconds"
        }
      },
      "verifyBalance(address)": {
        "params": {
          "_token": "Address of the ERC20 token or ETH (ZERO address)"
        }
      },
      "withdraw(address,uint32,uint32)": {
        "details": "Note: if the deposit has been registered through the function registerDeposit(), withdrawing can only happen after the periode for funding deal has been expired",
        "params": {
          "_dealId": "The dealId to for which the deposit has been made, that is being withdrawn",
          "_depositId": "The ID of the deposit action (position in array)",
          "_module": "The address of the module to which the dealId is part of"
        },
        "returns": {
          "_0": "address      The address of the depositor",
          "_1": "address      The address of the ERC20 token or ETH (ZERO address)",
          "_2": "uint256      The available amount that is withdrawn"
        }
      }
    },
    "title": "PrimeDeals Dao Deposit Manager",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposited(address,uint32,address,uint256,address,uint256)": {
        "notice": "This event is emitted when a deposit is made"
      },
      "VestingClaimed(address,uint32,address,address,uint256)": {
        "notice": "This event is emitted when a vesting is claimed"
      },
      "VestingStarted(address,uint32,uint256,uint32,uint32,address,uint256)": {
        "notice": "This event is emitted when a vesting is started"
      },
      "Withdrawn(address,uint32,address,uint32,address,uint256)": {
        "notice": "This event is emitted when a withdraw is made"
      }
    },
    "kind": "user",
    "methods": {
      "availableDealBalances(address,address,uint32)": {
        "notice": "token address => deal module address => deal module id => balance"
      },
      "claimDealVestings(address,uint32)": {
        "notice": "Claims all the possible ERC20 tokens and ETH, associated with a single dealId"
      },
      "claimVestings()": {
        "notice": "Claims all the possible ERC20 tokens and ETH, across all deals that are part of this DaoDepositManager"
      },
      "dao()": {
        "notice": "DAO address to which this DaoDepositContract is linked"
      },
      "dealManager()": {
        "notice": "Address of the DealManager implementation"
      },
      "deposit(address,uint32,address,uint256)": {
        "notice": "Transfers the token amount to the DaoDepositManager and stores the parameters in a Deposit structure."
      },
      "deposits(address,uint256,uint256)": {
        "notice": "deal module address => deal id => deposits array"
      },
      "getAvailableDealBalance(address,uint32,address)": {
        "notice": "Returns the stored amount of an ERC20 token or ETH, for a given deal"
      },
      "getBalance(address)": {
        "notice": "Returns the balance the DaoDepositContract holds, for a given ERC20 token or ETH (ZERO address)"
      },
      "getDeposit(address,uint32,uint32)": {
        "notice": "Returns all the members in the Deposit struct for a given depositId"
      },
      "getDepositRange(address,uint32,uint32,uint32)": {
        "notice": "Returns all the members from all the Deposits within a given range of depositIds"
      },
      "getTotalDepositCount(address,uint32)": {
        "notice": "Returns the total number of deposits made, for a given dealId"
      },
      "getVestedBalance(address)": {
        "notice": "Returns the vested balance the DaoDepositContract holds, for a given ERC20 token or ETH (ZERO address)"
      },
      "getWithdrawableAmountOfDepositor(address,uint32,address,address)": {
        "notice": "Returns the withdrawable amount of a specifc token and dealId, for a given address"
      },
      "initialize(address)": {
        "notice": "Initialize the DaoDepositManager"
      },
      "multipleDeposits(address,uint32,address[],uint256[])": {
        "notice": "Transfers multiple tokens and amounts to the DaoDepositManager and stores the parameters for each deposit in a Deposit structure."
      },
      "registerDeposit(address,uint32,address)": {
        "notice": "Registers deposits of ERC20 tokens or ETH that have been sent to the contract directly, without envoking the method deposit(). The funds will be stored with the DAO address as the depositor address"
      },
      "registerDeposits(address,uint32,address[])": {
        "notice": "Registers multiple deposits of ERC20 tokens and/or ETH that have been sent to the contract directly, without envoking the method deposit() or multipleDeposits(). The funds will be stored with the DAO address as the depositor address"
      },
      "sendToModule(uint32,address,uint256)": {
        "notice": "Sends the token and amount associated with the dealId into the Deal module"
      },
      "setDealManagerImplementation(address)": {
        "notice": "Sets a new address for the DealManager implementation"
      },
      "startVesting(uint32,address,uint256,uint32,uint32)": {
        "notice": "Starts the vesting periode for a given token plus amount, associated to a dealId"
      },
      "tokenBalances(address)": {
        "notice": "token address => balance"
      },
      "tokensPerDeal(address,uint256)": {
        "notice": "deal module address => deal id => token counter"
      },
      "verifyBalance(address)": {
        "notice": "Verifies if the DaoDepositContract holds the balance as expected"
      },
      "vestedBalances(address)": {
        "notice": "token address => balance"
      },
      "vestedTokenAddresses(uint256)": {
        "notice": "Array of all the token addresses that are vested"
      },
      "vestedTokenAmounts(address)": {
        "notice": "token address => amount"
      },
      "vestings(uint256)": {
        "notice": "Array of vestings where the index is the vesting ID"
      },
      "withdraw(address,uint32,uint32)": {
        "notice": "Sends the token and amount, stored in the Deposit associated with the depositId to the depositor"
      }
    },
    "notice": "Smart contract to manage the deposits, withdraws and vestings of a DAO",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 929,
        "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
        "label": "dao",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 933,
        "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
        "label": "dealManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDealManager)3256"
      },
      {
        "astId": 938,
        "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
        "label": "tokenBalances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 947,
        "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
        "label": "availableDealBalances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_uint256)))"
      },
      {
        "astId": 952,
        "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
        "label": "vestedBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 961,
        "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
        "label": "deposits",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Deposit)998_storage)dyn_storage))"
      },
      {
        "astId": 966,
        "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
        "label": "vestings",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Vesting)1023_storage)dyn_storage"
      },
      {
        "astId": 970,
        "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
        "label": "vestedTokenAddresses",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 975,
        "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
        "label": "vestedTokenAmounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 982,
        "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
        "label": "tokensPerDeal",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Deposit)998_storage)dyn_storage": {
        "base": "t_struct(Deposit)998_storage",
        "encoding": "dynamic_array",
        "label": "struct DaoDepositManager.Deposit[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Vesting)1023_storage)dyn_storage": {
        "base": "t_struct(Vesting)1023_storage",
        "encoding": "dynamic_array",
        "label": "struct DaoDepositManager.Vesting[]",
        "numberOfBytes": "32"
      },
      "t_contract(IDealManager)3256": {
        "encoding": "inplace",
        "label": "contract IDealManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint32,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Deposit)998_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct DaoDepositManager.Deposit[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(Deposit)998_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(Deposit)998_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DaoDepositManager.Deposit[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Deposit)998_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Deposit)998_storage": {
        "encoding": "inplace",
        "label": "struct DaoDepositManager.Deposit",
        "members": [
          {
            "astId": 985,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "depositor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 988,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 991,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 994,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "used",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 997,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "depositedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Vesting)1023_storage": {
        "encoding": "inplace",
        "label": "struct DaoDepositManager.Vesting",
        "members": [
          {
            "astId": 1001,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "dealModule",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1004,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "dealId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1007,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1010,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "totalVested",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1013,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1016,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "startTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 1019,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "cliff",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 1022,
            "contract": "contracts/DaoDepositManager.sol:DaoDepositManager",
            "label": "duration",
            "offset": 8,
            "slot": "4",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}